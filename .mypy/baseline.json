{
  "files": {
    "mypy/applytype.py": [
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 116,
        "src": "if isinstance(nt, CallableType) or isinstance(nt, Parameters):",
        "target": "mypy.applytype.apply_generic_arguments"
      }
    ],
    "mypy/bogus_type.py": [
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"type[FlexibleAlias[Any, Any]]\")",
        "offset": 27,
        "src": "Bogus = FlexibleAlias[T, T]",
        "target": "mypy.bogus_type"
      }
    ],
    "mypy/build.py": [
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 353,
        "src": "plugin_data: Any  # config data from plugins",
        "target": "mypy.build"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 12,
        "src": "def cache_meta_from_dict(meta: dict[str, Any], data_json: str) -> CacheMeta:",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 7,
        "src": "sentinel: Any = None  # Values to be validated by the caller",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "return CacheMeta(",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"id\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | str\")",
        "offset": 0,
        "src": "meta.get(\"id\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"id\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"path\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | str\")",
        "offset": 0,
        "src": "meta.get(\"path\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"path\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 1,
        "src": "int(meta[\"mtime\"]) if \"mtime\" in meta else sentinel,",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "int(meta[\"mtime\"]) if \"mtime\" in meta else sentinel,",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "int(meta[\"mtime\"]) if \"mtime\" in meta else sentinel,",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "int(meta[\"mtime\"]) if \"mtime\" in meta else sentinel,",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "int(meta[\"mtime\"]) if \"mtime\" in meta else sentinel,",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"size\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | int\")",
        "offset": 0,
        "src": "meta.get(\"size\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"size\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"hash\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | str\")",
        "offset": 0,
        "src": "meta.get(\"hash\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"hash\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"dependencies\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | list[str]\")",
        "offset": 0,
        "src": "meta.get(\"dependencies\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any (from a limitation)]\")",
        "offset": 0,
        "src": "meta.get(\"dependencies\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 1,
        "src": "int(meta[\"data_mtime\"]) if \"data_mtime\" in meta else sentinel,",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "int(meta[\"data_mtime\"]) if \"data_mtime\" in meta else sentinel,",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "int(meta[\"data_mtime\"]) if \"data_mtime\" in meta else sentinel,",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "int(meta[\"data_mtime\"]) if \"data_mtime\" in meta else sentinel,",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 61,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "int(meta[\"data_mtime\"]) if \"data_mtime\" in meta else sentinel,",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "meta.get(\"suppressed\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | list[str]\")",
        "offset": 0,
        "src": "meta.get(\"suppressed\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any (from a limitation)]\")",
        "offset": 0,
        "src": "meta.get(\"suppressed\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"options\"),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "meta.get(\"options\"),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"dep_prios\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | list[int]\")",
        "offset": 0,
        "src": "meta.get(\"dep_prios\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"list[int | Any (from a limitation)]\")",
        "offset": 0,
        "src": "meta.get(\"dep_prios\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"dep_lines\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | list[int]\")",
        "offset": 0,
        "src": "meta.get(\"dep_lines\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"list[int | Any (from a limitation)]\")",
        "offset": 0,
        "src": "meta.get(\"dep_lines\", []),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"interface_hash\", \"\"),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | str\")",
        "offset": 0,
        "src": "meta.get(\"interface_hash\", \"\"),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"version_id\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | str\")",
        "offset": 0,
        "src": "meta.get(\"version_id\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"version_id\", sentinel),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"ignore_all\", True),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "meta.get(\"ignore_all\", True),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "meta.get(\"plugin_data\", None),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta.get(\"plugin_data\", None),",
        "target": "mypy.build.cache_meta_from_dict"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 93,
        "src": "plugin_type = getattr(module, func_name)(__version__)",
        "target": "mypy.build.load_plugins_from_config"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "if not isinstance(plugin_type, type):",
        "target": "mypy.build.load_plugins_from_config"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"type[type]\")",
        "offset": 0,
        "src": "if not isinstance(plugin_type, type):",
        "target": "mypy.build.load_plugins_from_config"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "plugin_type, plugin_path",
        "target": "mypy.build.load_plugins_from_config"
      },
      {
        "code": "no-any-expr",
        "column": 10,
        "message": "Expression type contains \"Any\" (has type \"Any | str\")",
        "offset": 52,
        "src": "ver = getattr(module, \"__version__\", \"none\")",
        "target": "mypy.build.take_module_snapshot"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | str\")",
        "offset": 1,
        "src": "return f\"{ver}:{digest}\"",
        "target": "mypy.build.take_module_snapshot"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 85,
        "src": "self.stats: dict[str, Any] = {}  # Values are ints or floats",
        "target": "mypy.build.BuildManager.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> Any\")",
        "offset": 213,
        "src": "res.sort(key=lambda x: -x[1].count(\".\"))",
        "target": "mypy.build.BuildManager.all_imported_modules_in_file"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "res.sort(key=lambda x: -x[1].count(\".\"))",
        "target": "mypy.build.BuildManager.all_imported_modules_in_file"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "res.sort(key=lambda x: -x[1].count(\".\"))",
        "target": "mypy.build.BuildManager.all_imported_modules_in_file"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 35,
        "src": "deps = json.loads(self.metastore.read(self.fg_deps_meta[id][\"path\"]))",
        "target": "mypy.build.BuildManager.load_fine_grained_deps"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"dict[Any, Any]\")",
        "offset": 2,
        "src": "deps = {}",
        "target": "mypy.build.BuildManager.load_fine_grained_deps"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "val = {k: set(v) for k, v in deps.items()}",
        "target": "mypy.build.BuildManager.load_fine_grained_deps"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression type contains \"Any\" (has type \"dict[Any, set[Any]]\")",
        "offset": 0,
        "src": "val = {k: set(v) for k, v in deps.items()}",
        "target": "mypy.build.BuildManager.load_fine_grained_deps"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = {k: set(v) for k, v in deps.items()}",
        "target": "mypy.build.BuildManager.load_fine_grained_deps"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 0,
        "src": "val = {k: set(v) for k, v in deps.items()}",
        "target": "mypy.build.BuildManager.load_fine_grained_deps"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = {k: set(v) for k, v in deps.items()}",
        "target": "mypy.build.BuildManager.load_fine_grained_deps"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = {k: set(v) for k, v in deps.items()}",
        "target": "mypy.build.BuildManager.load_fine_grained_deps"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[Any, set[Any]]\")",
        "offset": 2,
        "src": "return val",
        "target": "mypy.build.BuildManager.load_fine_grained_deps"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 37,
        "src": "def add_stats(self, **kwds: Any) -> None:",
        "target": "mypy.build.BuildManager.add_stats"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 1,
        "src": "for key, value in kwds.items():",
        "target": "mypy.build.BuildManager.add_stats"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for key, value in kwds.items():",
        "target": "mypy.build.BuildManager.add_stats"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "for key, value in kwds.items():",
        "target": "mypy.build.BuildManager.add_stats"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict_items[str, Any]\")",
        "offset": 0,
        "src": "for key, value in kwds.items():",
        "target": "mypy.build.BuildManager.add_stats"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "if key in self.stats:",
        "target": "mypy.build.BuildManager.add_stats"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "self.stats[key] += value",
        "target": "mypy.build.BuildManager.add_stats"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.stats[key] += value",
        "target": "mypy.build.BuildManager.add_stats"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.stats[key] += value",
        "target": "mypy.build.BuildManager.add_stats"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "self.stats[key] = value",
        "target": "mypy.build.BuildManager.add_stats"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.stats[key] = value",
        "target": "mypy.build.BuildManager.add_stats"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 3,
        "src": "return self.stats",
        "target": "mypy.build.BuildManager.stats_summary"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"dict[Any, Any]\")",
        "offset": 4,
        "src": "return json.dumps({k: list(v) for k, v in x.items()}, separators=(\",\", \":\"))",
        "target": "mypy.build.deps_to_json"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "return json.dumps({k: list(v) for k, v in x.items()}, separators=(\",\", \":\"))",
        "target": "mypy.build.deps_to_json"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 62,
        "src": "assert st.meta, \"Module must be either parsed or cached\"",
        "target": "mypy.build.write_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "hash = st.meta.hash",
        "target": "mypy.build.write_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 135,
        "src": "data = json.load(file.open())",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 24,
        "src": "if not isinstance(data, dict) and error():",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "baseline_format = data.get(\"format\")",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if not baseline_format:",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "metadata = data.get(\"__baseline_metadata__\")",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 63,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "baseline_format = metadata.get(\"format\") if isinstance(metadata, dict) else None",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if baseline_format is None and error():",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 9,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif baseline_format != \"1.7\":",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 8,
        "src": "not isinstance(data.get(\"files\"), dict) or not isinstance(data.get(\"targets\"), list)",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 66,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "not isinstance(data.get(\"files\"), dict) or not isinstance(data.get(\"targets\"), list)",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "baseline_errors = data.get(\"files\", {})",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "targets = data.get(\"targets\")",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if baseline_errors and targets:",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if baseline_errors and targets:",
        "target": "mypy.build.load_baseline"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | None\")",
        "offset": 24,
        "src": "snapshot = _load_json_file(",
        "target": "mypy.build.read_plugins_snapshot"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | None\")",
        "offset": 6,
        "src": "if snapshot is None:",
        "target": "mypy.build.read_plugins_snapshot"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "if not isinstance(snapshot, dict):",
        "target": "mypy.build.read_plugins_snapshot"
      },
      {
        "code": "unreachable",
        "column": 8,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "manager.log(f\"Could not load plugins snapshot: cache is not a dict: {type(snapshot)}\")",
        "target": "mypy.build.read_plugins_snapshot"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 12,
        "src": "raw_quickstart: dict[str, Any] = {}",
        "target": "mypy.build.read_quickstart_file"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 6,
        "src": "for file, (x, y, z) in raw_quickstart.items():",
        "target": "mypy.build.read_quickstart_file"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for file, (x, y, z) in raw_quickstart.items():",
        "target": "mypy.build.read_quickstart_file"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "for file, (x, y, z) in raw_quickstart.items():",
        "target": "mypy.build.read_quickstart_file"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"dict_items[str, Any]\")",
        "offset": 0,
        "src": "for file, (x, y, z) in raw_quickstart.items():",
        "target": "mypy.build.read_quickstart_file"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "quickstart[file] = (x, y, z)",
        "target": "mypy.build.read_quickstart_file"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"(Any, Any, Any)\")",
        "offset": 0,
        "src": "quickstart[file] = (x, y, z)",
        "target": "mypy.build.read_quickstart_file"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "quickstart[file] = (x, y, z)",
        "target": "mypy.build.read_quickstart_file"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "quickstart[file] = (x, y, z)",
        "target": "mypy.build.read_quickstart_file"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | None\")",
        "offset": 14,
        "src": "deps_meta = _load_json_file(",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | None\")",
        "offset": 6,
        "src": "if deps_meta is None:",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "meta_snapshot = deps_meta[\"snapshot\"]",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "meta_snapshot = deps_meta[\"snapshot\"]",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 8,
        "src": "common = set(meta_snapshot.keys()) & set(current_meta_snapshot.keys())",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "common = set(meta_snapshot.keys()) & set(current_meta_snapshot.keys())",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if any(meta_snapshot[id] != current_meta_snapshot[id] for id in common):",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if any(meta_snapshot[id] != current_meta_snapshot[id] for id in common):",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if any(meta_snapshot[id] != current_meta_snapshot[id] for id in common):",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 68,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 0,
        "src": "if any(meta_snapshot[id] != current_meta_snapshot[id] for id in common):",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 5,
        "src": "module_deps_metas = deps_meta[\"deps_meta\"]",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "module_deps_metas = deps_meta[\"deps_meta\"]",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert isinstance(module_deps_metas, dict)",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "matched = manager.getmtime(meta[\"path\"]) == meta[\"mtime\"]",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "matched = manager.getmtime(meta[\"path\"]) == meta[\"mtime\"]",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "matched = manager.getmtime(meta[\"path\"]) == meta[\"mtime\"]",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if not matched:",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "manager.log(f\"Invalid or missing fine-grained deps cache: {meta['path']}\")",
        "target": "mypy.build.read_deps_cache"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 6,
        "src": "def _load_json_file(",
        "target": "mypy.build._load_json_file"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 16,
        "src": "result = json.loads(data)",
        "target": "mypy.build._load_json_file"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 15,
        "src": "assert isinstance(result, dict)",
        "target": "mypy.build._load_json_file"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 92,
        "src": "def find_cache_meta(id: str, path: str, manager: BuildManager) -> CacheMeta | None:",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | None\")",
        "offset": 16,
        "src": "meta = _load_json_file(",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | None\")",
        "offset": 4,
        "src": "if meta is None:",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "if not isinstance(meta, dict):",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "unreachable",
        "column": 8,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "manager.log(f\"Could not load cache for {id}: meta cache is not a dict: {repr(meta)}\")",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 2,
        "src": "m = cache_meta_from_dict(meta, data_json)",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 12,
        "src": "m.id != id",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "or m.mtime is None  # type: ignore[redundant-expr]",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": null,
        "column": 11,
        "message": "Error code \"no-any-expr\" not covered by \"type: ignore\" comment",
        "offset": 0,
        "src": "or m.mtime is None  # type: ignore[redundant-expr]",
        "target": null
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "or m.size is None  # type: ignore[redundant-expr]",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": null,
        "column": 11,
        "message": "Error code \"no-any-expr\" not covered by \"type: ignore\" comment",
        "offset": 0,
        "src": "or m.size is None  # type: ignore[redundant-expr]",
        "target": null
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "or m.dependencies is None  # type: ignore[redundant-expr]",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": null,
        "column": 11,
        "message": "Error code \"no-any-expr\" not covered by \"type: ignore\" comment",
        "offset": 0,
        "src": "or m.dependencies is None  # type: ignore[redundant-expr]",
        "target": null
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "or m.data_mtime is None",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 9,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 7,
        "src": "(m.version_id != manager.version_id and not manager.options.skip_version_check)",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "or m.options is None",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "or len(m.dependencies) + len(m.suppressed) != len(m.dep_prios)",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 0,
        "src": "or len(m.dependencies) + len(m.suppressed) != len(m.dep_prios)",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 0,
        "src": "or len(m.dependencies) + len(m.suppressed) != len(m.dep_prios)",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "or len(m.dependencies) + len(m.suppressed) != len(m.dep_lines)",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 0,
        "src": "or len(m.dependencies) + len(m.suppressed) != len(m.dep_lines)",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 0,
        "src": "or len(m.dependencies) + len(m.suppressed) != len(m.dep_lines)",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 7,
        "src": "cached_options = m.options",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 27,
        "src": "plugin_data = json.loads(",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "json.dumps(manager.plugin.report_config_data(ReportConfigContext(id, path, is_check=True)))",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 2,
        "src": "if m.plugin_data != plugin_data:",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if m.plugin_data != plugin_data:",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if m.plugin_data != plugin_data:",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 5,
        "src": "return m",
        "target": "mypy.build.find_cache_meta"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def validate_meta(",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 15,
        "src": "if meta is None:",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 4,
        "src": "if meta.ignore_all and not ignore_all:",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 10,
        "src": "data_mtime = manager.getmtime(meta.data_json)",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 4,
        "src": "if data_mtime != meta.data_mtime:",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 34,
        "src": "if size != meta.size and not bazel and not fine_grained_cache:",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 6,
        "src": "if not bazel and (mtime != meta.mtime or path != meta.path):",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 0,
        "src": "if not bazel and (mtime != meta.mtime or path != meta.path):",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 7,
        "src": "if int(qmtime) == mtime and qsize == size and qhash == meta.hash:",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 2,
        "src": "meta = meta._replace(mtime=mtime, path=path)",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "return meta",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 12,
        "src": "if source_hash != meta.hash:",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 3,
        "src": "return meta",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 7,
        "src": "meta = meta._replace(mtime=mtime, path=path)",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"dict[str, str | int | list[str] | Mapping[str, object] | list[int] | Any]\")",
        "offset": 2,
        "src": "meta_dict = {",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 6,
        "src": "\"data_mtime\": meta.data_mtime,",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "\"dependencies\": meta.dependencies,",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "\"suppressed\": meta.suppressed,",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 2,
        "src": "\"dep_prios\": meta.dep_prios,",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "\"dep_lines\": meta.dep_lines,",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "\"interface_hash\": meta.interface_hash,",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 2,
        "src": "\"ignore_all\": meta.ignore_all,",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 1,
        "src": "\"plugin_data\": meta.plugin_data,",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 0,
        "src": "\"plugin_data\": meta.plugin_data,",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "\"plugin_data\": meta.plugin_data,",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"dict[str, str | int | list[str] | Mapping[str, object] | list[int] | Any]\")",
        "offset": 3,
        "src": "meta_str = json.dumps(meta_dict, indent=2, sort_keys=True)",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"dict[str, str | int | list[str] | Mapping[str, object] | list[int] | Any]\")",
        "offset": 2,
        "src": "meta_str = json.dumps(meta_dict, separators=(\",\", \":\"))",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 4,
        "src": "id, path, meta_json, meta.mtime",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 6,
        "src": "return meta",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 4,
        "src": "return meta",
        "target": "mypy.build.validate_meta"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 12,
        "src": "def json_dumps(obj: Any, debug_cache: bool) -> str:",
        "target": "mypy.build.json_dumps"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "return json.dumps(obj, indent=2, sort_keys=True)",
        "target": "mypy.build.json_dumps"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "return json.dumps(obj, sort_keys=True, separators=(\",\", \":\"))",
        "target": "mypy.build.json_dumps"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def write_cache(",
        "target": "mypy.build.write_cache"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 55,
        "src": "plugin_data = manager.plugin.report_config_data(ReportConfigContext(id, path, is_check=False))",
        "target": "mypy.build.write_cache"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"dict[str, str | int | list[str] | Mapping[str, object] | list[int] | Any]\")",
        "offset": 52,
        "src": "meta = {",
        "target": "mypy.build.write_cache"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 15,
        "src": "\"plugin_data\": plugin_data,",
        "target": "mypy.build.write_cache"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "\"plugin_data\": plugin_data,",
        "target": "mypy.build.write_cache"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[str, str | int | list[str] | Mapping[str, object] | list[int] | Any]\")",
        "offset": 4,
        "src": "meta_str = json_dumps(meta, manager.options.debug_cache)",
        "target": "mypy.build.write_cache"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"(str, CacheMeta)\")",
        "offset": 7,
        "src": "return interface_hash, cache_meta_from_dict(meta, data_json)",
        "target": "mypy.build.write_cache"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 0,
        "src": "return interface_hash, cache_meta_from_dict(meta, data_json)",
        "target": "mypy.build.write_cache"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression type contains \"Any\" (has type \"dict[str, str | int | list[str] | Mapping[str, object] | list[int] | Any]\")",
        "offset": 0,
        "src": "return interface_hash, cache_meta_from_dict(meta, data_json)",
        "target": "mypy.build.write_cache"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 183,
        "src": "meta: CacheMeta | None = None",
        "target": "mypy.build"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 120,
        "src": "if self.meta is not None:",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "self.interface_hash = self.meta.interface_hash",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "self.meta_source_hash = self.meta.hash",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 7,
        "src": "self.meta = validate_meta(self.meta, self.id, self.path, self.ignore_all, manager)",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 2,
        "src": "if self.meta:",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 3,
        "src": "self.dependencies = list(self.meta.dependencies)",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 2,
        "src": "self.suppressed = list(self.meta.suppressed)",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 3,
        "src": "assert len(all_deps) == len(self.meta.dep_prios)",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 68,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "self.priorities = {id: pri for id, pri in zip(all_deps, self.meta.dep_prios)}",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "assert len(all_deps) == len(self.meta.dep_lines)",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 72,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "self.dep_line_map = {id: line for id, line in zip(all_deps, self.meta.dep_lines)}",
        "target": "mypy.build.State.__init__"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 29,
        "src": "def xmeta(self) -> CacheMeta:",
        "target": "mypy.build.State.xmeta"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(State) -> CacheMeta\")",
        "offset": 0,
        "src": "def xmeta(self) -> CacheMeta:",
        "target": "mypy.build"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 1,
        "src": "assert self.meta, \"missing meta on allegedly fresh module\"",
        "target": "mypy.build.State.xmeta"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "return self.meta",
        "target": "mypy.build.State.xmeta"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 25,
        "src": "self.meta is not None",
        "target": "mypy.build.State.is_fresh"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 2,
        "src": "and self.dependencies == self.meta.dependencies",
        "target": "mypy.build.State.is_fresh"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 59,
        "src": "self.meta is not None",
        "target": "mypy.build.State.load_tree"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | None\")",
        "offset": 3,
        "src": "data = _load_json_file(",
        "target": "mypy.build.State.load_tree"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 1,
        "src": "self.meta.data_json, self.manager, \"Load tree \", \"Could not load tree: \"",
        "target": "mypy.build.State.load_tree"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | None\")",
        "offset": 2,
        "src": "if data is None:",
        "target": "mypy.build.State.load_tree"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 5,
        "src": "self.tree = MypyFile.deserialize(data)",
        "target": "mypy.build.State.load_tree"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"(str, CacheMeta | None)\")",
        "offset": 401,
        "src": "new_interface_hash, self.meta = write_cache(",
        "target": "mypy.build.State.write_cache"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 76,
        "src": "if self.meta:",
        "target": "mypy.build.State.generate_unused_ignore_notes"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 280,
        "src": "for pth in paths:",
        "target": "mypy.build.log_configuration"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "manager.trace(f\"    {pth}\")",
        "target": "mypy.build.log_configuration"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 50,
        "src": "elif manager.stats.get(\"fresh_metas\", 0) > 0:",
        "target": "mypy.build.dispatch"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "elif manager.stats.get(\"fresh_metas\", 0) > 0:",
        "target": "mypy.build.dispatch"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "manager.stats.clear()",
        "target": "mypy.build.dispatch"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 339,
        "src": "oldest_in_scc = min(graph[id].xmeta.data_mtime for id in scc)",
        "target": "mypy.build.process_graph"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 1,
        "src": "viable = {id for id in stale_deps if graph[id].meta is not None}",
        "target": "mypy.build.process_graph"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 2,
        "src": "0 if not viable else max(graph[dep].xmeta.data_mtime for dep in viable)",
        "target": "mypy.build.process_graph"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> int\")",
        "offset": 3,
        "src": "all_ids = sorted(ascc | viable, key=lambda id: graph[id].xmeta.data_mtime)",
        "target": "mypy.build.process_graph"
      },
      {
        "code": "no-any-expr",
        "column": 63,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 0,
        "src": "all_ids = sorted(ascc | viable, key=lambda id: graph[id].xmeta.data_mtime)",
        "target": "mypy.build.process_graph"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 3,
        "src": "if graph[id].xmeta.data_mtime < newest_in_deps:",
        "target": "mypy.build.process_graph"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 5,
        "src": "if graph[id].xmeta.data_mtime > oldest_in_scc:",
        "target": "mypy.build.process_graph"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 4,
        "src": "manager.trace(\" %5s %.0f %s\" % (key, graph[id].xmeta.data_mtime, id))",
        "target": "mypy.build.process_graph"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> int\")",
        "offset": 110,
        "src": "return sorted(ascc, key=lambda id: -graph[id].order)",
        "target": "mypy.build.order_ascc"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> int\")",
        "offset": 105,
        "src": "res.extend(sorted(ready, key=lambda scc: -min(graph[id].order for id in scc)))",
        "target": "mypy.build.sorted_components"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "res.extend(sorted(ready, key=lambda scc: -min(graph[id].order for id in scc)))",
        "target": "mypy.build.sorted_components"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "res.extend(sorted(ready, key=lambda scc: -min(graph[id].order for id in scc)))",
        "target": "mypy.build.sorted_components"
      }
    ],
    "mypy/checker.py": [
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 681,
        "src": "if isinstance(inner_type, CallableType):",
        "target": "mypy.checker.TypeChecker.check_overlapping_overloads"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 16,
        "src": "if isinstance(inner_call, CallableType):",
        "target": "mypy.checker.TypeChecker.check_overlapping_overloads"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 10,
        "src": "assert isinstance(sig1, CallableType)",
        "target": "mypy.checker.TypeChecker.check_overlapping_overloads"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 5,
        "src": "assert isinstance(sig2, CallableType)",
        "target": "mypy.checker.TypeChecker.check_overlapping_overloads"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 427,
        "src": "if isinstance(typ, CallableType):",
        "target": "mypy.checker.TypeChecker.check_func_item"
      },
      {
        "code": "no-any-expr",
        "column": 63,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 132,
        "src": "if fdef.type and isinstance(fdef.type, CallableType):",
        "target": "mypy.checker.TypeChecker.check_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 287,
        "src": "has_explicit_annotation = isinstance(fdef.type, CallableType) and any(",
        "target": "mypy.checker.TypeChecker.check_for_missing_annotations"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 21,
        "src": "elif isinstance(fdef.type, CallableType):",
        "target": "mypy.checker.TypeChecker.check_for_missing_annotations"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 175,
        "src": "if isinstance(forward_item, CallableType):",
        "target": "mypy.checker.TypeChecker.check_overlapping_op_methods"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 181,
        "src": "for substitutions in itertools.product(*subst):",
        "target": "mypy.checker.TypeChecker.expand_typevars"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"product[tuple[Any, ...]]\")",
        "offset": 0,
        "src": "for substitutions in itertools.product(*subst):",
        "target": "mypy.checker.TypeChecker.expand_typevars"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[Any, Any]\")",
        "offset": 1,
        "src": "mapping = dict(substitutions)",
        "target": "mypy.checker.TypeChecker.expand_typevars"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "mapping = dict(substitutions)",
        "target": "mypy.checker.TypeChecker.expand_typevars"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"dict[Any, Any]\")",
        "offset": 1,
        "src": "result.append((expand_func(defn, mapping), expand_type(typ, mapping)))",
        "target": "mypy.checker.TypeChecker.expand_typevars"
      },
      {
        "code": "no-any-expr",
        "column": 76,
        "message": "Expression type contains \"Any\" (has type \"dict[Any, Any]\")",
        "offset": 0,
        "src": "result.append((expand_func(defn, mapping), expand_type(typ, mapping)))",
        "target": "mypy.checker.TypeChecker.expand_typevars"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 217,
        "src": "if isinstance(tp, CallableType):",
        "target": "mypy.checker.TypeChecker.get_op_other_domain"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 53,
        "src": "elif isinstance(original, CallableType) and isinstance(override, CallableType):",
        "target": "mypy.checker.TypeChecker.check_override"
      },
      {
        "code": "no-any-expr",
        "column": 77,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 0,
        "src": "elif isinstance(original, CallableType) and isinstance(override, CallableType):",
        "target": "mypy.checker.TypeChecker.check_override"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 11,
        "src": "if isinstance(override, (CallableType, Overloaded)):",
        "target": "mypy.checker.TypeChecker.check_override"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"(type[CallableType], type[Overloaded])\")",
        "offset": 0,
        "src": "if isinstance(override, (CallableType, Overloaded)):",
        "target": "mypy.checker.TypeChecker.check_override"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 2,
        "src": "if isinstance(original, (CallableType, Overloaded)):",
        "target": "mypy.checker.TypeChecker.check_override"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"(type[CallableType], type[Overloaded])\")",
        "offset": 0,
        "src": "if isinstance(original, (CallableType, Overloaded)):",
        "target": "mypy.checker.TypeChecker.check_override"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 4,
        "src": "isinstance(override, CallableType)",
        "target": "mypy.checker.TypeChecker.check_override"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 1,
        "src": "and isinstance(original, CallableType)",
        "target": "mypy.checker.TypeChecker.check_override"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 91,
        "src": "if not defn.type or not isinstance(defn.type, CallableType):",
        "target": "mypy.checker.TypeChecker.check__exit__return_type"
      },
      {
        "code": "unreachable",
        "column": 12,
        "message": "Statement is unreachable",
        "offset": 302,
        "src": "return self.function_type(sym.node)",
        "target": "mypy.checker.TypeChecker.determine_type_of_member"
      },
      {
        "code": "truthy-bool",
        "column": 23,
        "message": "\"signature\" has type \"Type\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 308,
        "src": "if signature:",
        "target": "mypy.checker.TypeChecker.check_assignment"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 109,
        "src": "isinstance(p_rvalue_type, CallableType)",
        "target": "mypy.checker.TypeChecker.check_assignment"
      },
      {
        "code": "truthy-bool",
        "column": 19,
        "message": "\"rvalue_type\" has type \"Type\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 14,
        "src": "if rvalue_type and infer_lvalue_type and not isinstance(lvalue_type, PartialType):",
        "target": "mypy.checker.TypeChecker.check_assignment"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "\"compare_type\" has type \"ProperType\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 175,
        "src": "if compare_type:",
        "target": "mypy.checker.TypeChecker.check_compatibility_super"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 1,
        "src": "if isinstance(base_type, CallableType) and isinstance(compare_type, CallableType):",
        "target": "mypy.checker.TypeChecker.check_compatibility_super"
      },
      {
        "code": "no-any-expr",
        "column": 80,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 0,
        "src": "if isinstance(base_type, CallableType) and isinstance(compare_type, CallableType):",
        "target": "mypy.checker.TypeChecker.check_compatibility_super"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 64,
        "src": "if isinstance(base_type, CallableType) and isinstance(base_node, FuncDef):",
        "target": "mypy.checker.TypeChecker.lvalue_type_from_base"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 173,
        "src": "if getattr(lvalue, \"node\", None):",
        "target": "mypy.checker.TypeChecker.is_assignable_slot"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"zip[tuple[Any, ...]]\")",
        "offset": 215,
        "src": "types, declared_types = zip(*clean_items)",
        "target": "mypy.checker.TypeChecker.check_multi_assignment_from_union"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "types, declared_types = zip(*clean_items)",
        "target": "mypy.checker.TypeChecker.check_multi_assignment_from_union"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 3,
        "src": "make_simplified_union(list(types)),",
        "target": "mypy.checker.TypeChecker.check_multi_assignment_from_union"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 1,
        "src": "make_simplified_union(list(declared_types)),",
        "target": "mypy.checker.TypeChecker.check_multi_assignment_from_union"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 140,
        "src": "if isinstance(type, CallableType) and type.is_type_obj():",
        "target": "mypy.checker.TypeChecker.type_is_iterable"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"(type[Instance], type[CallableType], type[TypeType], type[Overloaded])\")",
        "offset": 15,
        "src": "rvalue_type, (Instance, CallableType, TypeType, Overloaded)",
        "target": "mypy.checker.TypeChecker.check_multi_assignment_from_iterable"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 0,
        "src": "rvalue_type, (Instance, CallableType, TypeType, Overloaded)",
        "target": "mypy.checker.TypeChecker.check_multi_assignment_from_iterable"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "\"var\" has type \"Var\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 176,
        "src": "if var and not self.current_node_deferred:",
        "target": "mypy.checker.TypeChecker.set_inferred_type"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Statement is unreachable",
        "offset": 42,
        "src": "typ = rvalue.callee.node.type",
        "target": "mypy.checker.TypeChecker.simple_rvalue"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 175,
        "src": "if isinstance(inferred_dunder_set_type, CallableType):",
        "target": "mypy.checker.TypeChecker.check_member_assignment"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 12,
        "src": "if (not isinstance(inferred_dunder_set_type, CallableType)) or (",
        "target": "mypy.checker.TypeChecker.check_member_assignment"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 626,
        "src": "if isinstance(sig, CallableType):",
        "target": "mypy.checker.TypeChecker.visit_decorator"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 16,
        "src": "and isinstance(e.func.type, CallableType)",
        "target": "mypy.checker.TypeChecker.visit_decorator"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 5,
        "src": "isinstance(e.func.unanalyzed_type, CallableType)",
        "target": "mypy.checker.TypeChecker.visit_decorator"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 721,
        "src": "assert isinstance(called_type, (CallableType, Overloaded))",
        "target": "mypy.checker.TypeChecker.find_isinstance_check_helper"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression type contains \"Any\" (has type \"(type[CallableType], type[Overloaded])\")",
        "offset": 0,
        "src": "assert isinstance(called_type, (CallableType, Overloaded))",
        "target": "mypy.checker.TypeChecker.find_isinstance_check_helper"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 662,
        "src": "and isinstance(subtype, (CallableType, Instance, TupleType, TypedDictType))",
        "target": "mypy.checker.TypeChecker.check_subtype"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"(type[CallableType], type[Instance], type[TupleType], type[TypedDictType])\")",
        "offset": 0,
        "src": "and isinstance(subtype, (CallableType, Instance, TupleType, TypedDictType))",
        "target": "mypy.checker.TypeChecker.check_subtype"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 3,
        "src": "if isinstance(supertype, CallableType) and isinstance(subtype, Instance):",
        "target": "mypy.checker.TypeChecker.check_subtype"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 4,
        "src": "if isinstance(subtype, (CallableType, Overloaded)) and isinstance(supertype, Instance):",
        "target": "mypy.checker.TypeChecker.check_subtype"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"(type[CallableType], type[Overloaded])\")",
        "offset": 0,
        "src": "if isinstance(subtype, (CallableType, Overloaded)) and isinstance(supertype, Instance):",
        "target": "mypy.checker.TypeChecker.check_subtype"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 591,
        "src": "if isinstance(typ, CallableType):",
        "target": "mypy.checker.TypeChecker.add_any_attribute_to_type"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 515,
        "src": "if isinstance(t, CallableType):",
        "target": "mypy.checker.is_more_general_arg_prefix"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 1,
        "src": "if isinstance(s, CallableType):",
        "target": "mypy.checker.is_more_general_arg_prefix"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> Any\")",
        "offset": 363,
        "src": "simplified_operator_list.sort(key=lambda item: item[1][0])",
        "target": "mypy.checker.group_comparison_operands"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "simplified_operator_list.sort(key=lambda item: item[1][0])",
        "target": "mypy.checker.group_comparison_operands"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 6,
        "src": "if not c or not isinstance(c, CallableType):",
        "target": "mypy.checker.is_typed_callable"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 12,
        "src": "elif isinstance(typ, CallableType):",
        "target": "mypy.checker.is_untyped_decorator"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 39,
        "src": "if isinstance(t, CallableType):",
        "target": "mypy.checker.get_property_type"
      }
    ],
    "mypy/checkexpr.py": [
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 354,
        "src": "if isinstance(result, CallableType) and isinstance(  # type: ignore[misc]",
        "target": "mypy.checkexpr.ExpressionChecker.analyze_ref_expr"
      },
      {
        "code": null,
        "column": 34,
        "message": "Error code changed to no-any-expr; \"type: ignore\" comment may be out of date",
        "offset": 0,
        "src": "if isinstance(result, CallableType) and isinstance(  # type: ignore[misc]",
        "target": null
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 102,
        "src": "if isinstance(typeddict_callable, CallableType):",
        "target": "mypy.checkexpr.ExpressionChecker.visit_call_expr_inner"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 72,
        "src": "and isinstance(callee_type, CallableType)",
        "target": "mypy.checkexpr.ExpressionChecker.visit_call_expr_inner"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 12,
        "src": "if isinstance(it, CallableType):",
        "target": "mypy.checkexpr.ExpressionChecker.visit_call_expr_inner"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 130,
        "src": "if isinstance(object_type, CallableType) and object_type.is_type_obj():",
        "target": "mypy.checkexpr.ExpressionChecker.method_fullname"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 31,
        "src": "elif isinstance(typ, CallableType) and typ.is_type_obj():",
        "target": "mypy.checkexpr.ExpressionChecker.always_returns_none"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 16,
        "src": "return isinstance(defn.type, CallableType) and isinstance(",
        "target": "mypy.checkexpr.ExpressionChecker.defn_returns_none"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 9,
        "src": "and isinstance(typ, CallableType)",
        "target": "mypy.checkexpr.ExpressionChecker.defn_returns_none"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 14,
        "src": "isinstance(tp, CallableType)",
        "target": "mypy.checkexpr.ExpressionChecker.check_runtime_protocol_test"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 10,
        "src": "if isinstance(tp, CallableType) and tp.is_type_obj() and tp.type_object().is_protocol:",
        "target": "mypy.checkexpr.ExpressionChecker.check_protocol_issubclass"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 143,
        "src": "if isinstance(orig_callee, CallableType):",
        "target": "mypy.checkexpr.ExpressionChecker.check_typeddict_call_with_kwargs"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 254,
        "src": "if isinstance(callee, CallableType):",
        "target": "mypy.checkexpr.ExpressionChecker.apply_signature_hook"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 19,
        "src": "assert isinstance(adjusted, CallableType)",
        "target": "mypy.checkexpr.ExpressionChecker.apply_signature_hook"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 131,
        "src": "and isinstance(proper_callee, CallableType)",
        "target": "mypy.checkexpr.ExpressionChecker.check_call_expr_with_callee_type"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 69,
        "src": "if isinstance(callee, CallableType):",
        "target": "mypy.checkexpr.ExpressionChecker.check_call"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 249,
        "src": "assert isinstance(node.type, CallableType)",
        "target": "mypy.checkexpr.ExpressionChecker.can_return_none"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 13,
        "src": "if isinstance(res, CallableType):",
        "target": "mypy.checkexpr.ExpressionChecker.analyze_type_type_callee"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 3,
        "src": "if isinstance(expanded, CallableType):",
        "target": "mypy.checkexpr.ExpressionChecker.analyze_type_type_callee"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 20,
        "src": "if isinstance(callee, CallableType):",
        "target": "mypy.checkexpr.ExpressionChecker.analyze_type_type_callee"
      },
      {
        "code": "possibly-undefined",
        "column": 23,
        "message": "Name \"actual_types\" may be undefined",
        "offset": 537,
        "src": "assert len(actual_types) == len(actuals) == len(actual_kinds)",
        "target": "mypy.checkexpr"
      },
      {
        "code": "possibly-undefined",
        "column": 60,
        "message": "Name \"actual_kinds\" may be undefined",
        "offset": 0,
        "src": "assert len(actual_types) == len(actuals) == len(actual_kinds)",
        "target": "mypy.checkexpr"
      },
      {
        "code": "possibly-undefined",
        "column": 19,
        "message": "Name \"callee_arg_types\" may be undefined",
        "offset": 2,
        "src": "if len(callee_arg_types) != len(actual_types):",
        "target": "mypy.checkexpr"
      },
      {
        "code": "possibly-undefined",
        "column": 48,
        "message": "Name \"callee_arg_kinds\" may be undefined",
        "offset": 6,
        "src": "assert len(callee_arg_types) == len(callee_arg_kinds)",
        "target": "mypy.checkexpr"
      },
      {
        "code": "unreachable",
        "column": 20,
        "message": "Statement is unreachable",
        "offset": 5,
        "src": "continue  # Some kind of error was already reported.",
        "target": "mypy.checkexpr.ExpressionChecker.check_argument_types"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 47,
        "src": "isinstance(caller_type, CallableType)",
        "target": "mypy.checkexpr.ExpressionChecker.check_arg"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression type contains \"Any\" (has type \"zip[tuple[Any, ...]]\")",
        "offset": 72,
        "src": "returns, inferred_types = zip(*unioned_return)",
        "target": "mypy.checkexpr.ExpressionChecker.check_overload_call"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "returns, inferred_types = zip(*unioned_return)",
        "target": "mypy.checkexpr.ExpressionChecker.check_overload_call"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 6,
        "src": "make_simplified_union(list(returns), context.line, context.column),",
        "target": "mypy.checkexpr.ExpressionChecker.check_overload_call"
      },
      {
        "code": "no-any-expr",
        "column": 74,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 1,
        "src": "self.combine_function_signatures(get_proper_types(inferred_types)),",
        "target": "mypy.checkexpr.ExpressionChecker.check_overload_call"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 360,
        "src": "if not all(isinstance(c, CallableType) for c in types):",
        "target": "mypy.checkexpr.ExpressionChecker.combine_function_signatures"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 198,
        "src": "if isinstance(get_proper_type(res[1]), CallableType):",
        "target": "mypy.checkexpr.ExpressionChecker.check_intersection_call"
      },
      {
        "code": "possibly-undefined",
        "column": 16,
        "message": "Name \"left_map\" may be undefined",
        "offset": 851,
        "src": "and left_map is None",
        "target": "mypy.checkexpr"
      },
      {
        "code": "possibly-undefined",
        "column": 16,
        "message": "Name \"right_map\" may be undefined",
        "offset": 8,
        "src": "and right_map is None",
        "target": "mypy.checkexpr"
      },
      {
        "code": "possibly-undefined",
        "column": 22,
        "message": "Name \"restricted_left_type\" may be undefined",
        "offset": 31,
        "src": "if isinstance(restricted_left_type, UninhabitedType):",
        "target": "mypy.checkexpr"
      },
      {
        "code": "possibly-undefined",
        "column": 13,
        "message": "Name \"result_is_left\" may be undefined",
        "offset": 3,
        "src": "elif result_is_left:",
        "target": "mypy.checkexpr"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 111,
        "src": "isinstance(left_type, CallableType)",
        "target": "mypy.checkexpr.ExpressionChecker.visit_index_with_type"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 233,
        "src": "if isinstance(tp, (CallableType, Overloaded)):",
        "target": "mypy.checkexpr.ExpressionChecker.visit_type_application"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"(type[CallableType], type[Overloaded])\")",
        "offset": 0,
        "src": "if isinstance(tp, (CallableType, Overloaded)):",
        "target": "mypy.checkexpr.ExpressionChecker.visit_type_application"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 87,
        "src": "if isinstance(tp, CallableType):",
        "target": "mypy.checkexpr.ExpressionChecker.apply_type_arguments_to_callable"
      },
      {
        "code": "no-any-expr",
        "column": 83,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 353,
        "src": "t for t in get_proper_types(ctx.relevant_items()) if isinstance(t, CallableType)",
        "target": "mypy.checkexpr.ExpressionChecker.infer_lambda_type_using_context"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 5,
        "src": "if not ctx or not isinstance(ctx, CallableType):",
        "target": "mypy.checkexpr.ExpressionChecker.infer_lambda_type_using_context"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 9,
        "src": "assert isinstance(callable_ctx, CallableType)",
        "target": "mypy.checkexpr.ExpressionChecker.infer_lambda_type_using_context"
      },
      {
        "code": "possibly-undefined",
        "column": 82,
        "message": "Name \"t0\" may be undefined",
        "offset": 471,
        "src": "self.per_line_checking_time_ns[node.line] += time.perf_counter_ns() - t0",
        "target": "mypy.checkexpr"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 505,
        "src": "if isinstance(formal, CallableType):",
        "target": "mypy.checkexpr.arg_approximate_similarity"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 1,
        "src": "if isinstance(actual, (CallableType, Overloaded, TypeType)):",
        "target": "mypy.checkexpr.arg_approximate_similarity"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"(type[CallableType], type[Overloaded], type[TypeType])\")",
        "offset": 0,
        "src": "if isinstance(actual, (CallableType, Overloaded, TypeType)):",
        "target": "mypy.checkexpr.arg_approximate_similarity"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 20,
        "src": "if isinstance(actual, CallableType):",
        "target": "mypy.checkexpr.arg_approximate_similarity"
      }
    ],
    "mypy/checkmember.py": [
      {
        "code": "possibly-undefined",
        "column": 26,
        "message": "Name \"impl\" may be undefined",
        "offset": 366,
        "src": "if isinstance(impl.type, CallableType)",
        "target": "mypy.checkmember"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 0,
        "src": "if isinstance(impl.type, CallableType)",
        "target": "mypy.checkmember.validate_super_call"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 216,
        "src": "if isinstance(getattr_type, CallableType):",
        "target": "mypy.checkmember.analyze_member_var_access"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 28,
        "src": "if isinstance(setattr_type, CallableType) and len(setattr_type.arg_types) > 0:",
        "target": "mypy.checkmember.analyze_member_var_access"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 110,
        "src": "if not isinstance(inferred_dunder_get_type, CallableType):",
        "target": "mypy.checkmember.analyze_descriptor_access"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 95,
        "src": "assert isinstance(expanded_signature, CallableType)",
        "target": "mypy.checkmember.analyze_var"
      },
      {
        "code": "truthy-bool",
        "column": 7,
        "message": "\"result\" has type \"Type\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 11,
        "src": "if result and not mx.is_lvalue and not implicit:",
        "target": "mypy.checkmember.analyze_var"
      },
      {
        "code": "unreachable",
        "column": 48,
        "message": "Right operand of \"and\" is never evaluated",
        "offset": 200,
        "src": "isinstance(node.node, FuncBase) and node.node.is_class",
        "target": "mypy.checkmember.analyze_class_attribute_access"
      },
      {
        "code": "unreachable",
        "column": 8,
        "message": "Statement is unreachable",
        "offset": 43,
        "src": "typ = function_type(node.node, mx.named_type(\"builtins.function\"))",
        "target": "mypy.checkmember.analyze_class_attribute_access"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 111,
        "src": "if isinstance(t, CallableType):",
        "target": "mypy.checkmember.add_class_tvars"
      },
      {
        "code": "unreachable",
        "column": 8,
        "message": "Statement is unreachable",
        "offset": 124,
        "src": "return True",
        "target": "mypy.checkmember.is_valid_constructor"
      }
    ],
    "mypy/checkstrformat.py": [
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"dict[str, str | Any]\")",
        "offset": 146,
        "src": "m_dict = match.groupdict()",
        "target": "mypy.checkstrformat.ConversionSpecifier.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"dict[str, str | Any]\")",
        "offset": 1,
        "src": "self.key = m_dict.get(\"key\")",
        "target": "mypy.checkstrformat.ConversionSpecifier.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 0,
        "src": "self.key = m_dict.get(\"key\")",
        "target": "mypy.checkstrformat.ConversionSpecifier.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"dict[str, str | Any]\")",
        "offset": 3,
        "src": "self.conv_type = m_dict.get(\"type\", \"\")",
        "target": "mypy.checkstrformat.ConversionSpecifier.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "self.conv_type = m_dict.get(\"type\", \"\")",
        "target": "mypy.checkstrformat.ConversionSpecifier.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"dict[str, str | Any]\")",
        "offset": 1,
        "src": "self.flags = m_dict.get(\"flags\", \"\")",
        "target": "mypy.checkstrformat.ConversionSpecifier.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "self.flags = m_dict.get(\"flags\", \"\")",
        "target": "mypy.checkstrformat.ConversionSpecifier.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"dict[str, str | Any]\")",
        "offset": 1,
        "src": "self.width = m_dict.get(\"width\", \"\")",
        "target": "mypy.checkstrformat.ConversionSpecifier.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "self.width = m_dict.get(\"width\", \"\")",
        "target": "mypy.checkstrformat.ConversionSpecifier.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"dict[str, str | Any]\")",
        "offset": 1,
        "src": "self.precision = m_dict.get(\"precision\", \"\")",
        "target": "mypy.checkstrformat.ConversionSpecifier.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "self.precision = m_dict.get(\"precision\", \"\")",
        "target": "mypy.checkstrformat.ConversionSpecifier.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"dict[str, str | Any]\")",
        "offset": 3,
        "src": "self.format_spec = m_dict.get(\"format_spec\")",
        "target": "mypy.checkstrformat.ConversionSpecifier.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 0,
        "src": "self.format_spec = m_dict.get(\"format_spec\")",
        "target": "mypy.checkstrformat.ConversionSpecifier.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[str, str | Any]\")",
        "offset": 3,
        "src": "self.conversion = m_dict.get(\"conversion\")",
        "target": "mypy.checkstrformat.ConversionSpecifier.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 0,
        "src": "self.conversion = m_dict.get(\"conversion\")",
        "target": "mypy.checkstrformat.ConversionSpecifier.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"dict[str, str | Any]\")",
        "offset": 3,
        "src": "self.field = m_dict.get(\"field\")",
        "target": "mypy.checkstrformat.ConversionSpecifier.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 0,
        "src": "self.field = m_dict.get(\"field\")",
        "target": "mypy.checkstrformat.ConversionSpecifier.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 3,
        "src": "return self.key is not None",
        "target": "mypy.checkstrformat.ConversionSpecifier.has_key"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 3,
        "src": "return self.width == \"*\" or self.precision == \"*\"",
        "target": "mypy.checkstrformat.ConversionSpecifier.has_star"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "return self.width == \"*\" or self.precision == \"*\"",
        "target": "mypy.checkstrformat.ConversionSpecifier.has_star"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "return self.width == \"*\" or self.precision == \"*\"",
        "target": "mypy.checkstrformat.ConversionSpecifier.has_star"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "return self.width == \"*\" or self.precision == \"*\"",
        "target": "mypy.checkstrformat.ConversionSpecifier.has_star"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "return self.width == \"*\" or self.precision == \"*\"",
        "target": "mypy.checkstrformat.ConversionSpecifier.has_star"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 42,
        "src": "if conv_spec.key and (\"{\" in conv_spec.key or \"}\" in conv_spec.key):",
        "target": "mypy.checkstrformat.parse_format_value"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None | bool\")",
        "offset": 0,
        "src": "if conv_spec.key and (\"{\" in conv_spec.key or \"}\" in conv_spec.key):",
        "target": "mypy.checkstrformat.parse_format_value"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "if conv_spec.key and (\"{\" in conv_spec.key or \"}\" in conv_spec.key):",
        "target": "mypy.checkstrformat.parse_format_value"
      },
      {
        "code": "no-any-expr",
        "column": 61,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "if conv_spec.key and (\"{\" in conv_spec.key or \"}\" in conv_spec.key):",
        "target": "mypy.checkstrformat.parse_format_value"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 7,
        "src": "conv_spec.format_spec",
        "target": "mypy.checkstrformat.parse_format_value"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None | bool\")",
        "offset": 0,
        "src": "conv_spec.format_spec",
        "target": "mypy.checkstrformat.parse_format_value"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 2,
        "src": "and (\"{\" in conv_spec.format_spec or \"}\" in conv_spec.format_spec)",
        "target": "mypy.checkstrformat.parse_format_value"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "and (\"{\" in conv_spec.format_spec or \"}\" in conv_spec.format_spec)",
        "target": "mypy.checkstrformat.parse_format_value"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 9,
        "src": "sub_conv_specs = parse_format_value(conv_spec.format_spec, ctx, msg, nested=True)",
        "target": "mypy.checkstrformat.parse_format_value"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 123,
        "src": "assert all(s.key for s in specs), \"Keys must be auto-generated first!\"",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_specs_in_format_call"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 10,
        "src": "spec.format_spec",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_specs_in_format_call"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None | bool\")",
        "offset": 0,
        "src": "spec.format_spec",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_specs_in_format_call"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 4,
        "src": "not (\"{\" in spec.format_spec or \"}\" in spec.format_spec)",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_specs_in_format_call"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "not (\"{\" in spec.format_spec or \"}\" in spec.format_spec)",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_specs_in_format_call"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"True | str | Any | None\")",
        "offset": 3,
        "src": "not custom_special_method(actual_type, \"__format__\", check_all=True)",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_specs_in_format_call"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 1,
        "src": "or spec.conversion",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_specs_in_format_call"
      },
      {
        "code": "no-any-expr",
        "column": 75,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 4,
        "src": "\"Unrecognized format\" ' specification \"{}\"'.format(spec.format_spec[1:]),",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_specs_in_format_call"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 6,
        "src": "if not spec.conv_type:",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_specs_in_format_call"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 9,
        "src": "spec.conv_type, call, format_str, format_call=True",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_specs_in_format_call"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 2,
        "src": "if spec.conversion is not None:",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_specs_in_format_call"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 2,
        "src": "if spec.conversion[1] not in \"rsa\":",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_specs_in_format_call"
      },
      {
        "code": "no-any-expr",
        "column": 65,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 3,
        "src": "' must be one of \"r\", \"s\" or \"a\"'.format(spec.conversion[1]),",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_specs_in_format_call"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 29,
        "src": "if spec.conv_type == \"c\":",
        "target": "mypy.checkstrformat.StringFormatterChecker.perform_special_format_checks"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "if spec.conv_type == \"c\":",
        "target": "mypy.checkstrformat.StringFormatterChecker.perform_special_format_checks"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 9,
        "src": "if (not spec.conv_type or spec.conv_type == \"s\") and not spec.conversion:",
        "target": "mypy.checkstrformat.StringFormatterChecker.perform_special_format_checks"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "if (not spec.conv_type or spec.conv_type == \"s\") and not spec.conversion:",
        "target": "mypy.checkstrformat.StringFormatterChecker.perform_special_format_checks"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "if (not spec.conv_type or spec.conv_type == \"s\") and not spec.conversion:",
        "target": "mypy.checkstrformat.StringFormatterChecker.perform_special_format_checks"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "if (not spec.conv_type or spec.conv_type == \"s\") and not spec.conversion:",
        "target": "mypy.checkstrformat.StringFormatterChecker.perform_special_format_checks"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "if (not spec.conv_type or spec.conv_type == \"s\") and not spec.conversion:",
        "target": "mypy.checkstrformat.StringFormatterChecker.perform_special_format_checks"
      },
      {
        "code": "no-any-expr",
        "column": 65,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 0,
        "src": "if (not spec.conv_type or spec.conv_type == \"s\") and not spec.conversion:",
        "target": "mypy.checkstrformat.StringFormatterChecker.perform_special_format_checks"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 11,
        "src": "if spec.flags:",
        "target": "mypy.checkstrformat.StringFormatterChecker.perform_special_format_checks"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 5,
        "src": "spec.conv_type",
        "target": "mypy.checkstrformat.StringFormatterChecker.perform_special_format_checks"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"str | Any | bool\")",
        "offset": 0,
        "src": "spec.conv_type",
        "target": "mypy.checkstrformat.StringFormatterChecker.perform_special_format_checks"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "and spec.conv_type not in NUMERIC_TYPES_NEW",
        "target": "mypy.checkstrformat.StringFormatterChecker.perform_special_format_checks"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "or not spec.conv_type",
        "target": "mypy.checkstrformat.StringFormatterChecker.perform_special_format_checks"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 105,
        "src": "some_defined = any(s.key and s.key.isdecimal() for s in all_specs)",
        "target": "mypy.checkstrformat.StringFormatterChecker.auto_generate_keys"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None | bool\")",
        "offset": 0,
        "src": "some_defined = any(s.key and s.key.isdecimal() for s in all_specs)",
        "target": "mypy.checkstrformat.StringFormatterChecker.auto_generate_keys"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "some_defined = any(s.key and s.key.isdecimal() for s in all_specs)",
        "target": "mypy.checkstrformat.StringFormatterChecker.auto_generate_keys"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "some_defined = any(s.key and s.key.isdecimal() for s in all_specs)",
        "target": "mypy.checkstrformat.StringFormatterChecker.auto_generate_keys"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 1,
        "src": "all_defined = all(bool(s.key) for s in all_specs)",
        "target": "mypy.checkstrformat.StringFormatterChecker.auto_generate_keys"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 12,
        "src": "if not spec.key:",
        "target": "mypy.checkstrformat.StringFormatterChecker.auto_generate_keys"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 4,
        "src": "if not spec.field:",
        "target": "mypy.checkstrformat.StringFormatterChecker.auto_generate_keys"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 3,
        "src": "spec.field = str_index + spec.field",
        "target": "mypy.checkstrformat.StringFormatterChecker.auto_generate_keys"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 11,
        "src": "assert spec.key, \"Keys must be auto-generated first!\"",
        "target": "mypy.checkstrformat.StringFormatterChecker.apply_field_accessors"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 1,
        "src": "if spec.field == spec.key:",
        "target": "mypy.checkstrformat.StringFormatterChecker.apply_field_accessors"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "if spec.field == spec.key:",
        "target": "mypy.checkstrformat.StringFormatterChecker.apply_field_accessors"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "if spec.field == spec.key:",
        "target": "mypy.checkstrformat.StringFormatterChecker.apply_field_accessors"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 2,
        "src": "assert spec.field",
        "target": "mypy.checkstrformat.StringFormatterChecker.apply_field_accessors"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 3,
        "src": "dummy = DUMMY_FIELD_NAME + spec.field[len(spec.key) :]",
        "target": "mypy.checkstrformat.StringFormatterChecker.apply_field_accessors"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "dummy = DUMMY_FIELD_NAME + spec.field[len(spec.key) :]",
        "target": "mypy.checkstrformat.StringFormatterChecker.apply_field_accessors"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "dummy = DUMMY_FIELD_NAME + spec.field[len(spec.key) :]",
        "target": "mypy.checkstrformat.StringFormatterChecker.apply_field_accessors"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 2,
        "src": "dummy, fnam=\"<format>\", module=None, options=self.chk.options, errors=temp_errors",
        "target": "mypy.checkstrformat.StringFormatterChecker.apply_field_accessors"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 4,
        "src": "f'Syntax error in format specifier \"{spec.field}\"',",
        "target": "mypy.checkstrformat.StringFormatterChecker.apply_field_accessors"
      },
      {
        "code": "no-any-expr",
        "column": 59,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 43,
        "src": "' format field accessors; got \"{}\"'.format(spec.field),",
        "target": "mypy.checkstrformat.StringFormatterChecker.validate_and_transform_accessors"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 10,
        "src": "assert spec.key, \"Call this method only after auto-generating keys!\"",
        "target": "mypy.checkstrformat.StringFormatterChecker.validate_and_transform_accessors"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 1,
        "src": "assert spec.field",
        "target": "mypy.checkstrformat.StringFormatterChecker.validate_and_transform_accessors"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 3,
        "src": "' accessor \"{}\"'.format(spec.field[len(spec.key) :]),",
        "target": "mypy.checkstrformat.StringFormatterChecker.validate_and_transform_accessors"
      },
      {
        "code": "no-any-expr",
        "column": 59,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "' accessor \"{}\"'.format(spec.field[len(spec.key) :]),",
        "target": "mypy.checkstrformat.StringFormatterChecker.validate_and_transform_accessors"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 58,
        "src": "specifier.has_key() or specifier.conv_type == \"%\" for specifier in specifiers",
        "target": "mypy.checkstrformat.StringFormatterChecker.analyze_conversion_specifiers"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "specifier.has_key() or specifier.conv_type == \"%\" for specifier in specifiers",
        "target": "mypy.checkstrformat.StringFormatterChecker.analyze_conversion_specifiers"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "specifier.has_key() or specifier.conv_type == \"%\" for specifier in specifiers",
        "target": "mypy.checkstrformat.StringFormatterChecker.analyze_conversion_specifiers"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 92,
        "src": "if specifier.conv_type == \"%\":",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_mapping_str_interpolation"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "if specifier.conv_type == \"%\":",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_mapping_str_interpolation"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 3,
        "src": "assert specifier.key is not None",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_mapping_str_interpolation"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "if specifier.key not in mapping:",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_mapping_str_interpolation"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "self.msg.key_not_in_mapping(specifier.key, replacements)",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_mapping_str_interpolation"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 2,
        "src": "rep_type = mapping[specifier.key]",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_mapping_str_interpolation"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "assert specifier.conv_type is not None",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_mapping_str_interpolation"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "expected_type = self.conversion_type(specifier.conv_type, replacements, expr)",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_mapping_str_interpolation"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 9,
        "src": "f\"placeholder with key '{specifier.key}' has type\",",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_mapping_str_interpolation"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 3,
        "src": "if specifier.conv_type == \"s\":",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_mapping_str_interpolation"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "if specifier.conv_type == \"s\":",
        "target": "mypy.checkstrformat.StringFormatterChecker.check_mapping_str_interpolation"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 47,
        "src": "if specifier.width == \"*\":",
        "target": "mypy.checkstrformat.StringFormatterChecker.replacement_checkers"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "if specifier.width == \"*\":",
        "target": "mypy.checkstrformat.StringFormatterChecker.replacement_checkers"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 2,
        "src": "if specifier.precision == \"*\":",
        "target": "mypy.checkstrformat.StringFormatterChecker.replacement_checkers"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "if specifier.precision == \"*\":",
        "target": "mypy.checkstrformat.StringFormatterChecker.replacement_checkers"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 3,
        "src": "if specifier.conv_type == \"c\":",
        "target": "mypy.checkstrformat.StringFormatterChecker.replacement_checkers"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "if specifier.conv_type == \"c\":",
        "target": "mypy.checkstrformat.StringFormatterChecker.replacement_checkers"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "c = self.checkers_for_c_type(specifier.conv_type, context, expr)",
        "target": "mypy.checkstrformat.StringFormatterChecker.replacement_checkers"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 4,
        "src": "elif specifier.conv_type is not None and specifier.conv_type != \"%\":",
        "target": "mypy.checkstrformat.StringFormatterChecker.replacement_checkers"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "elif specifier.conv_type is not None and specifier.conv_type != \"%\":",
        "target": "mypy.checkstrformat.StringFormatterChecker.replacement_checkers"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "elif specifier.conv_type is not None and specifier.conv_type != \"%\":",
        "target": "mypy.checkstrformat.StringFormatterChecker.replacement_checkers"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "elif specifier.conv_type is not None and specifier.conv_type != \"%\":",
        "target": "mypy.checkstrformat.StringFormatterChecker.replacement_checkers"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "c = self.checkers_for_regular_type(specifier.conv_type, context, expr)",
        "target": "mypy.checkstrformat.StringFormatterChecker.replacement_checkers"
      }
    ],
    "mypy/config_parser.py": [
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 39,
        "src": "_INI_PARSER_CALLABLE: _TypeAlias = Callable[[Any], _CONFIG_VALUE_TYPES]",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 7,
        "src": "major, minor = int(m.group(1)), int(m.group(2))",
        "target": "mypy.config_parser.parse_version"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "major, minor = int(m.group(1)), int(m.group(2))",
        "target": "mypy.config_parser.parse_version"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 23,
        "src": "return [p.strip() for p in re.split(split_regex, v)]",
        "target": "mypy.config_parser.try_split"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 0,
        "src": "return [p.strip() for p in re.split(split_regex, v)]",
        "target": "mypy.config_parser.try_split"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 88,
        "src": "\"mypy_path\": lambda s: [expand_path(p.strip()) for p in re.split(\"[,:]\", s)],",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "\"mypy_path\": lambda s: [expand_path(p.strip()) for p in re.split(\"[,:]\", s)],",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 0,
        "src": "\"mypy_path\": lambda s: [expand_path(p.strip()) for p in re.split(\"[,:]\", s)],",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 16,
        "src": "\"exclude\": lambda s: [s.strip()],",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"dict[str, (str | float) -> (int, int) | (Untyped) -> list[str] | (Untyped) -> str | (str | Sequence[str]) -> list[str]]\")",
        "offset": 8,
        "src": "{",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(str, (Untyped) -> list[str])\")",
        "offset": 2,
        "src": "\"mypy_path\": lambda s: [expand_path(p) for p in try_split(s, \"[,:]\")],",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> list[str]\")",
        "offset": 0,
        "src": "\"mypy_path\": lambda s: [expand_path(p) for p in try_split(s, \"[,:]\")],",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(str, (Untyped) -> list[str])\")",
        "offset": 1,
        "src": "\"files\": lambda s: split_and_match_files_list(try_split(s)),",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> list[str]\")",
        "offset": 0,
        "src": "\"files\": lambda s: split_and_match_files_list(try_split(s)),",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(str, (Untyped) -> str)\")",
        "offset": 1,
        "src": "\"follow_imports\": lambda s: check_follow_imports(str(s)),",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> str\")",
        "offset": 0,
        "src": "\"follow_imports\": lambda s: check_follow_imports(str(s)),",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(str, (Untyped) -> list[str])\")",
        "offset": 5,
        "src": "\"disable_error_code\": lambda s: validate_codes(try_split(s)),",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> list[str]\")",
        "offset": 0,
        "src": "\"disable_error_code\": lambda s: validate_codes(try_split(s)),",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(str, (Untyped) -> list[str])\")",
        "offset": 1,
        "src": "\"enable_error_code\": lambda s: validate_codes(try_split(s)),",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> list[str]\")",
        "offset": 0,
        "src": "\"enable_error_code\": lambda s: validate_codes(try_split(s)),",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 39,
        "src": "toml_data = tomllib.load(f)",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "toml_data = toml_data.get(\"tool\", {})",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression type contains \"Any\" (has type \"dict[str | Any (from a limitation), Any]\")",
        "offset": 0,
        "src": "toml_data = toml_data.get(\"tool\", {})",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"Any | dict[str, Any]\")",
        "offset": 1,
        "src": "if \"mypy\" not in toml_data:",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 2,
        "src": "toml_data = {\"mypy\": toml_data[\"mypy\"]}",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"Any | dict[str, Any]\")",
        "offset": 0,
        "src": "toml_data = {\"mypy\": toml_data[\"mypy\"]}",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "toml_data = {\"mypy\": toml_data[\"mypy\"]}",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-explicit",
        "column": 16,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "parser: MutableMapping[str, Any] = destructure_overrides(toml_data)",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 73,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "parser: MutableMapping[str, Any] = destructure_overrides(toml_data)",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 77,
        "message": "Expression type contains \"Any\" (has type \"MutableMapping[str, Any]\")",
        "offset": 9,
        "src": "if config_file in defaults.SHARED_CONFIG_FILES and \"mypy\" not in parser:",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"MutableMapping[str, Any]\")",
        "offset": 10,
        "src": "if \"mypy\" not in parser:",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "possibly-undefined",
        "column": 21,
        "message": "Name \"parser\" may be undefined",
        "offset": 0,
        "src": "if \"mypy\" not in parser:",
        "target": "mypy.config_parser"
      },
      {
        "code": "possibly-undefined",
        "column": 23,
        "message": "Name \"file_read\" may be undefined",
        "offset": 1,
        "src": "if filename or file_read not in defaults.SHARED_CONFIG_FILES:",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"MutableMapping[str, Any]\")",
        "offset": 3,
        "src": "section = parser[\"mypy\"]",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "section = parser[\"mypy\"]",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "possibly-undefined",
        "column": 17,
        "message": "Name \"file_read\" may be undefined",
        "offset": 1,
        "src": "prefix = f\"{file_read}: [mypy]: \"",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "prefix, options, set_strict_flags, section, config_types, stderr",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "possibly-undefined",
        "column": 56,
        "message": "Name \"config_types\" may be undefined",
        "offset": 0,
        "src": "prefix, options, set_strict_flags, section, config_types, stderr",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 6,
        "src": "for name, section in parser.items():",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for name, section in parser.items():",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"MutableMapping[str, Any]\")",
        "offset": 0,
        "src": "for name, section in parser.items():",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"ItemsView[str, Any]\")",
        "offset": 0,
        "src": "for name, section in parser.items():",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "prefix, options, set_strict_flags, section, config_types, stderr",
        "target": "mypy.config_parser.parse_config_file"
      },
      {
        "code": "possibly-undefined",
        "column": 60,
        "message": "Name \"config_types\" may be undefined",
        "offset": 0,
        "src": "prefix, options, set_strict_flags, section, config_types, stderr",
        "target": "mypy.config_parser"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 48,
        "src": "def destructure_overrides(toml_data: dict[str, Any]) -> dict[str, Any]:",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 32,
        "src": "if \"overrides\" not in toml_data[\"mypy\"]:",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if \"overrides\" not in toml_data[\"mypy\"]:",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return toml_data",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "if not isinstance(toml_data[\"mypy\"][\"overrides\"], list):",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if not isinstance(toml_data[\"mypy\"][\"overrides\"], list):",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 6,
        "src": "result = toml_data.copy()",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "for override in result[\"mypy\"][\"overrides\"]:",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "for override in result[\"mypy\"][\"overrides\"]:",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for override in result[\"mypy\"][\"overrides\"]:",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if \"module\" not in override:",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "if isinstance(override[\"module\"], str):",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "modules = [override[\"module\"]]",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "elif isinstance(override[\"module\"], list):",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "modules = override[\"module\"]",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "module_overrides = override.copy()",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "del module_overrides[\"module\"]",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "del module_overrides[\"module\"]",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "if old_config_name not in result:",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "result[old_config_name] = module_overrides",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "result[old_config_name] = module_overrides",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "for new_key, new_value in module_overrides.items():",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for new_key, new_value in module_overrides.items():",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "new_key in result[old_config_name]",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"False | Any\")",
        "offset": 0,
        "src": "new_key in result[old_config_name]",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "new_key in result[old_config_name]",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "new_key in result[old_config_name]",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "and result[old_config_name][new_key] != new_value",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "and result[old_config_name][new_key] != new_value",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "and result[old_config_name][new_key] != new_value",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 64,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "and result[old_config_name][new_key] != new_value",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 6,
        "src": "% (module, new_key)",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "% (module, new_key)",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "result[old_config_name][new_key] = new_value",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "result[old_config_name][new_key] = new_value",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "result[old_config_name][new_key] = new_value",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "result[old_config_name][new_key] = new_value",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "del result[\"mypy\"][\"overrides\"]",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "del result[\"mypy\"][\"overrides\"]",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "del result[\"mypy\"][\"overrides\"]",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return result",
        "target": "mypy.config_parser.destructure_overrides"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def parse_section(",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Mapping[str, Any]\")",
        "offset": 14,
        "src": "for key in section:",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 3,
        "src": "if key in config_types:",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "ct = config_types[key]",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ct = config_types[key]",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 7,
        "src": "dv = getattr(template, key, None)",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "if dv is None:",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression type contains \"Any\" (has type \"Mapping[str, Any]\")",
        "offset": 4,
        "src": "report_dirs[report_type] = str(section[key])",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "report_dirs[report_type] = str(section[key])",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 21,
        "src": "print(f\"{prefix}Unrecognized option: {key} = {section[key]}\", file=stderr)",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 66,
        "message": "Expression type contains \"Any\" (has type \"Mapping[str, Any]\")",
        "offset": 0,
        "src": "print(f\"{prefix}Unrecognized option: {key} = {section[key]}\", file=stderr)",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"type[Any] | type[None]\")",
        "offset": 5,
        "src": "ct = type(dv)",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "ct = type(dv)",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "v: Any = None",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if ct is bool:",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"Mapping[str, Any]\")",
        "offset": 1,
        "src": "if isinstance(section, dict):",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"Mapping[str, Any]\")",
        "offset": 3,
        "src": "v = section.getboolean(key)  # type: ignore[attr-defined]  # Until better stub",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": null,
        "column": 24,
        "message": "Error code \"no-any-expr\" not covered by \"type: ignore\" comment",
        "offset": 0,
        "src": "v = section.getboolean(key)  # type: ignore[attr-defined]  # Until better stub",
        "target": null
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "v = not v",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "elif callable(ct):",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "v = ct(section.get(key))",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"Mapping[str, Any]\")",
        "offset": 0,
        "src": "v = ct(section.get(key))",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "v = ct(section.get(key))",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 11,
        "src": "if v:",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "results[options_key] = v",
        "target": "mypy.config_parser.parse_section"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 11,
        "src": "def convert_to_boolean(value: Any | None) -> bool:",
        "target": "mypy.config_parser.convert_to_boolean"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 2,
        "src": "if isinstance(value, bool):",
        "target": "mypy.config_parser.convert_to_boolean"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 2,
        "src": "if not isinstance(value, str):",
        "target": "mypy.config_parser.convert_to_boolean"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "value = str(value)",
        "target": "mypy.config_parser.convert_to_boolean"
      }
    ],
    "mypy/constant_fold.py": [
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 99,
        "src": "ret = left**right",
        "target": "mypy.constant_fold.constant_fold_binary_int_op"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert isinstance(ret, int)",
        "target": "mypy.constant_fold.constant_fold_binary_int_op"
      }
    ],
    "mypy/constraints.py": [
      {
        "code": "unreachable",
        "column": 20,
        "message": "Statement is unreachable",
        "offset": 399,
        "src": "merged_option = None",
        "target": "mypy.constraints.any_constraints"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 186,
        "src": "if isinstance(actual, (CallableType, Overloaded)) and template.type.is_protocol:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_instance"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"(type[CallableType], type[Overloaded])\")",
        "offset": 0,
        "src": "if isinstance(actual, (CallableType, Overloaded)) and template.type.is_protocol:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_instance"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 13,
        "src": "if isinstance(actual, CallableType) and actual.fallback is not None:",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_instance"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 98,
        "src": "if isinstance(suffix, CallableType):",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_instance"
      },
      {
        "code": "no-any-expr",
        "column": 80,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 5,
        "src": "if isinstance(suffix, Parameters) or isinstance(suffix, CallableType):",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_instance"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 65,
        "src": "if isinstance(suffix, CallableType):",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_instance"
      },
      {
        "code": "no-any-expr",
        "column": 80,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 5,
        "src": "if isinstance(suffix, Parameters) or isinstance(suffix, CallableType):",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_instance"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 119,
        "src": "if isinstance(self.actual, CallableType):",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_callable_type"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 217,
        "src": "if isinstance(self.actual, CallableType):",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_overloaded"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 10,
        "src": "if isinstance(self.actual, CallableType):",
        "target": "mypy.constraints.ConstraintBuilderVisitor.visit_type_type"
      }
    ],
    "mypy/copytype.py": [
      {
        "code": "no-any-explicit",
        "column": 44,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 131,
        "src": "return self.copy_common(t, TypeType(cast(Any, t.item)))",
        "target": "mypy.copytype.TypeShallowCopier.visit_type_type"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return self.copy_common(t, TypeType(cast(Any, t.item)))",
        "target": "mypy.copytype.TypeShallowCopier.visit_type_type"
      }
    ],
    "mypy/dmypy/client.py": [
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 275,
        "src": "if not args.action:",
        "target": "mypy.dmypy.client.main"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 6,
        "src": "fail(err.args[0])",
        "target": "mypy.dmypy.client.main"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "fail(err.args[0])",
        "target": "mypy.dmypy.client.main"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 42,
        "src": "get_status(args.status_file)",
        "target": "mypy.dmypy.client.do_start"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 34,
        "src": "start_options = process_start_options(args.flags, allow_sources)",
        "target": "mypy.dmypy.client.start_server"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if daemonize(start_options, args.status_file, timeout=args.timeout, log_file=args.log_file):",
        "target": "mypy.dmypy.client.start_server"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if daemonize(start_options, args.status_file, timeout=args.timeout, log_file=args.log_file):",
        "target": "mypy.dmypy.client.start_server"
      },
      {
        "code": "no-any-expr",
        "column": 81,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if daemonize(start_options, args.status_file, timeout=args.timeout, log_file=args.log_file):",
        "target": "mypy.dmypy.client.start_server"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "wait_for_server(args.status_file)",
        "target": "mypy.dmypy.client.start_server"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 37,
        "src": "if not is_running(args.status_file):",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 4,
        "src": "response = request(",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "args.status_file,",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "args=args.flags,",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "export_types=args.export_types,",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 3,
        "src": "if \"restart\" in response:",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "print(f\"Restarting: {response['restart']}\")",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "print(f\"Restarting: {response['restart']}\")",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "args.status_file,",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "args=args.flags,",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "export_types=args.export_types,",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 4,
        "src": "response[\"roundtrip_time\"] = t1 - t0",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_run"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "status = read_status(args.status_file)",
        "target": "mypy.dmypy.client.do_status"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if args.verbose:",
        "target": "mypy.dmypy.client.do_status"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 5,
        "src": "response = request(",
        "target": "mypy.dmypy.client.do_status"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "args.status_file, \"status\", fswatcher_dump_file=args.fswatcher_dump_file, timeout=5",
        "target": "mypy.dmypy.client.do_status"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "args.status_file, \"status\", fswatcher_dump_file=args.fswatcher_dump_file, timeout=5",
        "target": "mypy.dmypy.client.do_status"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if args.verbose or \"error\" in response:",
        "target": "mypy.dmypy.client.do_status"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "if args.verbose or \"error\" in response:",
        "target": "mypy.dmypy.client.do_status"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "if args.verbose or \"error\" in response:",
        "target": "mypy.dmypy.client.do_status"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "show_stats(response)",
        "target": "mypy.dmypy.client.do_status"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "if \"error\" in response:",
        "target": "mypy.dmypy.client.do_status"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 9,
        "src": "response = request(args.status_file, \"stop\", timeout=5)",
        "target": "mypy.dmypy.client.do_stop"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "response = request(args.status_file, \"stop\", timeout=5)",
        "target": "mypy.dmypy.client.do_stop"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "if \"error\" in response:",
        "target": "mypy.dmypy.client.do_stop"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "show_stats(response)",
        "target": "mypy.dmypy.client.do_stop"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "pid, _ = get_status(args.status_file)",
        "target": "mypy.dmypy.client.do_kill"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 13,
        "src": "response = request(args.status_file, \"check\", files=args.files, export_types=args.export_types)",
        "target": "mypy.dmypy.client.do_check"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "response = request(args.status_file, \"check\", files=args.files, export_types=args.export_types)",
        "target": "mypy.dmypy.client.do_check"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "response = request(args.status_file, \"check\", files=args.files, export_types=args.export_types)",
        "target": "mypy.dmypy.client.do_check"
      },
      {
        "code": "no-any-expr",
        "column": 81,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "response = request(args.status_file, \"check\", files=args.files, export_types=args.export_types)",
        "target": "mypy.dmypy.client.do_check"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "response[\"roundtrip_time\"] = t1 - t0",
        "target": "mypy.dmypy.client.do_check"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_check"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_check"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_check"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_check"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 19,
        "src": "if args.remove is not None or args.update is not None:",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if args.remove is not None or args.update is not None:",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "response = request(",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "args.status_file,",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "export_types=args.export_types,",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "remove=args.remove,",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "update=args.update,",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "response = request(args.status_file, \"recheck\", export_types=args.export_types)",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 69,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "response = request(args.status_file, \"recheck\", export_types=args.export_types)",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "response[\"roundtrip_time\"] = t1 - t0",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "check_output(response, args.verbose, args.junit_xml, args.perf_stats_file)",
        "target": "mypy.dmypy.client.do_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 10,
        "src": "response = request(",
        "target": "mypy.dmypy.client.do_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "args.status_file,",
        "target": "mypy.dmypy.client.do_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "function=args.function,",
        "target": "mypy.dmypy.client.do_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "json=args.json,",
        "target": "mypy.dmypy.client.do_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "callsites=args.callsites,",
        "target": "mypy.dmypy.client.do_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "no_errors=args.no_errors,",
        "target": "mypy.dmypy.client.do_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "no_any=args.no_any,",
        "target": "mypy.dmypy.client.do_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "flex_any=args.flex_any,",
        "target": "mypy.dmypy.client.do_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "use_fixme=args.use_fixme,",
        "target": "mypy.dmypy.client.do_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "max_guesses=args.max_guesses,",
        "target": "mypy.dmypy.client.do_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "check_output(response, verbose=False, junit_xml=None, perf_stats_file=None)",
        "target": "mypy.dmypy.client.do_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 6,
        "src": "response = request(",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "args.status_file,",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "show=args.show,",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "location=args.location,",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "verbosity=args.verbose,",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "limit=args.limit,",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "include_span=args.include_span,",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "include_kind=args.include_kind,",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "include_object_attrs=args.include_object_attrs,",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "union_attrs=args.union_attrs,",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "force_reload=args.force_reload,",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "check_output(response, verbose=False, junit_xml=None, perf_stats_file=None)",
        "target": "mypy.dmypy.client.do_inspect"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def check_output(",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 7,
        "src": "if \"error\" in response:",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "fail(response[\"error\"])",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "fail(response[\"error\"])",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "out, err, status_code = response[\"out\"], response[\"err\"], response[\"status\"]",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "out, err, status_code = response[\"out\"], response[\"err\"], response[\"status\"]",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "out, err, status_code = response[\"out\"], response[\"err\"], response[\"status\"]",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "out, err, status_code = response[\"out\"], response[\"err\"], response[\"status\"]",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 66,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "out, err, status_code = response[\"out\"], response[\"err\"], response[\"status\"]",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 66,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "out, err, status_code = response[\"out\"], response[\"err\"], response[\"status\"]",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "fail(f\"Response: {str(response)}\")",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "sys.stdout.write(out)",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "sys.stderr.write(err)",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "show_stats(response)",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "messages = (out + err).splitlines()",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "messages = (out + err).splitlines()",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "response[\"roundtrip_time\"],",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "response[\"roundtrip_time\"],",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "bool(err),",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "messages,",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "response[\"python_version\"],",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "response[\"python_version\"],",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "response[\"platform\"],",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "response[\"platform\"],",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 3,
        "src": "telemetry = response.get(\"stats\", {})",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "telemetry = response.get(\"stats\", {})",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"dict[Any, Any]\")",
        "offset": 0,
        "src": "telemetry = response.get(\"stats\", {})",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "json.dump(telemetry, f)",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if status_code:",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "sys.exit(status_code)",
        "target": "mypy.dmypy.client.check_output"
      },
      {
        "code": "no-any-expr",
        "column": 10,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 17,
        "src": "print(request(args.status_file, \"hang\", timeout=1))",
        "target": "mypy.dmypy.client.do_hang"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "print(request(args.status_file, \"hang\", timeout=1))",
        "target": "mypy.dmypy.client.do_hang"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 10,
        "src": "if args.legacy:",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if args.options_data:",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "options_dict, timeout, log_file = pickle.loads(base64.b64decode(args.options_data))",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-expr",
        "column": 72,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "options_dict, timeout, log_file = pickle.loads(base64.b64decode(args.options_data))",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "options = options_obj.apply_changes(options_dict)",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if log_file:",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "assignment",
        "column": 12,
        "message": "Incompatible types in assignment (expression has type \"IO[Any]\", variable has type \"TextIO\")",
        "offset": 1,
        "src": "sys.stdout = sys.stderr = open(log_file, \"a\", buffering=1)",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "assignment",
        "column": 38,
        "message": "Incompatible types in assignment (expression has type \"IO[Any]\", variable has type \"TextIO\")",
        "offset": 0,
        "src": "sys.stdout = sys.stderr = open(log_file, \"a\", buffering=1)",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "sys.stdout = sys.stderr = open(log_file, \"a\", buffering=1)",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "options = process_start_options(args.flags, allow_sources=False)",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "timeout = args.timeout",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if args.legacy:",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "Server(options, args.status_file, timeout=timeout).serve()",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "Server(options, args.status_file, timeout=timeout).serve()",
        "target": "mypy.dmypy.client.do_daemon"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 12,
        "src": "def request(",
        "target": "mypy.dmypy.client.request"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 28,
        "src": "return {\"error\": str(err)}",
        "target": "mypy.dmypy.client.request"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 26,
        "src": "def check_status(data: dict[str, Any]) -> tuple[int, str]:",
        "target": "mypy.dmypy.client.check_status"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 7,
        "src": "if \"pid\" not in data:",
        "target": "mypy.dmypy.client.check_status"
      },
      {
        "code": "no-any-expr",
        "column": 10,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "pid = data[\"pid\"]",
        "target": "mypy.dmypy.client.check_status"
      },
      {
        "code": "no-any-expr",
        "column": 10,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "pid = data[\"pid\"]",
        "target": "mypy.dmypy.client.check_status"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if not isinstance(pid, int):",
        "target": "mypy.dmypy.client.check_status"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 4,
        "src": "if \"connection_name\" not in data:",
        "target": "mypy.dmypy.client.check_status"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "connection_name = data[\"connection_name\"]",
        "target": "mypy.dmypy.client.check_status"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "connection_name = data[\"connection_name\"]",
        "target": "mypy.dmypy.client.check_status"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if not isinstance(connection_name, str):",
        "target": "mypy.dmypy.client.check_status"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 15,
        "src": "data = json.load(f)",
        "target": "mypy.dmypy.client.read_status"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if not isinstance(data, dict):",
        "target": "mypy.dmypy.client.read_status"
      }
    ],
    "mypy/dmypy_server.py": [
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[Any, Any]\")",
        "offset": 214,
        "src": "json.dump({\"pid\": os.getpid(), \"connection_name\": server.connection_name}, f)",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "data = receive(server)",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-explicit",
        "column": 20,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 5,
        "src": "resp: dict[str, Any] = {}",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if \"command\" not in data:",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "command = data[\"command\"]",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if not isinstance(command, str):",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "command = data.pop(\"command\")",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "resp = self.run_command(command, data)",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 65,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "resp = self.run_command(command, data)",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 5,
        "src": "resp.update(self._response_metadata())",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "resp[\"stdout\"] = debug_stdout.getvalue()",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "resp[\"stderr\"] = debug_stderr.getvalue()",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "server.write(json.dumps(resp).encode(\"utf8\"))",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | dict[str, object]\")",
        "offset": 2,
        "src": "resp[\"stdout\"] = debug_stdout.getvalue()",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | dict[str, object]\")",
        "offset": 1,
        "src": "resp[\"stderr\"] = debug_stderr.getvalue()",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | dict[str, object]\")",
        "offset": 2,
        "src": "resp.update(self._response_metadata())",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | dict[str, object]\")",
        "offset": 1,
        "src": "server.write(json.dumps(resp).encode(\"utf8\"))",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 3,
        "src": "if command == \"stop\":",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "if command == \"stop\":",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 9,
        "src": "if command != \"stop\":",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "if command != \"stop\":",
        "target": "mypy.dmypy_server.Server.serve"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 13,
        "src": "method = getattr(self.__class__, key, None)",
        "target": "mypy.dmypy_server.Server.run_command"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "if method is None:",
        "target": "mypy.dmypy_server.Server.run_command"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "ret = method(self, **data)",
        "target": "mypy.dmypy_server.Server.run_command"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert isinstance(ret, dict)",
        "target": "mypy.dmypy_server.Server.run_command"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 8,
        "src": "res.update(get_meminfo())",
        "target": "mypy.dmypy_server.Server.cmd_status"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 59,
        "src": "return self.check(sources, export_types, is_tty, terminal_width)",
        "target": "mypy.dmypy_server.Server.cmd_run"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 10,
        "src": "return self.check(sources, export_types, is_tty, terminal_width)",
        "target": "mypy.dmypy_server.Server.cmd_check"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 39,
        "src": "res = self.increment_output(messages, sources, is_tty, terminal_width)",
        "target": "mypy.dmypy_server.Server.cmd_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "self.update_stats(res)",
        "target": "mypy.dmypy_server.Server.cmd_recheck"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return res",
        "target": "mypy.dmypy_server.Server.cmd_recheck"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 2,
        "src": "def check(",
        "target": "mypy.dmypy_server.Server.check"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 10,
        "src": "res = self.initialize_fine_grained(sources, is_tty, terminal_width)",
        "target": "mypy.dmypy_server.Server.check"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 8,
        "src": "self.update_stats(res)",
        "target": "mypy.dmypy_server.Server.check"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return res",
        "target": "mypy.dmypy_server.Server.check"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 7,
        "src": "def update_stats(self, res: dict[str, Any]) -> None:",
        "target": "mypy.dmypy_server.Server.update_stats"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 4,
        "src": "res[\"stats\"] = manager.stats",
        "target": "mypy.dmypy_server.Server.update_stats"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "res[\"stats\"] = manager.stats",
        "target": "mypy.dmypy_server.Server.update_stats"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 8,
        "src": "def initialize_fine_grained(",
        "target": "mypy.dmypy_server.Server.initialize_fine_grained"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 15,
        "src": "return {\"out\": out, \"err\": err, \"status\": 2}",
        "target": "mypy.dmypy_server.Server.initialize_fine_grained"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 18,
        "src": "meta = state.meta",
        "target": "mypy.dmypy_server.Server.initialize_fine_grained"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 1,
        "src": "if meta is None:",
        "target": "mypy.dmypy_server.Server.initialize_fine_grained"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 5,
        "src": "FileData(st_mtime=float(meta.mtime), st_size=meta.size, hash=meta.hash),",
        "target": "mypy.dmypy_server.Server.initialize_fine_grained"
      },
      {
        "code": "no-any-expr",
        "column": 65,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 0,
        "src": "FileData(st_mtime=float(meta.mtime), st_size=meta.size, hash=meta.hash),",
        "target": "mypy.dmypy_server.Server.initialize_fine_grained"
      },
      {
        "code": "no-any-expr",
        "column": 81,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta\")",
        "offset": 0,
        "src": "FileData(st_mtime=float(meta.mtime), st_size=meta.size, hash=meta.hash),",
        "target": "mypy.dmypy_server.Server.initialize_fine_grained"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 45,
        "src": "return {\"out\": \"\".join(s + \"\\n\" for s in messages), \"err\": \"\", \"status\": status}",
        "target": "mypy.dmypy_server.Server.initialize_fine_grained"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 263,
        "src": "def increment_output(",
        "target": "mypy.dmypy_server.Server.increment_output"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 5,
        "src": "return {\"out\": \"\".join(s + \"\\n\" for s in messages), \"err\": \"\", \"status\": status}",
        "target": "mypy.dmypy_server.Server.increment_output"
      },
      {
        "code": "unreachable",
        "column": 8,
        "message": "Statement is unreachable",
        "offset": 94,
        "src": "if not self.fine_grained_manager:",
        "target": "mypy.dmypy_server.Server.cmd_inspect"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 33,
        "src": "def cmd_suggest(self, function: str, callsites: bool, **kwargs: Any) -> dict[str, object]:",
        "target": "mypy.dmypy_server.Server.cmd_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 63,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 7,
        "src": "engine = SuggestionEngine(self.fine_grained_manager, **kwargs)",
        "target": "mypy.dmypy_server.Server.cmd_suggest"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 29,
        "src": "def get_meminfo() -> dict[str, Any]:",
        "target": "mypy.dmypy_server.get_meminfo"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "res: dict[str, Any] = {}",
        "target": "mypy.dmypy_server.get_meminfo"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 4,
        "src": "res[\"memory_psutil_missing\"] = (",
        "target": "mypy.dmypy_server.get_meminfo"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"pmem\")",
        "offset": 6,
        "src": "meminfo = process.memory_info()",
        "target": "mypy.dmypy_server.get_meminfo"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "res[\"memory_rss_mib\"] = meminfo.rss / MiB",
        "target": "mypy.dmypy_server.get_meminfo"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"pmem\")",
        "offset": 0,
        "src": "res[\"memory_rss_mib\"] = meminfo.rss / MiB",
        "target": "mypy.dmypy_server.get_meminfo"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "res[\"memory_rss_mib\"] = meminfo.rss / MiB",
        "target": "mypy.dmypy_server.get_meminfo"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "res[\"memory_vms_mib\"] = meminfo.vms / MiB",
        "target": "mypy.dmypy_server.get_meminfo"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"pmem\")",
        "offset": 0,
        "src": "res[\"memory_vms_mib\"] = meminfo.vms / MiB",
        "target": "mypy.dmypy_server.get_meminfo"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "res[\"memory_vms_mib\"] = meminfo.vms / MiB",
        "target": "mypy.dmypy_server.get_meminfo"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 12,
        "src": "res[\"memory_maxrss_mib\"] = rusage.ru_maxrss * factor / MiB",
        "target": "mypy.dmypy_server.get_meminfo"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return res",
        "target": "mypy.dmypy_server.get_meminfo"
      }
    ],
    "mypy/dmypy_util.py": [
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 17,
        "src": "def receive(connection: IPCBase) -> Any:",
        "target": "mypy.dmypy_util.receive"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 10,
        "src": "data = json.loads(bdata.decode(\"utf8\"))",
        "target": "mypy.dmypy_util.receive"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if not isinstance(data, dict):",
        "target": "mypy.dmypy_util.receive"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 1,
        "src": "raise OSError(f\"Data received is not a dict ({type(data)})\")",
        "target": "mypy.dmypy_util.receive"
      },
      {
        "code": "no-any-expr",
        "column": 59,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "raise OSError(f\"Data received is not a dict ({type(data)})\")",
        "target": "mypy.dmypy_util.receive"
      }
    ],
    "mypy/errors.py": [
      {
        "code": "unreachable",
        "column": 16,
        "message": "Statement is unreachable",
        "offset": 1131,
        "src": "result.append(",
        "target": "mypy.errors.Errors.render_messages"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> (Any, Any)\")",
        "offset": 59,
        "src": "a = sorted(errors[i0:i], key=lambda x: (x.line, x.column))",
        "target": "mypy.errors.Errors.sort_messages"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "a = sorted(errors[i0:i], key=lambda x: (x.line, x.column))",
        "target": "mypy.errors.Errors.sort_messages"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression type contains \"Any\" (has type \"(Any, Any)\")",
        "offset": 0,
        "src": "a = sorted(errors[i0:i], key=lambda x: (x.line, x.column))",
        "target": "mypy.errors.Errors.sort_messages"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "a = sorted(errors[i0:i], key=lambda x: (x.line, x.column))",
        "target": "mypy.errors.Errors.sort_messages"
      }
    ],
    "mypy/evalexpr.py": [
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 29,
        "src": "return ast.literal_eval(f\"b'{o.value}'\")",
        "target": "mypy.evalexpr._NodeEvaluator.visit_bytes_expr"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "return ast.literal_eval(f'b\"{o.value}\"')",
        "target": "mypy.evalexpr._NodeEvaluator.visit_bytes_expr"
      }
    ],
    "mypy/expandtype.py": [
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 133,
        "src": "if isinstance(callee, CallableType):",
        "target": "mypy.expandtype.freshen_function_type_vars"
      },
      {
        "code": "no-any-expr",
        "column": 69,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 54,
        "src": "assert isinstance(result, ProperType) and isinstance(result, CallableType)",
        "target": "mypy.expandtype.FreshenCallableVisitor.visit_callable_type"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"(type[ParamSpecType], type[Parameters], type[CallableType])\")",
        "offset": 72,
        "src": "elif isinstance(repl, (ParamSpecType, Parameters, CallableType)):",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_param_spec"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 0,
        "src": "elif isinstance(repl, (ParamSpecType, Parameters, CallableType)):",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_param_spec"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 118,
        "src": "if isinstance(repl, (CallableType, Parameters)):",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_callable_type"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"(type[CallableType], type[Parameters])\")",
        "offset": 0,
        "src": "if isinstance(repl, (CallableType, Parameters)):",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_callable_type"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 52,
        "src": "assert isinstance(new_item, CallableType)",
        "target": "mypy.expandtype.ExpandTypeVisitor.visit_overloaded"
      }
    ],
    "mypy/fastparse.py": [
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 192,
        "src": "NamedExpr = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "Constant = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 14,
        "src": "Match = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "MatchValue = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "MatchSingleton = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "MatchSequence = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "MatchStar = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "MatchMapping = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "MatchClass = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "MatchAs = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "MatchOr = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 5,
        "src": "TryStar = Any",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 67,
        "src": "tree = ASTConverter(options=options, is_stub=is_stub_file, errors=errors).visit(ast)",
        "target": "mypy.fastparse.parse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "tree.path = fnam",
        "target": "mypy.fastparse.parse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "tree.is_stub = is_stub_file",
        "target": "mypy.fastparse.parse"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 25,
        "src": "assert isinstance(tree, MypyFile)",
        "target": "mypy.fastparse.parse"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 19,
        "src": "return [code.strip() for code in m.group(1).split(\",\")]",
        "target": "mypy.fastparse.parse_type_ignore_tag"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "return [code.strip() for code in m.group(1).split(\",\")]",
        "target": "mypy.fastparse.parse_type_ignore_tag"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"list[str] | Any\")",
        "offset": 0,
        "src": "return [code.strip() for code in m.group(1).split(\",\")]",
        "target": "mypy.fastparse.parse_type_ignore_tag"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[Expression]\")",
        "offset": 32,
        "src": "assert isinstance(typ, ast3_Expression)",
        "target": "mypy.fastparse.parse_type_comment"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"type[Name]\")",
        "offset": 32,
        "src": "if isinstance(expr, Name):",
        "target": "mypy.fastparse.is_no_type_check_decorator"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"type[Attribute]\")",
        "offset": 2,
        "src": "elif isinstance(expr, Attribute):",
        "target": "mypy.fastparse.is_no_type_check_decorator"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"type[Name]\")",
        "offset": 1,
        "src": "if isinstance(expr.value, Name):",
        "target": "mypy.fastparse.is_no_type_check_decorator"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 18,
        "src": "self.visitor_cache: dict[type, Callable[[AST | None], Any]] = {}",
        "target": "mypy.fastparse.ASTConverter.__init__"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 25,
        "src": "def visit(self, node: AST | None) -> Any:",
        "target": "mypy.fastparse.ASTConverter.visit"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"dict[type, (AST | None) -> Any]\")",
        "offset": 4,
        "src": "visitor = self.visitor_cache.get(typeobj)",
        "target": "mypy.fastparse.ASTConverter.visit"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"(AST | None) -> Any | None\")",
        "offset": 0,
        "src": "visitor = self.visitor_cache.get(typeobj)",
        "target": "mypy.fastparse.ASTConverter.visit"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"(AST | None) -> Any | None\")",
        "offset": 1,
        "src": "if visitor is None:",
        "target": "mypy.fastparse.ASTConverter.visit"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"dict[type, (AST | None) -> Any]\")",
        "offset": 3,
        "src": "self.visitor_cache[typeobj] = visitor",
        "target": "mypy.fastparse.ASTConverter.visit"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"(AST | None) -> Any | Any\")",
        "offset": 0,
        "src": "self.visitor_cache[typeobj] = visitor",
        "target": "mypy.fastparse.ASTConverter.visit"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return visitor(node)",
        "target": "mypy.fastparse.ASTConverter.visit"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 13,
        "src": "exp = self.visit(e)",
        "target": "mypy.fastparse.ASTConverter.translate_opt_expr_list"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "res.append(exp)",
        "target": "mypy.fastparse.ASTConverter.translate_opt_expr_list"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"type[AsyncFunctionDef]\")",
        "offset": 8,
        "src": "isinstance(node, (ast3.AsyncFunctionDef, ast3.ClassDef, ast3.FunctionDef))",
        "target": "mypy.fastparse.ASTConverter.get_lineno"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"(type[AsyncFunctionDef], type[ClassDef], type[FunctionDef])\")",
        "offset": 0,
        "src": "isinstance(node, (ast3.AsyncFunctionDef, ast3.ClassDef, ast3.FunctionDef))",
        "target": "mypy.fastparse.ASTConverter.get_lineno"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression type contains \"Any\" (has type \"type[ClassDef]\")",
        "offset": 0,
        "src": "isinstance(node, (ast3.AsyncFunctionDef, ast3.ClassDef, ast3.FunctionDef))",
        "target": "mypy.fastparse.ASTConverter.get_lineno"
      },
      {
        "code": "no-any-expr",
        "column": 68,
        "message": "Expression type contains \"Any\" (has type \"type[FunctionDef]\")",
        "offset": 0,
        "src": "isinstance(node, (ast3.AsyncFunctionDef, ast3.ClassDef, ast3.FunctionDef))",
        "target": "mypy.fastparse.ASTConverter.get_lineno"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 38,
        "src": "node = self.visit(stmt)",
        "target": "mypy.fastparse.ASTConverter.translate_stmt_list"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "res.append(node)",
        "target": "mypy.fastparse.ASTConverter.translate_stmt_list"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[Add]\")",
        "offset": 17,
        "src": "ast3.Add: \"+\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[Add], str)\")",
        "offset": 0,
        "src": "ast3.Add: \"+\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[Sub]\")",
        "offset": 1,
        "src": "ast3.Sub: \"-\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[Sub], str)\")",
        "offset": 0,
        "src": "ast3.Sub: \"-\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[Mult]\")",
        "offset": 1,
        "src": "ast3.Mult: \"*\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[Mult], str)\")",
        "offset": 0,
        "src": "ast3.Mult: \"*\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[MatMult]\")",
        "offset": 1,
        "src": "ast3.MatMult: \"@\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[MatMult], str)\")",
        "offset": 0,
        "src": "ast3.MatMult: \"@\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[Div]\")",
        "offset": 1,
        "src": "ast3.Div: \"/\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[Div], str)\")",
        "offset": 0,
        "src": "ast3.Div: \"/\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[Mod]\")",
        "offset": 1,
        "src": "ast3.Mod: \"%\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[Mod], str)\")",
        "offset": 0,
        "src": "ast3.Mod: \"%\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[Pow]\")",
        "offset": 1,
        "src": "ast3.Pow: \"**\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[Pow], str)\")",
        "offset": 0,
        "src": "ast3.Pow: \"**\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[LShift]\")",
        "offset": 1,
        "src": "ast3.LShift: \"<<\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[LShift], str)\")",
        "offset": 0,
        "src": "ast3.LShift: \"<<\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[RShift]\")",
        "offset": 1,
        "src": "ast3.RShift: \">>\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[RShift], str)\")",
        "offset": 0,
        "src": "ast3.RShift: \">>\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[BitOr]\")",
        "offset": 1,
        "src": "ast3.BitOr: \"|\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[BitOr], str)\")",
        "offset": 0,
        "src": "ast3.BitOr: \"|\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[BitXor]\")",
        "offset": 1,
        "src": "ast3.BitXor: \"^\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[BitXor], str)\")",
        "offset": 0,
        "src": "ast3.BitXor: \"^\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[BitAnd]\")",
        "offset": 1,
        "src": "ast3.BitAnd: \"&\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[BitAnd], str)\")",
        "offset": 0,
        "src": "ast3.BitAnd: \"&\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[FloorDiv]\")",
        "offset": 1,
        "src": "ast3.FloorDiv: \"//\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[FloorDiv], str)\")",
        "offset": 0,
        "src": "ast3.FloorDiv: \"//\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[Gt]\")",
        "offset": 11,
        "src": "ast3.Gt: \">\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[Gt], str)\")",
        "offset": 0,
        "src": "ast3.Gt: \">\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[Lt]\")",
        "offset": 1,
        "src": "ast3.Lt: \"<\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[Lt], str)\")",
        "offset": 0,
        "src": "ast3.Lt: \"<\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[Eq]\")",
        "offset": 1,
        "src": "ast3.Eq: \"==\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[Eq], str)\")",
        "offset": 0,
        "src": "ast3.Eq: \"==\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[GtE]\")",
        "offset": 1,
        "src": "ast3.GtE: \">=\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[GtE], str)\")",
        "offset": 0,
        "src": "ast3.GtE: \">=\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[LtE]\")",
        "offset": 1,
        "src": "ast3.LtE: \"<=\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[LtE], str)\")",
        "offset": 0,
        "src": "ast3.LtE: \"<=\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[NotEq]\")",
        "offset": 1,
        "src": "ast3.NotEq: \"!=\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[NotEq], str)\")",
        "offset": 0,
        "src": "ast3.NotEq: \"!=\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[Is]\")",
        "offset": 1,
        "src": "ast3.Is: \"is\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[Is], str)\")",
        "offset": 0,
        "src": "ast3.Is: \"is\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[IsNot]\")",
        "offset": 1,
        "src": "ast3.IsNot: \"is not\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[IsNot], str)\")",
        "offset": 0,
        "src": "ast3.IsNot: \"is not\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[In]\")",
        "offset": 1,
        "src": "ast3.In: \"in\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[In], str)\")",
        "offset": 0,
        "src": "ast3.In: \"in\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"type[NotIn]\")",
        "offset": 1,
        "src": "ast3.NotIn: \"not in\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(type[NotIn], str)\")",
        "offset": 0,
        "src": "ast3.NotIn: \"not in\",",
        "target": "mypy.fastparse"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"type[FunctionType]\")",
        "offset": 333,
        "src": "assert isinstance(func_type_ast, FunctionType)",
        "target": "mypy.fastparse.ASTConverter.do_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression type contains \"Any\" (has type \"type[Ellipsis]\")",
        "offset": 3,
        "src": "func_type_ast.argtypes[0], ast3_Ellipsis",
        "target": "mypy.fastparse.ASTConverter.do_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 68,
        "src": "end_line = getattr(n, \"end_lineno\", None)",
        "target": "mypy.fastparse.ASTConverter.do_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "end_column = getattr(n, \"end_col_offset\", None)",
        "target": "mypy.fastparse.ASTConverter.do_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 3,
        "src": "if isinstance(func_def.type, CallableType):",
        "target": "mypy.fastparse.ASTConverter.do_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 26,
        "src": "func_def.set_line(lineno, n.col_offset, end_line, end_column)",
        "target": "mypy.fastparse.ASTConverter.do_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "func_def.set_line(lineno, n.col_offset, end_line, end_column)",
        "target": "mypy.fastparse.ASTConverter.do_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 7,
        "src": "deco.set_line(first.lineno, first.col_offset, end_line, end_column)",
        "target": "mypy.fastparse.ASTConverter.do_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 68,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "deco.set_line(first.lineno, first.col_offset, end_line, end_column)",
        "target": "mypy.fastparse.ASTConverter.do_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 4,
        "src": "func_def.set_line(lineno, n.col_offset, end_line, end_column)",
        "target": "mypy.fastparse.ASTConverter.do_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "func_def.set_line(lineno, n.col_offset, end_line, end_column)",
        "target": "mypy.fastparse.ASTConverter.do_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"Any | list[Any]\")",
        "offset": 18,
        "src": "posonlyargs = getattr(args, \"posonlyargs\", cast(List[ast3.arg], []))",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"Any | list[Any]\")",
        "offset": 1,
        "src": "args_args = posonlyargs + args.args",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"Any | list[Any]\")",
        "offset": 2,
        "src": "num_no_defaults = len(args_args) - len(args_defaults)",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(int, Any)\")",
        "offset": 2,
        "src": "for i, a in enumerate(args_args[:num_no_defaults]):",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for i, a in enumerate(args_args[:num_no_defaults]):",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"enumerate[Any]\")",
        "offset": 0,
        "src": "for i, a in enumerate(args_args[:num_no_defaults]):",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"Any | list[Any]\")",
        "offset": 0,
        "src": "for i, a in enumerate(args_args[:num_no_defaults]):",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"Any | list[Any]\")",
        "offset": 1,
        "src": "pos_only = i < len(posonlyargs)",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "new_args.append(self.make_argument(a, None, ARG_POS, no_type_check, pos_only))",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "names.append(a)",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(int, (Any, expr))\")",
        "offset": 3,
        "src": "for i, (a, d) in enumerate(zip(args_args[num_no_defaults:], args_defaults)):",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(Any, expr)\")",
        "offset": 0,
        "src": "for i, (a, d) in enumerate(zip(args_args[num_no_defaults:], args_defaults)):",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for i, (a, d) in enumerate(zip(args_args[num_no_defaults:], args_defaults)):",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"enumerate[(Any, expr)]\")",
        "offset": 0,
        "src": "for i, (a, d) in enumerate(zip(args_args[num_no_defaults:], args_defaults)):",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"zip[(Any, expr)]\")",
        "offset": 0,
        "src": "for i, (a, d) in enumerate(zip(args_args[num_no_defaults:], args_defaults)):",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"Any | list[Any]\")",
        "offset": 0,
        "src": "for i, (a, d) in enumerate(zip(args_args[num_no_defaults:], args_defaults)):",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"Any | list[Any]\")",
        "offset": 1,
        "src": "pos_only = num_no_defaults + i < len(posonlyargs)",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "new_args.append(self.make_argument(a, d, ARG_OPT, no_type_check, pos_only))",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "names.append(a)",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 11,
        "src": "a, kd, ARG_NAMED if kd is None else ARG_NAMED_OPT, no_type_check",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "names.append(a)",
        "target": "mypy.fastparse.ASTConverter.transform_args"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 34,
        "src": "argument = Argument(Var(arg.arg), arg_type, self.visit(default), kind, pos_only)",
        "target": "mypy.fastparse.ASTConverter.make_argument"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 4,
        "src": "getattr(arg, \"end_lineno\", None),",
        "target": "mypy.fastparse.ASTConverter.make_argument"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "getattr(arg, \"end_col_offset\", None),",
        "target": "mypy.fastparse.ASTConverter.make_argument"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 14,
        "src": "keywords = [(kw.arg, self.visit(kw.value)) for kw in n.keywords if kw.arg]",
        "target": "mypy.fastparse.ASTConverter.visit_ClassDef"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 0,
        "src": "keywords = [(kw.arg, self.visit(kw.value)) for kw in n.keywords if kw.arg]",
        "target": "mypy.fastparse.ASTConverter.visit_ClassDef"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "keywords = [(kw.arg, self.visit(kw.value)) for kw in n.keywords if kw.arg]",
        "target": "mypy.fastparse.ASTConverter.visit_ClassDef"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 7,
        "src": "metaclass=dict(keywords).get(\"metaclass\"),",
        "target": "mypy.fastparse.ASTConverter.visit_ClassDef"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "metaclass=dict(keywords).get(\"metaclass\"),",
        "target": "mypy.fastparse.ASTConverter.visit_ClassDef"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 0,
        "src": "metaclass=dict(keywords).get(\"metaclass\"),",
        "target": "mypy.fastparse.ASTConverter.visit_ClassDef"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 1,
        "src": "keywords=keywords,",
        "target": "mypy.fastparse.ASTConverter.visit_ClassDef"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 19,
        "src": "node = ReturnStmt(self.visit(n.value))",
        "target": "mypy.fastparse.ASTConverter.visit_Return"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 10,
        "src": "node = DelStmt(self.visit(n.targets[0]))",
        "target": "mypy.fastparse.ASTConverter.visit_Delete"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "rvalue = self.visit(n.value)",
        "target": "mypy.fastparse.ASTConverter.visit_Assign"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "s = AssignmentStmt(lvalues, rvalue, type=typ, new_syntax=False)",
        "target": "mypy.fastparse.ASTConverter.visit_Assign"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 15,
        "src": "s = AssignmentStmt([self.visit(n.target)], rvalue, type=typ, new_syntax=True)",
        "target": "mypy.fastparse.ASTConverter.visit_AnnAssign"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "self.from_operator(n.op), self.visit(n.target), self.visit(n.value)",
        "target": "mypy.fastparse.ASTConverter.visit_AugAssign"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.from_operator(n.op), self.visit(n.target), self.visit(n.value)",
        "target": "mypy.fastparse.ASTConverter.visit_AugAssign"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 8,
        "src": "self.visit(n.target),",
        "target": "mypy.fastparse.ASTConverter.visit_For"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "self.visit(n.iter),",
        "target": "mypy.fastparse.ASTConverter.visit_For"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 11,
        "src": "self.visit(n.target),",
        "target": "mypy.fastparse.ASTConverter.visit_AsyncFor"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "self.visit(n.iter),",
        "target": "mypy.fastparse.ASTConverter.visit_AsyncFor"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 11,
        "src": "self.visit(n.test),",
        "target": "mypy.fastparse.ASTConverter.visit_While"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 10,
        "src": "[self.visit(n.test)],",
        "target": "mypy.fastparse.ASTConverter.visit_If"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 10,
        "src": "[self.visit(i.context_expr) for i in n.items],",
        "target": "mypy.fastparse.ASTConverter.visit_With"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "[self.visit(i.optional_vars) for i in n.items],",
        "target": "mypy.fastparse.ASTConverter.visit_With"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 10,
        "src": "[self.visit(i.context_expr) for i in n.items],",
        "target": "mypy.fastparse.ASTConverter.visit_AsyncWith"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "[self.visit(i.optional_vars) for i in n.items],",
        "target": "mypy.fastparse.ASTConverter.visit_AsyncWith"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "node = RaiseStmt(self.visit(n.exc), self.visit(n.cause))",
        "target": "mypy.fastparse.ASTConverter.visit_Raise"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "node = RaiseStmt(self.visit(n.exc), self.visit(n.cause))",
        "target": "mypy.fastparse.ASTConverter.visit_Raise"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 8,
        "src": "types = [self.visit(h.type) for h in n.handlers]",
        "target": "mypy.fastparse.ASTConverter.visit_Try"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "types = [self.visit(h.type) for h in n.handlers]",
        "target": "mypy.fastparse.ASTConverter.visit_Try"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 6,
        "src": "types,",
        "target": "mypy.fastparse.ASTConverter.visit_Try"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "self.set_line(NameExpr(h.name), h) if h.name is not None else None for h in n.handlers",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.set_line(NameExpr(h.name), h) if h.name is not None else None for h in n.handlers",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.set_line(NameExpr(h.name), h) if h.name is not None else None for h in n.handlers",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.set_line(NameExpr(h.name), h) if h.name is not None else None for h in n.handlers",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 88,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.set_line(NameExpr(h.name), h) if h.name is not None else None for h in n.handlers",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "types = [self.visit(h.type) for h in n.handlers]",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "types = [self.visit(h.type) for h in n.handlers]",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "types = [self.visit(h.type) for h in n.handlers]",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "types = [self.visit(h.type) for h in n.handlers]",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "handlers = [self.as_required_block(h.body, h.lineno) for h in n.handlers]",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "handlers = [self.as_required_block(h.body, h.lineno) for h in n.handlers]",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "handlers = [self.as_required_block(h.body, h.lineno) for h in n.handlers]",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 70,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "handlers = [self.as_required_block(h.body, h.lineno) for h in n.handlers]",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "self.as_required_block(n.body, n.lineno),",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.as_required_block(n.body, n.lineno),",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "types,",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "self.as_block(n.orelse, n.lineno),",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.as_block(n.orelse, n.lineno),",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "self.as_block(n.finalbody, n.lineno),",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.as_block(n.finalbody, n.lineno),",
        "target": "mypy.fastparse.ASTConverter.visit_TryStar"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "node = AssertStmt(self.visit(n.test), self.visit(n.msg))",
        "target": "mypy.fastparse.ASTConverter.visit_Assert"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "node = AssertStmt(self.visit(n.test), self.visit(n.msg))",
        "target": "mypy.fastparse.ASTConverter.visit_Assert"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 46,
        "src": "value = self.visit(n.value)",
        "target": "mypy.fastparse.ASTConverter.visit_Expr"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "node = ExpressionStmt(value)",
        "target": "mypy.fastparse.ASTConverter.visit_Expr"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 21,
        "src": "s = AssignmentExpr(self.visit(n.target), self.visit(n.value))",
        "target": "mypy.fastparse.ASTConverter.visit_NamedExpr"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "s = AssignmentExpr(self.visit(n.target), self.visit(n.value))",
        "target": "mypy.fastparse.ASTConverter.visit_NamedExpr"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "s = AssignmentExpr(self.visit(n.target), self.visit(n.value))",
        "target": "mypy.fastparse.ASTConverter.visit_NamedExpr"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "s = AssignmentExpr(self.visit(n.target), self.visit(n.value))",
        "target": "mypy.fastparse.ASTConverter.visit_NamedExpr"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[And]\")",
        "offset": 8,
        "src": "if isinstance(op_node, ast3.And):",
        "target": "mypy.fastparse.ASTConverter.visit_BoolOp"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"type[Or]\")",
        "offset": 2,
        "src": "elif isinstance(op_node, ast3.Or):",
        "target": "mypy.fastparse.ASTConverter.visit_BoolOp"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 22,
        "src": "e = OpExpr(op, self.visit(n.left), self.visit(n.right))",
        "target": "mypy.fastparse.ASTConverter.visit_BinOp"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "e = OpExpr(op, self.visit(n.left), self.visit(n.right))",
        "target": "mypy.fastparse.ASTConverter.visit_BinOp"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"type[Invert]\")",
        "offset": 6,
        "src": "if isinstance(n.op, ast3.Invert):",
        "target": "mypy.fastparse.ASTConverter.visit_UnaryOp"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"type[Not]\")",
        "offset": 2,
        "src": "elif isinstance(n.op, ast3.Not):",
        "target": "mypy.fastparse.ASTConverter.visit_UnaryOp"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"type[UAdd]\")",
        "offset": 2,
        "src": "elif isinstance(n.op, ast3.UAdd):",
        "target": "mypy.fastparse.ASTConverter.visit_UnaryOp"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"type[USub]\")",
        "offset": 2,
        "src": "elif isinstance(n.op, ast3.USub):",
        "target": "mypy.fastparse.ASTConverter.visit_UnaryOp"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "e = UnaryExpr(op, self.visit(n.operand))",
        "target": "mypy.fastparse.ASTConverter.visit_UnaryOp"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 17,
        "src": "e = ConditionalExpr(self.visit(n.test), self.visit(n.body), self.visit(n.orelse))",
        "target": "mypy.fastparse.ASTConverter.visit_IfExp"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "e = ConditionalExpr(self.visit(n.test), self.visit(n.body), self.visit(n.orelse))",
        "target": "mypy.fastparse.ASTConverter.visit_IfExp"
      },
      {
        "code": "no-any-expr",
        "column": 68,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "e = ConditionalExpr(self.visit(n.test), self.visit(n.body), self.visit(n.orelse))",
        "target": "mypy.fastparse.ASTConverter.visit_IfExp"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 27,
        "src": "targets = [self.visit(c.target) for c in n.generators]",
        "target": "mypy.fastparse.ASTConverter.visit_DictComp"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "targets = [self.visit(c.target) for c in n.generators]",
        "target": "mypy.fastparse.ASTConverter.visit_DictComp"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "iters = [self.visit(c.iter) for c in n.generators]",
        "target": "mypy.fastparse.ASTConverter.visit_DictComp"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "iters = [self.visit(c.iter) for c in n.generators]",
        "target": "mypy.fastparse.ASTConverter.visit_DictComp"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "self.visit(n.key), self.visit(n.value), targets, iters, ifs_list, is_async",
        "target": "mypy.fastparse.ASTConverter.visit_DictComp"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.visit(n.key), self.visit(n.value), targets, iters, ifs_list, is_async",
        "target": "mypy.fastparse.ASTConverter.visit_DictComp"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "self.visit(n.key), self.visit(n.value), targets, iters, ifs_list, is_async",
        "target": "mypy.fastparse.ASTConverter.visit_DictComp"
      },
      {
        "code": "no-any-expr",
        "column": 61,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "self.visit(n.key), self.visit(n.value), targets, iters, ifs_list, is_async",
        "target": "mypy.fastparse.ASTConverter.visit_DictComp"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "targets = [self.visit(c.target) for c in n.generators]",
        "target": "mypy.fastparse.ASTConverter.visit_GeneratorExp"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "targets = [self.visit(c.target) for c in n.generators]",
        "target": "mypy.fastparse.ASTConverter.visit_GeneratorExp"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "iters = [self.visit(c.iter) for c in n.generators]",
        "target": "mypy.fastparse.ASTConverter.visit_GeneratorExp"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "iters = [self.visit(c.iter) for c in n.generators]",
        "target": "mypy.fastparse.ASTConverter.visit_GeneratorExp"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "e = GeneratorExpr(self.visit(n.elt), targets, iters, ifs_list, is_async)",
        "target": "mypy.fastparse.ASTConverter.visit_GeneratorExp"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "e = GeneratorExpr(self.visit(n.elt), targets, iters, ifs_list, is_async)",
        "target": "mypy.fastparse.ASTConverter.visit_GeneratorExp"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "e = GeneratorExpr(self.visit(n.elt), targets, iters, ifs_list, is_async)",
        "target": "mypy.fastparse.ASTConverter.visit_GeneratorExp"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "v = self.visit(n.value)",
        "target": "mypy.fastparse.ASTConverter.visit_Await"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "e = AwaitExpr(v)",
        "target": "mypy.fastparse.ASTConverter.visit_Await"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "e = YieldExpr(self.visit(n.value))",
        "target": "mypy.fastparse.ASTConverter.visit_Yield"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "e = YieldFromExpr(self.visit(n.value))",
        "target": "mypy.fastparse.ASTConverter.visit_YieldFrom"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"type[Starred]\")",
        "offset": 17,
        "src": "[a.value if isinstance(a, Starred) else a for a in args] + [k.value for k in keywords]",
        "target": "mypy.fastparse.ASTConverter.visit_Call"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression type contains \"Any\" (has type \"type[Starred]\")",
        "offset": 2,
        "src": "arg_kinds = [ARG_STAR if type(a) is Starred else ARG_POS for a in args] + [",
        "target": "mypy.fastparse.ASTConverter.visit_Call"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "self.visit(n.func),",
        "target": "mypy.fastparse.ASTConverter.visit_Call"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 3,
        "src": "cast(\"List[Optional[str]]\", [None] * len(args)) + keyword_names,",
        "target": "mypy.fastparse.ASTConverter.visit_Call"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 5,
        "src": "def visit_Constant(self, n: Constant) -> Any:",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "val = n.value",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "e: Any = None",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if val is None:",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif isinstance(val, str):",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "e = StrExpr(n.s)",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "elif isinstance(val, bytes):",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "e = BytesExpr(bytes_to_human_readable_repr(n.s))",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "elif isinstance(val, bool):  # Must check before int!",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif isinstance(val, int):",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif isinstance(val, float):",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif isinstance(val, complex):",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif val is Ellipsis:",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 69,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 3,
        "src": "raise RuntimeError(\"Constant not implemented for \" + str(type(val)))",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 74,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "raise RuntimeError(\"Constant not implemented for \" + str(type(val)))",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return self.set_line(e, n)",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return self.set_line(e, n)",
        "target": "mypy.fastparse.ASTConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 46,
        "src": "val_exp = self.visit(n.value)",
        "target": "mypy.fastparse.ASTConverter.visit_FormattedValue"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "val_exp.set_line(n.lineno, n.col_offset)",
        "target": "mypy.fastparse.ASTConverter.visit_FormattedValue"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "format_spec_exp = self.visit(n.format_spec) if n.format_spec is not None else StrExpr(\"\")",
        "target": "mypy.fastparse.ASTConverter.visit_FormattedValue"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"Any | StrExpr\")",
        "offset": 0,
        "src": "format_spec_exp = self.visit(n.format_spec) if n.format_spec is not None else StrExpr(\"\")",
        "target": "mypy.fastparse.ASTConverter.visit_FormattedValue"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "format_method, [val_exp, format_spec_exp], [ARG_POS, ARG_POS], [None, None]",
        "target": "mypy.fastparse.ASTConverter.visit_FormattedValue"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"Any | StrExpr\")",
        "offset": 0,
        "src": "format_method, [val_exp, format_spec_exp], [ARG_POS, ARG_POS], [None, None]",
        "target": "mypy.fastparse.ASTConverter.visit_FormattedValue"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 11,
        "src": "e = NameExpr(str(n.value))",
        "target": "mypy.fastparse.ASTConverter.visit_NameConstant"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 11,
        "src": "member_expr = MemberExpr(self.visit(value), n.attr)",
        "target": "mypy.fastparse.ASTConverter.visit_Attribute"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 14,
        "src": "e = IndexExpr(self.visit(n.value), self.visit(n.slice))",
        "target": "mypy.fastparse.ASTConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "e = IndexExpr(self.visit(n.value), self.visit(n.slice))",
        "target": "mypy.fastparse.ASTConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[Slice]\")",
        "offset": 4,
        "src": "if isinstance(n.slice, ast3.Slice) or (",
        "target": "mypy.fastparse.ASTConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression type contains \"Any\" (has type \"type[ExtSlice]\")",
        "offset": 1,
        "src": "is_py38_or_earlier and isinstance(n.slice, ast3.ExtSlice)",
        "target": "mypy.fastparse.ASTConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 12,
        "src": "e = StarExpr(self.visit(n.value))",
        "target": "mypy.fastparse.ASTConverter.visit_Starred"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 10,
        "src": "expr_list: list[Expression] = [self.visit(e) for e in n.elts]",
        "target": "mypy.fastparse.ASTConverter.visit_List"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"type[Store]\")",
        "offset": 1,
        "src": "if isinstance(n.ctx, ast3.Store):",
        "target": "mypy.fastparse.ASTConverter.visit_List"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 16,
        "src": "return SliceExpr(self.visit(n.lower), self.visit(n.upper), self.visit(n.step))",
        "target": "mypy.fastparse.ASTConverter.visit_Slice"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return SliceExpr(self.visit(n.lower), self.visit(n.upper), self.visit(n.step))",
        "target": "mypy.fastparse.ASTConverter.visit_Slice"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return SliceExpr(self.visit(n.lower), self.visit(n.upper), self.visit(n.step))",
        "target": "mypy.fastparse.ASTConverter.visit_Slice"
      },
      {
        "code": "no-any-explicit",
        "column": 50,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 5,
        "src": "return TupleExpr(self.translate_expr_list(cast(Any, n).dims))",
        "target": "mypy.fastparse.ASTConverter.visit_ExtSlice"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return TupleExpr(self.translate_expr_list(cast(Any, n).dims))",
        "target": "mypy.fastparse.ASTConverter.visit_ExtSlice"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "value = self.visit(cast(Any, n).value)",
        "target": "mypy.fastparse.ASTConverter.visit_Index"
      },
      {
        "code": "no-any-explicit",
        "column": 27,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 0,
        "src": "value = self.visit(cast(Any, n).value)",
        "target": "mypy.fastparse.ASTConverter.visit_Index"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "value = self.visit(cast(Any, n).value)",
        "target": "mypy.fastparse.ASTConverter.visit_Index"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert isinstance(value, Node)",
        "target": "mypy.fastparse.ASTConverter.visit_Index"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "self.visit(n.subject),",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.visit(n.subject),",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "[self.visit(c.pattern) for c in n.cases],",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[self.visit(c.pattern) for c in n.cases],",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[self.visit(c.pattern) for c in n.cases],",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "[self.visit(c.guard) for c in n.cases],",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[self.visit(c.guard) for c in n.cases],",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[self.visit(c.guard) for c in n.cases],",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "[self.as_required_block(c.body, n.lineno) for c in n.cases],",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[self.as_required_block(c.body, n.lineno) for c in n.cases],",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[self.as_required_block(c.body, n.lineno) for c in n.cases],",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 63,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[self.as_required_block(c.body, n.lineno) for c in n.cases],",
        "target": "mypy.fastparse.ASTConverter.visit_Match"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "node = ValuePattern(self.visit(n.value))",
        "target": "mypy.fastparse.ASTConverter.visit_MatchValue"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "node = ValuePattern(self.visit(n.value))",
        "target": "mypy.fastparse.ASTConverter.visit_MatchValue"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "node = SingletonPattern(n.value)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchSingleton"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "patterns = [self.visit(p) for p in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchSequence"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "patterns = [self.visit(p) for p in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchSequence"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "patterns = [self.visit(p) for p in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchSequence"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "patterns = [self.visit(p) for p in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchSequence"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "stars = [p for p in patterns if isinstance(p, StarredPattern)]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchSequence"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "stars = [p for p in patterns if isinstance(p, StarredPattern)]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchSequence"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "stars = [p for p in patterns if isinstance(p, StarredPattern)]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchSequence"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 3,
        "src": "node = SequencePattern(patterns)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchSequence"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "if n.name is None:",
        "target": "mypy.fastparse.ASTConverter.visit_MatchStar"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "node = StarredPattern(NameExpr(n.name))",
        "target": "mypy.fastparse.ASTConverter.visit_MatchStar"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "keys = [self.visit(k) for k in n.keys]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "keys = [self.visit(k) for k in n.keys]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "keys = [self.visit(k) for k in n.keys]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "keys = [self.visit(k) for k in n.keys]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "values = [self.visit(v) for v in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "values = [self.visit(v) for v in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "values = [self.visit(v) for v in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "values = [self.visit(v) for v in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if n.rest is None:",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "rest = NameExpr(n.rest)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "node = MappingPattern(keys, values, rest)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "node = MappingPattern(keys, values, rest)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchMapping"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "class_ref = self.visit(n.cls)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "class_ref = self.visit(n.cls)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert isinstance(class_ref, RefExpr)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "positionals = [self.visit(p) for p in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "positionals = [self.visit(p) for p in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "positionals = [self.visit(p) for p in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "positionals = [self.visit(p) for p in n.patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "keyword_keys = n.kwd_attrs",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "keyword_values = [self.visit(p) for p in n.kwd_patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "keyword_values = [self.visit(p) for p in n.kwd_patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "keyword_values = [self.visit(p) for p in n.kwd_patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "keyword_values = [self.visit(p) for p in n.kwd_patterns]",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "node = ClassPattern(class_ref, positionals, keyword_keys, keyword_values)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "node = ClassPattern(class_ref, positionals, keyword_keys, keyword_values)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 66,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "node = ClassPattern(class_ref, positionals, keyword_keys, keyword_values)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchClass"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "if n.name is None:",
        "target": "mypy.fastparse.ASTConverter.visit_MatchAs"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "name = NameExpr(n.name)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchAs"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "node = AsPattern(self.visit(n.pattern), name)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchAs"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "node = AsPattern(self.visit(n.pattern), name)",
        "target": "mypy.fastparse.ASTConverter.visit_MatchAs"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "node = OrPattern([self.visit(pattern) for pattern in n.patterns])",
        "target": "mypy.fastparse.ASTConverter.visit_MatchOr"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "node = OrPattern([self.visit(pattern) for pattern in n.patterns])",
        "target": "mypy.fastparse.ASTConverter.visit_MatchOr"
      },
      {
        "code": "no-any-expr",
        "column": 61,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "node = OrPattern([self.visit(pattern) for pattern in n.patterns])",
        "target": "mypy.fastparse.ASTConverter.visit_MatchOr"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression type contains \"Any\" (has type \"Any | int\")",
        "offset": 40,
        "src": "None, \"typing.Any\", line=self.line, column=getattr(node, \"col_offset\", -1), note=note",
        "target": "mypy.fastparse.TypeConverter.invalid_type"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 18,
        "src": "visitor = getattr(self, method, None)",
        "target": "mypy.fastparse.TypeConverter.visit"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "if visitor is not None:",
        "target": "mypy.fastparse.TypeConverter.visit"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "typ = visitor(node)",
        "target": "mypy.fastparse.TypeConverter.visit"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert isinstance(typ, ProperType)",
        "target": "mypy.fastparse.TypeConverter.visit"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"type[typed_ast.ast3.List]\")",
        "offset": 29,
        "src": "if not isinstance(self.parent(), ast3.List):",
        "target": "mypy.fastparse.TypeConverter.visit_Call"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"type[Str]\")",
        "offset": 56,
        "src": "if isinstance(n, Str):",
        "target": "mypy.fastparse.TypeConverter._extract_argument_name"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"type[NameConstant]\")",
        "offset": 2,
        "src": "elif isinstance(n, NameConstant) and str(n.value) == \"None\":",
        "target": "mypy.fastparse.TypeConverter._extract_argument_name"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "elif isinstance(n, NameConstant) and str(n.value) == \"None\":",
        "target": "mypy.fastparse.TypeConverter._extract_argument_name"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"type[BitOr]\")",
        "offset": 11,
        "src": "if not isinstance(n.op, (ast3.BitOr, ast3.BitAnd)):",
        "target": "mypy.fastparse.TypeConverter.visit_BinOp"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"(type[BitOr], type[BitAnd])\")",
        "offset": 0,
        "src": "if not isinstance(n.op, (ast3.BitOr, ast3.BitAnd)):",
        "target": "mypy.fastparse.TypeConverter.visit_BinOp"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression type contains \"Any\" (has type \"type[BitAnd]\")",
        "offset": 0,
        "src": "if not isinstance(n.op, (ast3.BitOr, ast3.BitAnd)):",
        "target": "mypy.fastparse.TypeConverter.visit_BinOp"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"type[BitAnd]\")",
        "offset": 4,
        "src": "if isinstance(n.op, ast3.BitAnd):",
        "target": "mypy.fastparse.TypeConverter.visit_BinOp"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 18,
        "src": "if isinstance(n.value, bool):",
        "target": "mypy.fastparse.TypeConverter.visit_NameConstant"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "return UnboundType(str(n.value), line=self.line, column=n.col_offset)",
        "target": "mypy.fastparse.TypeConverter.visit_NameConstant"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "val = n.value",
        "target": "mypy.fastparse.TypeConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if val is None:",
        "target": "mypy.fastparse.TypeConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if isinstance(val, str):",
        "target": "mypy.fastparse.TypeConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "return parse_type_string(n.s, \"builtins.str\", self.line, n.col_offset)",
        "target": "mypy.fastparse.TypeConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 69,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return parse_type_string(n.s, \"builtins.str\", self.line, n.col_offset)",
        "target": "mypy.fastparse.TypeConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if val is Ellipsis:",
        "target": "mypy.fastparse.TypeConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if isinstance(val, bool):",
        "target": "mypy.fastparse.TypeConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if isinstance(val, (int, float, complex)):",
        "target": "mypy.fastparse.TypeConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if isinstance(val, bytes):",
        "target": "mypy.fastparse.TypeConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 83,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "return RawExpressionType(contents, \"builtins.bytes\", self.line, column=n.col_offset)",
        "target": "mypy.fastparse.TypeConverter.visit_Constant"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression type contains \"Any\" (has type \"type[USub]\")",
        "offset": 9,
        "src": "if isinstance(typ, RawExpressionType) and isinstance(n.op, USub):",
        "target": "mypy.fastparse.TypeConverter.visit_UnaryOp"
      },
      {
        "code": "no-any-expr",
        "column": 61,
        "message": "Expression type contains \"Any\" (has type \"Any | int\")",
        "offset": 21,
        "src": "numeric_value, type_name, line=self.line, column=getattr(n, \"col_offset\", -1)",
        "target": "mypy.fastparse.TypeConverter.numeric_type"
      },
      {
        "code": "no-any-explicit",
        "column": 27,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 22,
        "src": "value = self.visit(cast(Any, n).value)",
        "target": "mypy.fastparse.TypeConverter.visit_Index"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "value = self.visit(cast(Any, n).value)",
        "target": "mypy.fastparse.TypeConverter.visit_Index"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"type[Index]\")",
        "offset": 13,
        "src": "elif isinstance(n.slice, ast3.Index):",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "no-any-explicit",
        "column": 12,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "sliceval: Any = n.slice.value",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"type[Slice]\")",
        "offset": 1,
        "src": "elif isinstance(n.slice, ast3.Slice):",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 2,
        "src": "if getattr(sliceval, \"col_offset\", None) is None:",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if getattr(sliceval, \"col_offset\", None) is None:",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "sliceval.col_offset = sliceval.lower.col_offset",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "sliceval.col_offset = sliceval.lower.col_offset",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"type[ExtSlice]\")",
        "offset": 2,
        "src": "assert isinstance(n.slice, ast3.ExtSlice)",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 3,
        "src": "if getattr(s, \"col_offset\", None) is None:",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"type[Index]\")",
        "offset": 1,
        "src": "if isinstance(s, ast3.Index):",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"type[Slice]\")",
        "offset": 2,
        "src": "elif isinstance(s, ast3.Slice):",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "if isinstance(sliceval, ast3.Tuple):",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"type[typed_ast.ast3.Tuple]\")",
        "offset": 0,
        "src": "if isinstance(sliceval, ast3.Tuple):",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "params = [self.visit(sliceval)]",
        "target": "mypy.fastparse.TypeConverter.visit_Subscript"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"type[Load]\")",
        "offset": 38,
        "src": "assert isinstance(n.ctx, ast3.Load)",
        "target": "mypy.fastparse.TypeConverter.visit_List"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"type[Name]\")",
        "offset": 5,
        "src": "if isinstance(n, Name):",
        "target": "mypy.fastparse.stringify_name"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"type[Attribute]\")",
        "offset": 2,
        "src": "elif isinstance(n, Attribute):",
        "target": "mypy.fastparse.stringify_name"
      }
    ],
    "mypy/find_sources.py": [
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"[_T] ((...) -> _T) -> _lru_cache_wrapper[_T]\")",
        "offset": 163,
        "src": "@functools.lru_cache()  # noqa: B019",
        "target": "mypy.find_sources"
      }
    ],
    "mypy/fixup.py": [
      {
        "code": "truthy-bool",
        "column": 15,
        "message": "Member \"defn\" has type \"ClassDef\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 71,
        "src": "if info.defn:",
        "target": "mypy.fixup.NodeFixer.visit_type_info"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"func\" has type \"FuncDef\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 91,
        "src": "if d.func:",
        "target": "mypy.fixup.NodeFixer.visit_decorator"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"var\" has type \"Var\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 2,
        "src": "if d.var:",
        "target": "mypy.fixup.NodeFixer.visit_decorator"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 70,
        "src": "def visit_any(self, o: Any) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_any"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"fallback\" has type \"Instance\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 4,
        "src": "if ct.fallback:",
        "target": "mypy.fixup.TypeFixer.visit_callable_type"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 20,
        "src": "def visit_erased_type(self, o: Any) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_erased_type"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "raise RuntimeError(\"Shouldn't get here\", o)",
        "target": "mypy.fixup.TypeFixer.visit_erased_type"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 2,
        "src": "def visit_deleted_type(self, o: Any) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_deleted_type"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def visit_none_type(self, o: Any) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_none_type"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def visit_uninhabited_type(self, o: Any) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_uninhabited_type"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def visit_partial_type(self, o: Any) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_partial_type"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "raise RuntimeError(\"Shouldn't get here\", o)",
        "target": "mypy.fixup.TypeFixer.visit_partial_type"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 67,
        "src": "def visit_void(self, o: Any) -> None:",
        "target": "mypy.fixup.TypeFixer.visit_void"
      }
    ],
    "mypy/fscache.py": [
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 303,
        "src": "new = OSError(*e.args)",
        "target": "mypy.fscache.copy_os_error"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "new.filename = e.filename",
        "target": "mypy.fscache.copy_os_error"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if e.filename2:",
        "target": "mypy.fscache.copy_os_error"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "new.filename2 = e.filename2",
        "target": "mypy.fscache.copy_os_error"
      }
    ],
    "mypy/join.py": [
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 387,
        "src": "if isinstance(self.s, CallableType) and is_similar_callables(t, self.s):",
        "target": "mypy.join.TypeJoinVisitor.visit_callable_type"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 191,
        "src": "if isinstance(s, (CallableType, Overloaded)):",
        "target": "mypy.join.normalize_callables"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"(type[CallableType], type[Overloaded])\")",
        "offset": 0,
        "src": "if isinstance(s, (CallableType, Overloaded)):",
        "target": "mypy.join.normalize_callables"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 2,
        "src": "if isinstance(t, (CallableType, Overloaded)):",
        "target": "mypy.join.normalize_callables"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"(type[CallableType], type[Overloaded])\")",
        "offset": 0,
        "src": "if isinstance(t, (CallableType, Overloaded)):",
        "target": "mypy.join.normalize_callables"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 100,
        "src": "elif isinstance(typ, (CallableType, TypedDictType, LiteralType)):",
        "target": "mypy.join.object_or_any_from_type"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"(type[CallableType], type[TypedDictType], type[LiteralType])\")",
        "offset": 0,
        "src": "elif isinstance(typ, (CallableType, TypedDictType, LiteralType)):",
        "target": "mypy.join.object_or_any_from_type"
      }
    ],
    "mypy/literals.py": [
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 131,
        "src": "Key: _TypeAlias = Tuple[Any, ...]",
        "target": "mypy.literals"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"tuple[str | Any, ...]\")",
        "offset": 47,
        "src": "return (\"Comparison\",) + rest",
        "target": "mypy.literals._Hasher.visit_comparison_expr"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"tuple[str | Any, ...]\")",
        "offset": 8,
        "src": "return (name,) + rest",
        "target": "mypy.literals._Hasher.seq_expr"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"tuple[str | Any, ...]\")",
        "offset": 11,
        "src": "return (\"Dict\",) + rest",
        "target": "mypy.literals._Hasher.visit_dict_expr"
      }
    ],
    "mypy/main.py": [
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 323,
        "src": "python_executable = special_opts.python_executable or options.python_executable",
        "target": "mypy.main.infer_python_executable"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"Any | str | None\")",
        "offset": 0,
        "src": "python_executable = special_opts.python_executable or options.python_executable",
        "target": "mypy.main.infer_python_executable"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | str | None\")",
        "offset": 2,
        "src": "if python_executable is None:",
        "target": "mypy.main.infer_python_executable"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if not special_opts.no_executable and not options.no_site_packages:",
        "target": "mypy.main.infer_python_executable"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 49,
        "src": "def __init__(self, *args: Any, **kwargs: Any):",
        "target": "mypy.main.CapturableArgumentParser.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "self.stdout = kwargs.pop(\"stdout\", sys.stdout)",
        "target": "mypy.main.CapturableArgumentParser.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.stdout = kwargs.pop(\"stdout\", sys.stdout)",
        "target": "mypy.main.CapturableArgumentParser.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "self.stderr = kwargs.pop(\"stderr\", sys.stderr)",
        "target": "mypy.main.CapturableArgumentParser.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.stderr = kwargs.pop(\"stderr\", sys.stderr)",
        "target": "mypy.main.CapturableArgumentParser.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 1,
        "src": "super().__init__(*args, **kwargs)",
        "target": "mypy.main.CapturableArgumentParser.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "super().__init__(*args, **kwargs)",
        "target": "mypy.main.CapturableArgumentParser.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "file = self.stdout",
        "target": "mypy.main.CapturableArgumentParser.print_usage"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"IO[str] | Any\")",
        "offset": 1,
        "src": "self._print_message(self.format_usage(), file)",
        "target": "mypy.main.CapturableArgumentParser.print_usage"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "file = self.stdout",
        "target": "mypy.main.CapturableArgumentParser.print_help"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression type contains \"Any\" (has type \"IO[str] | Any\")",
        "offset": 1,
        "src": "self._print_message(self.format_help(), file)",
        "target": "mypy.main.CapturableArgumentParser.print_help"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "file = self.stderr",
        "target": "mypy.main.CapturableArgumentParser._print_message"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"IO[str] | Any\")",
        "offset": 1,
        "src": "file.write(message)",
        "target": "mypy.main.CapturableArgumentParser._print_message"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "self._print_message(message, self.stderr)",
        "target": "mypy.main.CapturableArgumentParser.exit"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 12,
        "src": "self.print_usage(self.stderr)",
        "target": "mypy.main.CapturableArgumentParser.error"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 32,
        "src": "def __call__(",
        "target": "mypy.main.CapturableVersionAction.__call__"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 254,
        "src": "default=[],",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 7,
        "src": "default=[],",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 208,
        "src": "default=[],",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 7,
        "src": "default=[],",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 272,
        "src": "\"--package-root\", metavar=\"ROOT\", action=\"append\", default=[], help=argparse.SUPPRESS",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 42,
        "src": "default=[],",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 12,
        "src": "default=[],",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 9,
        "src": "default=[],",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 23,
        "src": "config_file = dummy.config_file",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if config_file and not os.path.exists(config_file):",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "if config_file and not os.path.exists(config_file):",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if config_file and not os.path.exists(config_file):",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "parser.error(f\"Cannot find config file '{config_file}'\")",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if dummy.legacy:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 18,
        "src": "if dummy.legacy:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 8,
        "src": "parse_config_file(options, set_strict_flags, config_file, stdout, stderr)",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 14,
        "src": "options.python_version = special_opts.python_version or options.python_version",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | (int, int)\")",
        "offset": 1,
        "src": "if options.python_version < (3,):",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "if options.python_version < (3,):",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 10,
        "src": "if special_opts.no_executable or options.no_site_packages:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "if special_opts.no_executable or options.no_site_packages:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "if not (special_opts.files or special_opts.packages or special_opts.modules):",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if not (special_opts.files or special_opts.packages or special_opts.modules):",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 59,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if not (special_opts.files or special_opts.packages or special_opts.modules):",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 11,
        "src": "bool(c)",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "bool(c)",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "for c in [",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "special_opts.modules + special_opts.packages,",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "special_opts.modules + special_opts.packages,",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "special_opts.command,",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "special_opts.files,",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 53,
        "src": "if special_opts.find_occurrences:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "state.find_occurrences = special_opts.find_occurrences.split(\".\")",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 8,
        "src": "for flag, val in vars(special_opts).items():",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for flag, val in vars(special_opts).items():",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "for flag, val in vars(special_opts).items():",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"dict_items[str, Any]\")",
        "offset": 0,
        "src": "for flag, val in vars(special_opts).items():",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if flag.endswith(\"_report\") and val is not None:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "report_dir = val",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "options.report_dirs[report_type] = report_dir",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "if special_opts.cache_map:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 9,
        "message": "Expression has type \"Any\"",
        "offset": 27,
        "src": "[f\"module:{el}\" for el in special_opts.modules]",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[f\"module:{el}\" for el in special_opts.modules]",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "+ [f\"package:{el}\" for el in special_opts.packages]",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "+ [f\"package:{el}\" for el in special_opts.packages]",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "+ [f\"file:{el}\" for el in special_opts.files]",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "+ [f\"file:{el}\" for el in special_opts.files]",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if special_opts.modules + special_opts.packages:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if special_opts.modules + special_opts.packages:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "for p in special_opts.packages:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for p in special_opts.packages:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if os.sep in p or os.altsep and os.altsep in p:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if os.sep in p or os.altsep and os.altsep in p:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "fail(f\"Package name '{p}' cannot have a slash in it.\", stderr, options)",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "p_targets = cache.find_modules_recursive(p)",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "fail(f\"Can't find package '{p}'\", stderr, options)",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "for m in special_opts.modules:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for m in special_opts.modules:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "targets.append(BuildSource(None, m, None))",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 9,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif special_opts.command:",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "targets = [BuildSource(None, None, \"\\n\".join(special_opts.command))]",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "targets = create_source_list(special_opts.files, options, fscache)",
        "target": "mypy.main.process_options"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 48,
        "src": "n = len(special_opts.cache_map)",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "source, meta_file, data_file = special_opts.cache_map[i : i + 3]",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if source in options.cache_map:",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "parser.error(f\"Duplicate --cache-map source {source})\")",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if not source.endswith(\".py\") and not source.endswith(\".pyi\"):",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if not source.endswith(\".py\") and not source.endswith(\".pyi\"):",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "parser.error(f\"Invalid --cache-map source {source} (triple[0] must be *.py[i])\")",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if not meta_file.endswith(\".meta.json\"):",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 85,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "\"Invalid --cache-map meta_file %s (triple[1] must be *.meta.json)\" % meta_file",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if not data_file.endswith(\".data.json\"):",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 85,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "\"Invalid --cache-map data_file %s (triple[2] must be *.data.json)\" % data_file",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "options.cache_map[source] = (meta_file, data_file)",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "options.cache_map[source] = (meta_file, data_file)",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"(Any, Any)\")",
        "offset": 0,
        "src": "options.cache_map[source] = (meta_file, data_file)",
        "target": "mypy.main.process_cache_map"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "options.cache_map[source] = (meta_file, data_file)",
        "target": "mypy.main.process_cache_map"
      }
    ],
    "mypy/meet.py": [
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 441,
        "src": "if isinstance(left, TypeType) and isinstance(right, CallableType):",
        "target": "mypy.meet.is_overlapping_types"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 18,
        "src": "if isinstance(left, CallableType) and isinstance(right, CallableType):",
        "target": "mypy.meet.is_overlapping_types"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 0,
        "src": "if isinstance(left, CallableType) and isinstance(right, CallableType):",
        "target": "mypy.meet.is_overlapping_types"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 8,
        "src": "elif isinstance(left, CallableType):",
        "target": "mypy.meet.is_overlapping_types"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 2,
        "src": "elif isinstance(right, CallableType):",
        "target": "mypy.meet.is_overlapping_types"
      },
      {
        "code": "no-any-expr",
        "column": 64,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 244,
        "src": "if isinstance(self.s, Parameters) or isinstance(self.s, CallableType):",
        "target": "mypy.meet.TypeMeetVisitor.visit_parameters"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 62,
        "src": "if isinstance(self.s, CallableType) and join.is_similar_callables(t, self.s):",
        "target": "mypy.meet.TypeMeetVisitor.visit_callable_type"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 106,
        "src": "elif isinstance(self.s, CallableType):",
        "target": "mypy.meet.TypeMeetVisitor.visit_type_type"
      }
    ],
    "mypy/memprofile.py": [
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 26,
        "src": "objs = gc.get_objects()",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "find_recursive_objects(objs)",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "for obj in objs:",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "for obj in objs:",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 1,
        "src": "if type(obj) is FakeInfo:",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if type(obj) is FakeInfo:",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 3,
        "src": "n = type(obj).__name__",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "n = type(obj).__name__",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if hasattr(obj, \"__dict__\"):",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "inferred[id(obj.__dict__)] = f\"{n} (__dict__)\"",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(obj, (Node, Type)):  # type: ignore[misc]",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": null,
        "column": 22,
        "message": "Error code changed to no-any-expr; \"type: ignore\" comment may be out of date",
        "offset": 0,
        "src": "if isinstance(obj, (Node, Type)):  # type: ignore[misc]",
        "target": null
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "for x in obj.__dict__.values():",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "for x in obj.__dict__.values():",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"dict_values[str, Any]\")",
        "offset": 0,
        "src": "for x in obj.__dict__.values():",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(x, list):",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if isinstance(x, tuple):",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 5,
        "src": "x = getattr(obj, k, None)",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(x, list):",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if isinstance(x, tuple):",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "for obj in objs:",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "for obj in objs:",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if id(obj) in inferred:",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "name = inferred[id(obj)]",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 2,
        "src": "name = type(obj).__name__",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "name = type(obj).__name__",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 59,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "memuse[name] = memuse.get(name, 0) + sys.getsizeof(obj)",
        "target": "mypy.memprofile.collect_memory_stats"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> Any\")",
        "offset": 19,
        "src": "for n, mem in sorted(memuse.items(), key=lambda x: -x[1]):",
        "target": "mypy.memprofile.print_memory_profile"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for n, mem in sorted(memuse.items(), key=lambda x: -x[1]):",
        "target": "mypy.memprofile.print_memory_profile"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for n, mem in sorted(memuse.items(), key=lambda x: -x[1]):",
        "target": "mypy.memprofile.print_memory_profile"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"type[type]\")",
        "offset": 36,
        "src": "for base in type.mro(type(obj)):",
        "target": "mypy.memprofile.find_recursive_objects"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "for slot in getattr(base, \"__slots__\", ()):",
        "target": "mypy.memprofile.find_recursive_objects"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"Any | ()\")",
        "offset": 0,
        "src": "for slot in getattr(base, \"__slots__\", ()):",
        "target": "mypy.memprofile.find_recursive_objects"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if hasattr(obj, slot):",
        "target": "mypy.memprofile.find_recursive_objects"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "visit(getattr(obj, slot))",
        "target": "mypy.memprofile.find_recursive_objects"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "visit(getattr(obj, slot))",
        "target": "mypy.memprofile.find_recursive_objects"
      }
    ],
    "mypy/messages.py": [
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 411,
        "src": "if isinstance(original_type, CallableType) and original_type.is_type_obj():",
        "target": "mypy.messages.MessageBuilder.has_no_attr"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 126,
        "src": "def unsupported_operand_types(",
        "target": "mypy.messages.MessageBuilder.unsupported_operand_types"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 14,
        "src": "if isinstance(left_type, str):",
        "target": "mypy.messages.MessageBuilder.unsupported_operand_types"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "left_str = format_type(left_type)",
        "target": "mypy.messages.MessageBuilder.unsupported_operand_types"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if isinstance(right_type, str):",
        "target": "mypy.messages.MessageBuilder.unsupported_operand_types"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "right_str = format_type(right_type)",
        "target": "mypy.messages.MessageBuilder.unsupported_operand_types"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"(type[Instance], type[TupleType], type[TypedDictType], type[TypeType], type[CallableType])\")",
        "offset": 289,
        "src": "original_caller_type, (Instance, TupleType, TypedDictType, TypeType, CallableType)",
        "target": "mypy.messages.MessageBuilder.incompatible_argument_note"
      },
      {
        "code": "no-any-expr",
        "column": 81,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 0,
        "src": "original_caller_type, (Instance, TupleType, TypedDictType, TypeType, CallableType)",
        "target": "mypy.messages.MessageBuilder.incompatible_argument_note"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 13,
        "src": "if isinstance(callee_type, CallableType) and isinstance(original_caller_type, Instance):",
        "target": "mypy.messages.MessageBuilder.incompatible_argument_note"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 18,
        "src": "isinstance(callee_type, CallableType)",
        "target": "mypy.messages.MessageBuilder.maybe_note_concatenate_pos_args"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 1,
        "src": "and isinstance(original_caller_type, CallableType)",
        "target": "mypy.messages.MessageBuilder.maybe_note_concatenate_pos_args"
      },
      {
        "code": "possibly-undefined",
        "column": 18,
        "message": "Name \"msg\" may be undefined",
        "offset": 87,
        "src": "self.fail(msg, context)",
        "target": "mypy.messages"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 14,
        "src": "first_arg = callee.def_extras.get(\"first_arg\")",
        "target": "mypy.messages.MessageBuilder.maybe_note_about_special_args"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "first_arg = callee.def_extras.get(\"first_arg\")",
        "target": "mypy.messages.MessageBuilder.maybe_note_about_special_args"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "if first_arg and first_arg not in {\"self\", \"cls\", \"mcs\"}:",
        "target": "mypy.messages.MessageBuilder.maybe_note_about_special_args"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | None | bool\")",
        "offset": 0,
        "src": "if first_arg and first_arg not in {\"self\", \"cls\", \"mcs\"}:",
        "target": "mypy.messages.MessageBuilder.maybe_note_about_special_args"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if first_arg and first_arg not in {\"self\", \"cls\", \"mcs\"}:",
        "target": "mypy.messages.MessageBuilder.maybe_note_about_special_args"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 186,
        "src": "and isinstance(original, (CallableType, Overloaded))",
        "target": "mypy.messages.MessageBuilder.signature_incompatible_with_supertype"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"(type[CallableType], type[Overloaded])\")",
        "offset": 0,
        "src": "and isinstance(original, (CallableType, Overloaded))",
        "target": "mypy.messages.MessageBuilder.signature_incompatible_with_supertype"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 2,
        "src": "and isinstance(override, (CallableType, Overloaded))",
        "target": "mypy.messages.MessageBuilder.signature_incompatible_with_supertype"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"(type[CallableType], type[Overloaded])\")",
        "offset": 0,
        "src": "and isinstance(override, (CallableType, Overloaded))",
        "target": "mypy.messages.MessageBuilder.signature_incompatible_with_supertype"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 32,
        "src": "if isinstance(tp, CallableType):",
        "target": "mypy.messages.MessageBuilder.pretty_callable_or_overload"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 240,
        "src": "if isinstance(old_type, (CallableType, Overloaded)) and isinstance(",
        "target": "mypy.messages.MessageBuilder.incompatible_conditional_function_def"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"(type[CallableType], type[Overloaded])\")",
        "offset": 0,
        "src": "if isinstance(old_type, (CallableType, Overloaded)) and isinstance(",
        "target": "mypy.messages.MessageBuilder.incompatible_conditional_function_def"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 1,
        "src": "new_type, (CallableType, Overloaded)",
        "target": "mypy.messages.MessageBuilder.incompatible_conditional_function_def"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"(type[CallableType], type[Overloaded])\")",
        "offset": 0,
        "src": "new_type, (CallableType, Overloaded)",
        "target": "mypy.messages.MessageBuilder.incompatible_conditional_function_def"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> Any\")",
        "offset": 196,
        "src": "sorted_locals = dict(sorted(type_map.items(), key=lambda t: t[0]))",
        "target": "mypy.messages.MessageBuilder.reveal_locals"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> str\")",
        "offset": 0,
        "src": "sorted_locals = dict(sorted(type_map.items(), key=lambda t: t[0]))",
        "target": "mypy.messages.MessageBuilder.reveal_locals"
      },
      {
        "code": "no-any-expr",
        "column": 68,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "sorted_locals = dict(sorted(type_map.items(), key=lambda t: t[0]))",
        "target": "mypy.messages.MessageBuilder.reveal_locals"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Statement is unreachable",
        "offset": 359,
        "src": "return",
        "target": "mypy.messages.MessageBuilder.report_protocol_problems"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Statement is unreachable",
        "offset": 4,
        "src": "return",
        "target": "mypy.messages.MessageBuilder.report_protocol_problems"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 7,
        "src": "elif isinstance(subtype, CallableType):",
        "target": "mypy.messages.MessageBuilder.report_protocol_problems"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 55,
        "src": "if not isinstance(exp, (CallableType, Overloaded)) or not isinstance(",
        "target": "mypy.messages.MessageBuilder.report_protocol_problems"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"(type[CallableType], type[Overloaded])\")",
        "offset": 0,
        "src": "if not isinstance(exp, (CallableType, Overloaded)) or not isinstance(",
        "target": "mypy.messages.MessageBuilder.report_protocol_problems"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 1,
        "src": "got, (CallableType, Overloaded)",
        "target": "mypy.messages.MessageBuilder.report_protocol_problems"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"(type[CallableType], type[Overloaded])\")",
        "offset": 0,
        "src": "got, (CallableType, Overloaded)",
        "target": "mypy.messages.MessageBuilder.report_protocol_problems"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 10,
        "src": "if isinstance(exp, CallableType):",
        "target": "mypy.messages.MessageBuilder.report_protocol_problems"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 13,
        "src": "if isinstance(got, CallableType):",
        "target": "mypy.messages.MessageBuilder.report_protocol_problems"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 94,
        "src": "def print_more(",
        "target": "mypy.messages.MessageBuilder.print_more"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Sequence[Any]\")",
        "offset": 9,
        "src": "if len(conflicts) > max_items:",
        "target": "mypy.messages.MessageBuilder.print_more"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"Sequence[Any]\")",
        "offset": 2,
        "src": "f\"<{len(conflicts) - max_items} more conflict(s) not shown>\",",
        "target": "mypy.messages.MessageBuilder.print_more"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 325,
        "src": "elif isinstance(func, CallableType):",
        "target": "mypy.messages.format_type_inner"
      },
      {
        "code": "possibly-undefined",
        "column": 21,
        "message": "Name \"strs\" may be undefined",
        "offset": 135,
        "src": "return tuple(strs)",
        "target": "mypy.messages"
      },
      {
        "code": "possibly-undefined",
        "column": 51,
        "message": "Name \"strs\" may be undefined",
        "offset": 2,
        "src": "return tuple(quote_type_string(s) for s in strs)",
        "target": "mypy.messages"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 70,
        "src": "first_arg = tp.def_extras.get(\"first_arg\")",
        "target": "mypy.messages.pretty_callable"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "first_arg = tp.def_extras.get(\"first_arg\")",
        "target": "mypy.messages.pretty_callable"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "if first_arg:",
        "target": "mypy.messages.pretty_callable"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "s = first_arg + s",
        "target": "mypy.messages.pretty_callable"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> (float, Any)\")",
        "offset": 227,
        "src": "return sorted(options, key=lambda v: (-ratios[v], v))[:n]",
        "target": "mypy.messages.best_matches"
      }
    ],
    "mypy/metastore.py": [
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 175,
        "src": "def _query(self, name: str, field: str) -> Any:",
        "target": "mypy.metastore.SqliteMetadataStore._query"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 6,
        "src": "results = cur.fetchall()",
        "target": "mypy.metastore.SqliteMetadataStore._query"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "if not results:",
        "target": "mypy.metastore.SqliteMetadataStore._query"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "assert len(results) == 1",
        "target": "mypy.metastore.SqliteMetadataStore._query"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return results[0][0]",
        "target": "mypy.metastore.SqliteMetadataStore._query"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return results[0][0]",
        "target": "mypy.metastore.SqliteMetadataStore._query"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "mtime = self._query(name, \"mtime\")",
        "target": "mypy.metastore.SqliteMetadataStore.getmtime"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert isinstance(mtime, float)",
        "target": "mypy.metastore.SqliteMetadataStore.getmtime"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "data = self._query(name, \"data\")",
        "target": "mypy.metastore.SqliteMetadataStore.read"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert isinstance(data, str)",
        "target": "mypy.metastore.SqliteMetadataStore.read"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 31,
        "src": "for row in self.db.execute(\"SELECT path FROM files\"):",
        "target": "mypy.metastore.SqliteMetadataStore.list_all"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield row[0]",
        "target": "mypy.metastore.SqliteMetadataStore.list_all"
      }
    ],
    "mypy/modulefinder.py": [
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 590,
        "src": "metadata = tomllib.load(f)",
        "target": "mypy.modulefinder.FindModuleCache._is_compatible_stub_package"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return bool(metadata.get(\"python3\", True))",
        "target": "mypy.modulefinder.FindModuleCache._is_compatible_stub_package"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"[_T] ((...) -> _T) -> _lru_cache_wrapper[_T]\")",
        "offset": 156,
        "src": "@functools.lru_cache(maxsize=None)",
        "target": "mypy.modulefinder"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 18,
        "src": "sys_path, site_packages = ast.literal_eval(",
        "target": "mypy.modulefinder.get_search_dirs"
      }
    ],
    "mypy/moduleinspect.py": [
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 35,
        "src": "if module.__dict__.get(\"__file__\") is None:",
        "target": "mypy.moduleinspect.is_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "if module.__dict__.get(\"__file__\") is None:",
        "target": "mypy.moduleinspect.is_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"(Any, Any)\")",
        "offset": 4,
        "src": "return os.path.splitext(module.__dict__[\"__file__\"])[-1] in [\".so\", \".pyd\", \".dll\"]",
        "target": "mypy.moduleinspect.is_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return os.path.splitext(module.__dict__[\"__file__\"])[-1] in [\".so\", \".pyd\", \".dll\"]",
        "target": "mypy.moduleinspect.is_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "return os.path.splitext(module.__dict__[\"__file__\"])[-1] in [\".so\", \".pyd\", \".dll\"]",
        "target": "mypy.moduleinspect.is_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return os.path.splitext(module.__dict__[\"__file__\"])[-1] in [\".so\", \".pyd\", \".dll\"]",
        "target": "mypy.moduleinspect.is_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | str\")",
        "offset": 13,
        "src": "name = getattr(package, \"__name__\", package_id)",
        "target": "mypy.moduleinspect.get_package_properties"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "file = getattr(package, \"__file__\", None)",
        "target": "mypy.moduleinspect.get_package_properties"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 4,
        "src": "pkg_all = getattr(package, \"__all__\", None)",
        "target": "mypy.moduleinspect.get_package_properties"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "if pkg_all is not None:",
        "target": "mypy.moduleinspect.get_package_properties"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "pkg_all = list(pkg_all)",
        "target": "mypy.moduleinspect.get_package_properties"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression type contains \"Any\" (has type \"Any | str\")",
        "offset": 25,
        "src": "name=name, file=file, path=path, all=pkg_all, is_c_module=is_c, subpackages=subpackages",
        "target": "mypy.moduleinspect.get_package_properties"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "name=name, file=file, path=path, all=pkg_all, is_c_module=is_c, subpackages=subpackages",
        "target": "mypy.moduleinspect.get_package_properties"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "name=name, file=file, path=path, all=pkg_all, is_c_module=is_c, subpackages=subpackages",
        "target": "mypy.moduleinspect.get_package_properties"
      }
    ],
    "mypy/mro.py": [
      {
        "code": "possibly-undefined",
        "column": 22,
        "message": "Name \"head\" may be undefined",
        "offset": 59,
        "src": "result.append(head)",
        "target": "mypy.mro"
      }
    ],
    "mypy/nodes.py": [
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 82,
        "src": "JsonDict: _TypeAlias = Dict[str, Any]",
        "target": "mypy.nodes"
      },
      {
        "code": "unreachable",
        "column": 12,
        "message": "Statement is unreachable",
        "offset": 113,
        "src": "return repr(self)",
        "target": "mypy.nodes.Node.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 179,
        "src": "return {",
        "target": "mypy.nodes.MypyFile.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 7,
        "src": "\"future_import_flags\": list(self.future_import_flags),",
        "target": "mypy.nodes.MypyFile.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"future_import_flags\": list(self.future_import_flags),",
        "target": "mypy.nodes.MypyFile.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "assert data[\".class\"] == \"MypyFile\", data",
        "target": "mypy.nodes.MypyFile.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 191,
        "src": "return {",
        "target": "mypy.nodes.OverloadedFuncDef.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 2,
        "src": "\"items\": [i.serialize() for i in self.items],",
        "target": "mypy.nodes.OverloadedFuncDef.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"items\": [i.serialize() for i in self.items],",
        "target": "mypy.nodes.OverloadedFuncDef.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "assert data[\".class\"] == \"OverloadedFuncDef\"",
        "target": "mypy.nodes.OverloadedFuncDef.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "[cast(OverloadPart, SymbolNode.deserialize(d)) for d in data[\"items\"]]",
        "target": "mypy.nodes.OverloadedFuncDef.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[cast(OverloadPart, SymbolNode.deserialize(d)) for d in data[\"items\"]]",
        "target": "mypy.nodes.OverloadedFuncDef.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 117,
        "src": "return self.type is None or isinstance(self.type, CallableType) and self.type.implicit",
        "target": "mypy.nodes.FuncItem.is_dynamic"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 78,
        "src": "return {",
        "target": "mypy.nodes.FuncDef.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 5,
        "src": "\"arg_kinds\": [int(x.value) for x in self.arg_kinds],",
        "target": "mypy.nodes.FuncDef.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"arg_kinds\": [int(x.value) for x in self.arg_kinds],",
        "target": "mypy.nodes.FuncDef.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 14,
        "src": "assert data[\".class\"] == \"FuncDef\"",
        "target": "mypy.nodes.FuncDef.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 16,
        "src": "ret.arg_kinds = [ArgKind(x) for x in data[\"arg_kinds\"]]",
        "target": "mypy.nodes.FuncDef.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ret.arg_kinds = [ArgKind(x) for x in data[\"arg_kinds\"]]",
        "target": "mypy.nodes.FuncDef.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 69,
        "src": "return {",
        "target": "mypy.nodes.Decorator.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "assert data[\".class\"] == \"Decorator\"",
        "target": "mypy.nodes.Decorator.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 146,
        "src": "assert data[\".class\"] == \"Var\"",
        "target": "mypy.nodes.Var.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 93,
        "src": "return {",
        "target": "mypy.nodes.ClassDef.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 4,
        "src": "\"type_vars\": [v.serialize() for v in self.type_vars],",
        "target": "mypy.nodes.ClassDef.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"type_vars\": [v.serialize() for v in self.type_vars],",
        "target": "mypy.nodes.ClassDef.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "assert data[\".class\"] == \"ClassDef\"",
        "target": "mypy.nodes.ClassDef.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "cast(mypy.types.TypeVarLikeType, mypy.types.deserialize_type(v))",
        "target": "mypy.nodes.ClassDef.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 77,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "cast(mypy.types.TypeVarLikeType, mypy.types.deserialize_type(v))",
        "target": "mypy.nodes.ClassDef.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1346,
        "src": "return {",
        "target": "mypy.nodes.TypeVarExpr.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 4,
        "src": "\"values\": [t.serialize() for t in self.values],",
        "target": "mypy.nodes.TypeVarExpr.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"values\": [t.serialize() for t in self.values],",
        "target": "mypy.nodes.TypeVarExpr.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "assert data[\".class\"] == \"TypeVarExpr\"",
        "target": "mypy.nodes.TypeVarExpr.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "[mypy.types.deserialize_type(v) for v in data[\"values\"]],",
        "target": "mypy.nodes.TypeVarExpr.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[mypy.types.deserialize_type(v) for v in data[\"values\"]],",
        "target": "mypy.nodes.TypeVarExpr.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 15,
        "src": "return {",
        "target": "mypy.nodes.ParamSpecExpr.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 10,
        "src": "assert data[\".class\"] == \"ParamSpecExpr\"",
        "target": "mypy.nodes.ParamSpecExpr.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 33,
        "src": "return {",
        "target": "mypy.nodes.TypeVarTupleExpr.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 11,
        "src": "assert data[\".class\"] == \"TypeVarTupleExpr\"",
        "target": "mypy.nodes.TypeVarTupleExpr.deserialize"
      },
      {
        "code": "unreachable",
        "column": 20,
        "message": "Statement is unreachable",
        "offset": 536,
        "src": "return node",
        "target": "mypy.nodes.TypeInfo.get_method"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 153,
        "src": "ti.abstract_attributes = [(attr[0], attr[1]) for attr in data[\"abstract_attributes\"]]",
        "target": "mypy.nodes.TypeInfo.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ti.abstract_attributes = [(attr[0], attr[1]) for attr in data[\"abstract_attributes\"]]",
        "target": "mypy.nodes.TypeInfo.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"(Any, Any)\")",
        "offset": 0,
        "src": "ti.abstract_attributes = [(attr[0], attr[1]) for attr in data[\"abstract_attributes\"]]",
        "target": "mypy.nodes.TypeInfo.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ti.abstract_attributes = [(attr[0], attr[1]) for attr in data[\"abstract_attributes\"]]",
        "target": "mypy.nodes.TypeInfo.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "ti.bases = [mypy.types.Instance.deserialize(b) for b in data[\"bases\"]]",
        "target": "mypy.nodes.TypeInfo.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ti.bases = [mypy.types.Instance.deserialize(b) for b in data[\"bases\"]]",
        "target": "mypy.nodes.TypeInfo.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "for p in data[\"_promote\"]:",
        "target": "mypy.nodes.TypeInfo.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "t = mypy.types.deserialize_type(p)",
        "target": "mypy.nodes.TypeInfo.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 83,
        "src": "return object.__getattribute__(self, attr)  # type: ignore[no-any-return]",
        "target": "mypy.nodes.FakeInfo.__getattribute__"
      },
      {
        "code": null,
        "column": 19,
        "message": "Error code \"no-any-expr\" not covered by \"type: ignore\" comment",
        "offset": 0,
        "src": "return object.__getattribute__(self, attr)  # type: ignore[no-any-return]",
        "target": null
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "raise AssertionError(object.__getattribute__(self, \"msg\"))",
        "target": "mypy.nodes.FakeInfo.__getattribute__"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 185,
        "src": "\"alias_tvars\": [v.serialize() for v in self.alias_tvars],",
        "target": "mypy.nodes.TypeAlias.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"alias_tvars\": [v.serialize() for v in self.alias_tvars],",
        "target": "mypy.nodes.TypeAlias.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 13,
        "src": "assert data[\".class\"] == \"TypeAlias\"",
        "target": "mypy.nodes.TypeAlias.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "alias_tvars = [mypy.types.deserialize_type(v) for v in data[\"alias_tvars\"]]",
        "target": "mypy.nodes.TypeAlias.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "alias_tvars = [mypy.types.deserialize_type(v) for v in data[\"alias_tvars\"]]",
        "target": "mypy.nodes.TypeAlias.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 253,
        "src": "assert data[\".class\"] == \"SymbolTableNode\"",
        "target": "mypy.nodes.SymbolTableNode.deserialize"
      },
      {
        "code": "unreachable",
        "column": 16,
        "message": "Statement is unreachable",
        "offset": 40,
        "src": "a.append(\"  <invalid item>\")",
        "target": "mypy.nodes.SymbolTable.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 23,
        "src": "assert data[\".class\"] == \"SymbolTable\"",
        "target": "mypy.nodes.SymbolTable.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 39,
        "src": "return {",
        "target": "mypy.nodes.DataclassTransformSpec.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 5,
        "src": "\"field_specifiers\": list(self.field_specifiers),",
        "target": "mypy.nodes.DataclassTransformSpec.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"field_specifiers\": list(self.field_specifiers),",
        "target": "mypy.nodes.DataclassTransformSpec.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 64,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any (from a limitation)]\")",
        "offset": 10,
        "src": "field_specifiers=tuple(data.get(\"field_specifiers\", [])),",
        "target": "mypy.nodes.DataclassTransformSpec.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "return [name for name in names if getattr(node, name)]",
        "target": "mypy.nodes.get_flags"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 24,
        "src": "deserialize_map: Final = {",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "deserialize_map: Final = {",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "for key, obj in globals().items()",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict_items[str, Any]\")",
        "offset": 0,
        "src": "for key, obj in globals().items()",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 1,
        "src": "if type(obj) is not FakeInfo",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if type(obj) is not FakeInfo",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "and isinstance(obj, type)",
        "target": "mypy.nodes"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"type[type]\")",
        "offset": 0,
        "src": "and isinstance(obj, type)",
        "target": "mypy.nodes"
      }
    ],
    "mypy/options.py": [
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 357,
        "src": "self.transform_source: Callable[[Any], Any] | None = None",
        "target": "mypy.options.Options.__init__"
      },
      {
        "code": "var-annotated",
        "column": 12,
        "message": "Need type annotation for \"d\"",
        "offset": 40,
        "src": "d = dict(getattr(self, \"__dict__\", ()))",
        "target": "mypy.options.Options.snapshot"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"Any | ()\")",
        "offset": 0,
        "src": "d = dict(getattr(self, \"__dict__\", ()))",
        "target": "mypy.options.Options.snapshot"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "d[k] = getattr(self, k)",
        "target": "mypy.options.Options.snapshot"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "d = {k: v for k, v in d.items() if not k.startswith(\"_\")}",
        "target": "mypy.options.Options.snapshot"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 134,
        "src": "val = getattr(self, opt)",
        "target": "mypy.options.Options.select_options_affecting_cache"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "val = sorted([code.code for code in val])",
        "target": "mypy.options.Options.select_options_affecting_cache"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = sorted([code.code for code in val])",
        "target": "mypy.options.Options.select_options_affecting_cache"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "val = sorted([code.code for code in val])",
        "target": "mypy.options.Options.select_options_affecting_cache"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = sorted([code.code for code in val])",
        "target": "mypy.options.Options.select_options_affecting_cache"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "result[opt] = val",
        "target": "mypy.options.Options.select_options_affecting_cache"
      }
    ],
    "mypy/parse.py": [
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"(Any) -> Any | None\")",
        "offset": 18,
        "src": "if options.transform_source is not None:",
        "target": "mypy.parse.parse"
      }
    ],
    "mypy/partially_defined.py": [
      {
        "code": "truthy-bool",
        "column": 15,
        "message": "Member \"else_body\" has type \"Block\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 602,
        "src": "if o.else_body:",
        "target": "mypy.partially_defined.PossiblyUndefinedVariableVisitor.visit_while_stmt"
      }
    ],
    "mypy/plugin.py": [
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 386,
        "src": "def add_symbol_table_node(self, name: str, stnode: SymbolTableNode) -> Any:",
        "target": "mypy.plugin.SemanticAnalyzerPluginInterface.add_symbol_table_node"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(SemanticAnalyzerPluginInterface, str, SymbolTableNode) -> Any\")",
        "offset": 0,
        "src": "def add_symbol_table_node(self, name: str, stnode: SymbolTableNode) -> Any:",
        "target": "mypy.plugin"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 157,
        "src": "def report_config_data(self, ctx: ReportConfigContext) -> Any:",
        "target": "mypy.plugin.Plugin.report_config_data"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 289,
        "src": "def report_config_data(self, ctx: ReportConfigContext) -> Any:",
        "target": "mypy.plugin.ChainedPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "config_data = [plugin.report_config_data(ctx) for plugin in self._plugins]",
        "target": "mypy.plugin.ChainedPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "config_data = [plugin.report_config_data(ctx) for plugin in self._plugins]",
        "target": "mypy.plugin.ChainedPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return config_data if any(x is not None for x in config_data) else None",
        "target": "mypy.plugin.ChainedPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[Any] | None\")",
        "offset": 0,
        "src": "return config_data if any(x is not None for x in config_data) else None",
        "target": "mypy.plugin.ChainedPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return config_data if any(x is not None for x in config_data) else None",
        "target": "mypy.plugin.ChainedPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "return config_data if any(x is not None for x in config_data) else None",
        "target": "mypy.plugin.ChainedPlugin.report_config_data"
      }
    ],
    "mypy/plugins/attrs.py": [
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 159,
        "src": "return {",
        "target": "mypy.plugins.attrs.Attribute.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 112,
        "src": "ctx.cls.info.metadata[\"attrs_tag\"] = {}",
        "target": "mypy.plugins.attrs.attr_tag_callback"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 58,
        "src": "ctx.cls.info.metadata[\"attrs\"] = {",
        "target": "mypy.plugins.attrs.attr_class_maker_callback"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"attributes\": [attr.serialize() for attr in attributes],",
        "target": "mypy.plugins.attrs.attr_class_maker_callback"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"attributes\": [attr.serialize() for attr in attributes],",
        "target": "mypy.plugins.attrs.attr_class_maker_callback"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 72,
        "src": "for data in super_info.metadata[\"attrs\"][\"attributes\"]:",
        "target": "mypy.plugins.attrs._analyze_class"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if data[\"name\"] not in taken_attr_names:",
        "target": "mypy.plugins.attrs._analyze_class"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "a = Attribute.deserialize(super_info, data, ctx.api)",
        "target": "mypy.plugins.attrs._analyze_class"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 31,
        "src": "info.metadata[\"attrs\"] = {\"attributes\": [], \"frozen\": False}",
        "target": "mypy.plugins.attrs._add_empty_metadata"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 0,
        "src": "info.metadata[\"attrs\"] = {\"attributes\": [], \"frozen\": False}",
        "target": "mypy.plugins.attrs._add_empty_metadata"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "info.metadata[\"attrs\"] = {\"attributes\": [], \"frozen\": False}",
        "target": "mypy.plugins.attrs._add_empty_metadata"
      },
      {
        "code": "truthy-bool",
        "column": 12,
        "message": "Expression has type \"Expression\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 194,
        "src": "and converter_expr.args[0]",
        "target": "mypy.plugins.attrs._parse_converter"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 41,
        "src": "if isinstance(converter_type, CallableType) and converter_type.arg_types:",
        "target": "mypy.plugins.attrs._parse_converter"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 122,
        "src": "getattr(arg.variable.type, \"type_of_any\", None) == TypeOfAny.unannotated",
        "target": "mypy.plugins.attrs._add_init"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "getattr(arg.variable.type, \"type_of_any\", None) == TypeOfAny.unannotated",
        "target": "mypy.plugins.attrs._add_init"
      },
      {
        "code": "no-any-expr",
        "column": 80,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 113,
        "src": "if not isinstance(init_method, FuncDef) or not isinstance(init_method.type, CallableType):",
        "target": "mypy.plugins.attrs._get_attrs_init_type"
      }
    ],
    "mypy/plugins/common.py": [
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 108,
        "src": "elif isinstance(callee_node_type, CallableType):",
        "target": "mypy.plugins.common._get_callee_type"
      }
    ],
    "mypy/plugins/dataclasses.py": [
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 135,
        "src": "return {",
        "target": "mypy.plugins.dataclasses.DataclassAttribute.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 202,
        "src": "info.metadata[\"dataclass\"] = {",
        "target": "mypy.plugins.dataclasses.DataclassTransformer.transform"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"attributes\": [attr.serialize() for attr in attributes],",
        "target": "mypy.plugins.dataclasses.DataclassTransformer.transform"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"attributes\": [attr.serialize() for attr in attributes],",
        "target": "mypy.plugins.dataclasses.DataclassTransformer.transform"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 107,
        "src": "for data in info.metadata[\"dataclass\"][\"attributes\"]:",
        "target": "mypy.plugins.dataclasses.DataclassTransformer.collect_attributes"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "name: str = data[\"name\"]",
        "target": "mypy.plugins.dataclasses.DataclassTransformer.collect_attributes"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "attr = DataclassAttribute.deserialize(info, data, self._api)",
        "target": "mypy.plugins.dataclasses.DataclassTransformer.collect_attributes"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> Any\")",
        "offset": 151,
        "src": "all_attrs.sort(key=lambda a: a.kw_only)",
        "target": "mypy.plugins.dataclasses.DataclassTransformer.collect_attributes"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "all_attrs.sort(key=lambda a: a.kw_only)",
        "target": "mypy.plugins.dataclasses.DataclassTransformer.collect_attributes"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 69,
        "src": "if isinstance(get_proper_type(attr.type), CallableType):",
        "target": "mypy.plugins.dataclasses.DataclassTransformer._propertize_callables"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 93,
        "src": "info.metadata[\"dataclass_tag\"] = {}",
        "target": "mypy.plugins.dataclasses.add_dataclass_tag"
      }
    ],
    "mypy/plugins/default.py": [
      {
        "code": "unreachable",
        "column": 20,
        "message": "Intersection of \"TupleType & LiteralType\" cannot exist: would have incompatible method signatures",
        "offset": 465,
        "src": "elif isinstance(ctx.type, LiteralType):",
        "target": "mypy.plugins.default.tuple_mul_callback"
      },
      {
        "code": "unreachable",
        "column": 8,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "value = arg_type.value",
        "target": "mypy.plugins.default.tuple_mul_callback"
      }
    ],
    "mypy/plugins/enums.py": [
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 98,
        "src": "if isinstance(node_type, CallableType):",
        "target": "mypy.plugins.enums._infer_value_type_with_auto_fallback"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 75,
        "src": "if t is None or not isinstance(t, CallableType)",
        "target": "mypy.plugins.enums.enum_value_callback"
      }
    ],
    "mypy/plugins/functools.py": [
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> (bool, Any)\")",
        "offset": 35,
        "src": "root = max(comparison_methods, key=lambda k: (comparison_methods[k] is None, k))",
        "target": "mypy.plugins.functools.functools_total_ordering_maker_callback"
      },
      {
        "code": "unreachable",
        "column": 50,
        "message": "Right operand of \"and\" is never evaluated",
        "offset": 57,
        "src": "if isinstance(node, FuncItem) and isinstance(node.type, CallableType):",
        "target": "mypy.plugins.functools._analyze_class"
      },
      {
        "code": "unreachable",
        "column": 20,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "comparison_methods[name] = _MethodInfo(node.is_static, node.type)",
        "target": "mypy.plugins.functools._analyze_class"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 5,
        "src": "if isinstance(proper_type, CallableType):",
        "target": "mypy.plugins.functools._analyze_class"
      }
    ],
    "mypy/plugins/singledispatch.py": [
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 101,
        "src": "if isinstance(func_type, CallableType):",
        "target": "mypy.plugins.singledispatch.create_singledispatch_function_callback"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 30,
        "src": "if isinstance(first_arg_type, (CallableType, Overloaded)) and first_arg_type.is_type_obj():",
        "target": "mypy.plugins.singledispatch.singledispatch_register_callback"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"(type[CallableType], type[Overloaded])\")",
        "offset": 0,
        "src": "if isinstance(first_arg_type, (CallableType, Overloaded)) and first_arg_type.is_type_obj():",
        "target": "mypy.plugins.singledispatch.singledispatch_register_callback"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 13,
        "src": "elif isinstance(first_arg_type, CallableType):",
        "target": "mypy.plugins.singledispatch.singledispatch_register_callback"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 19,
        "src": "if not isinstance(func, CallableType):",
        "target": "mypy.plugins.singledispatch.register_function"
      }
    ],
    "mypy/pyinfo.py": [
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | str\")",
        "offset": 45,
        "src": "getattr(sys, \"platlibdir\", \"lib\"),",
        "target": "mypy.pyinfo.getsyspath"
      }
    ],
    "mypy/report.py": [
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> Any\")",
        "offset": 287,
        "src": "rows.sort(key=lambda x: x[0])",
        "target": "mypy.report.AnyExpressionsReporter._report_any_exprs"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "rows.sort(key=lambda x: x[0])",
        "target": "mypy.report.AnyExpressionsReporter._report_any_exprs"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> Any\")",
        "offset": 15,
        "src": "rows.sort(key=lambda x: x[0])",
        "target": "mypy.report.AnyExpressionsReporter._report_types_of_anys"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "rows.sort(key=lambda x: x[0])",
        "target": "mypy.report.AnyExpressionsReporter._report_types_of_anys"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"dict[Any, Any]\")",
        "offset": 135,
        "src": "json.dump({\"lines\": self.lines_covered}, f)",
        "target": "mypy.report.LineCoverageReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 32,
        "src": "self.schema = etree.XMLSchema(etree.parse(xsd_path))",
        "target": "mypy.report.MemoryXmlReporter.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "self.schema = etree.XMLSchema(etree.parse(xsd_path))",
        "target": "mypy.report.MemoryXmlReporter.__init__"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "self.last_xml: Any | None = None",
        "target": "mypy.report.MemoryXmlReporter.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 34,
        "src": "root = etree.Element(\"mypy-report-file\", name=path, module=tree._fullname)",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "doc = etree.ElementTree(root)",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "doc = etree.ElementTree(root)",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 6,
        "src": "etree.SubElement(",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "root,",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 9,
        "src": "transform_pi = etree.ProcessingInstruction(",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 3,
        "src": "root.addprevious(transform_pi)",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "root.addprevious(transform_pi)",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "self.schema.assertValid(doc)",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "self.schema.assertValid(doc)",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 2,
        "src": "self.last_xml = doc",
        "target": "mypy.report.MemoryXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> Any\")",
        "offset": 19,
        "src": "output_files = sorted(self.files, key=lambda x: x.module)",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "output_files = sorted(self.files, key=lambda x: x.module)",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 2,
        "src": "root = etree.Element(\"mypy-report-index\", name=\"index\")",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "doc = etree.ElementTree(root)",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "doc = etree.ElementTree(root)",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 3,
        "src": "etree.SubElement(",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "root,",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 8,
        "src": "transform_pi = etree.ProcessingInstruction(",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 3,
        "src": "root.addprevious(transform_pi)",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "root.addprevious(transform_pi)",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "self.schema.assertValid(doc)",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "self.schema.assertValid(doc)",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 2,
        "src": "self.last_xml = doc",
        "target": "mypy.report.MemoryXmlReporter.on_finish"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 18,
        "src": "self.classes: dict[str, Any] = {}",
        "target": "mypy.report.CoberturaPackage.__init__"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 5,
        "src": "def as_xml(self) -> Any:",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "package_element = etree.Element(\"package\", complexity=\"1.0\", name=self.name)",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "package_element.attrib[\"branch-rate\"] = \"0\"",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "package_element.attrib[\"line-rate\"] = get_line_rate(self.covered_lines, self.total_lines)",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "classes_element = etree.SubElement(package_element, \"classes\")",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "classes_element = etree.SubElement(package_element, \"classes\")",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "for class_name in sorted(self.classes):",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "classes_element.append(self.classes[class_name])",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "classes_element.append(self.classes[class_name])",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "classes_element.append(self.classes[class_name])",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "self.add_packages(package_element)",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "return package_element",
        "target": "mypy.report.CoberturaPackage.as_xml"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 2,
        "src": "def add_packages(self, parent_element: Any) -> None:",
        "target": "mypy.report.CoberturaPackage.add_packages"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 2,
        "src": "packages_element = etree.SubElement(parent_element, \"packages\")",
        "target": "mypy.report.CoberturaPackage.add_packages"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "packages_element = etree.SubElement(parent_element, \"packages\")",
        "target": "mypy.report.CoberturaPackage.add_packages"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression type contains \"Any\" (has type \"attrgetter[Any]\")",
        "offset": 1,
        "src": "for package in sorted(self.packages.values(), key=attrgetter(\"name\")):",
        "target": "mypy.report.CoberturaPackage.add_packages"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "packages_element.append(package.as_xml())",
        "target": "mypy.report.CoberturaPackage.add_packages"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "packages_element.append(package.as_xml())",
        "target": "mypy.report.CoberturaPackage.add_packages"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 9,
        "src": "self.root = etree.Element(",
        "target": "mypy.report.CoberturaXmlReporter.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 3,
        "src": "self.doc = etree.ElementTree(self.root)",
        "target": "mypy.report.CoberturaXmlReporter.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "self.doc = etree.ElementTree(self.root)",
        "target": "mypy.report.CoberturaXmlReporter.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 22,
        "src": "class_element = etree.Element(\"class\", complexity=\"1.0\", filename=path, name=class_name)",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "etree.SubElement(class_element, \"methods\")",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "etree.SubElement(class_element, \"methods\")",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "lines_element = etree.SubElement(class_element, \"lines\")",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "lines_element = etree.SubElement(class_element, \"lines\")",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 17,
        "src": "line_element = etree.SubElement(",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "lines_element,",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 8,
        "src": "line_element.attrib[\"condition-coverage\"] = \"50% (1/2)\"",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "class_element.attrib[\"branch-rate\"] = \"0\"",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "class_element.attrib[\"line-rate\"] = get_line_rate(class_lines_covered, class_total_lines)",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 15,
        "src": "current_package.classes[class_name] = class_element",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "current_package.classes[class_name] = class_element",
        "target": "mypy.report.CoberturaXmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 3,
        "src": "self.root.attrib[\"line-rate\"] = get_line_rate(",
        "target": "mypy.report.CoberturaXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 3,
        "src": "self.root.attrib[\"branch-rate\"] = \"0\"",
        "target": "mypy.report.CoberturaXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "sources = etree.SubElement(self.root, \"sources\")",
        "target": "mypy.report.CoberturaXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "sources = etree.SubElement(self.root, \"sources\")",
        "target": "mypy.report.CoberturaXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "source_element = etree.SubElement(sources, \"source\")",
        "target": "mypy.report.CoberturaXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "source_element = etree.SubElement(sources, \"source\")",
        "target": "mypy.report.CoberturaXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "source_element.text = os.getcwd()",
        "target": "mypy.report.CoberturaXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "self.root_package.add_packages(self.root)",
        "target": "mypy.report.CoberturaXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 2,
        "src": "self.doc.write(out_path, encoding=\"utf-8\", pretty_print=True)",
        "target": "mypy.report.CoberturaXmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 36,
        "src": "last_xml = self.memory_xml.last_xml",
        "target": "mypy.report.XmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "if last_xml is None:",
        "target": "mypy.report.XmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "last_xml.write(out_path, encoding=\"utf-8\")",
        "target": "mypy.report.XmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 3,
        "src": "last_xml = self.memory_xml.last_xml",
        "target": "mypy.report.XmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "assert last_xml is not None",
        "target": "mypy.report.XmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "last_xml.write(out_path, encoding=\"utf-8\")",
        "target": "mypy.report.XmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 19,
        "src": "self.xslt_html = etree.XSLT(etree.parse(self.memory_xml.xslt_html_path))",
        "target": "mypy.report.XsltHtmlReporter.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "self.xslt_html = etree.XSLT(etree.parse(self.memory_xml.xslt_html_path))",
        "target": "mypy.report.XsltHtmlReporter.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 1,
        "src": "self.param_html = etree.XSLT.strparam(\"html\")",
        "target": "mypy.report.XsltHtmlReporter.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 9,
        "src": "last_xml = self.memory_xml.last_xml",
        "target": "mypy.report.XsltHtmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "if last_xml is None:",
        "target": "mypy.report.XsltHtmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 7,
        "src": "transformed_html = bytes(self.xslt_html(last_xml, ext=self.param_html))",
        "target": "mypy.report.XsltHtmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "transformed_html = bytes(self.xslt_html(last_xml, ext=self.param_html))",
        "target": "mypy.report.XsltHtmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "transformed_html = bytes(self.xslt_html(last_xml, ext=self.param_html))",
        "target": "mypy.report.XsltHtmlReporter.on_file"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 5,
        "src": "last_xml = self.memory_xml.last_xml",
        "target": "mypy.report.XsltHtmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "assert last_xml is not None",
        "target": "mypy.report.XsltHtmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 3,
        "src": "transformed_html = bytes(self.xslt_html(last_xml, ext=self.param_html))",
        "target": "mypy.report.XsltHtmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "transformed_html = bytes(self.xslt_html(last_xml, ext=self.param_html))",
        "target": "mypy.report.XsltHtmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "transformed_html = bytes(self.xslt_html(last_xml, ext=self.param_html))",
        "target": "mypy.report.XsltHtmlReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 19,
        "src": "self.xslt_txt = etree.XSLT(etree.parse(self.memory_xml.xslt_txt_path))",
        "target": "mypy.report.XsltTxtReporter.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "self.xslt_txt = etree.XSLT(etree.parse(self.memory_xml.xslt_txt_path))",
        "target": "mypy.report.XsltTxtReporter.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 12,
        "src": "last_xml = self.memory_xml.last_xml",
        "target": "mypy.report.XsltTxtReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "assert last_xml is not None",
        "target": "mypy.report.XsltTxtReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 2,
        "src": "transformed_txt = bytes(self.xslt_txt(last_xml))",
        "target": "mypy.report.XsltTxtReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "transformed_txt = bytes(self.xslt_txt(last_xml))",
        "target": "mypy.report.XsltTxtReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> Any\")",
        "offset": 67,
        "src": "output_files = sorted(self.files, key=lambda x: x.module)",
        "target": "mypy.report.LinePrecisionReporter.on_finish"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "output_files = sorted(self.files, key=lambda x: x.module)",
        "target": "mypy.report.LinePrecisionReporter.on_finish"
      }
    ],
    "mypy/scope.py": [
      {
        "code": "truthy-bool",
        "column": 19,
        "message": "Member \"function\" has type \"FuncBase\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 78,
        "src": "assert self.function",
        "target": "mypy.scope.Scope.function_scope"
      }
    ],
    "mypy/semanal.py": [
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 846,
        "src": "assert isinstance(defn.type, CallableType)",
        "target": "mypy.semanal.SemanticAnalyzer.analyze_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 13,
        "src": "assert isinstance(defn.type, CallableType)",
        "target": "mypy.semanal.SemanticAnalyzer.analyze_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 15,
        "src": "assert isinstance(defn.type, CallableType)",
        "target": "mypy.semanal.SemanticAnalyzer.analyze_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 21,
        "src": "assert isinstance(defn.type, CallableType)",
        "target": "mypy.semanal.SemanticAnalyzer.analyze_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 11,
        "src": "if isinstance(result, CallableType):",
        "target": "mypy.semanal.SemanticAnalyzer.analyze_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 25,
        "src": "assert isinstance(defn.type, CallableType)",
        "target": "mypy.semanal.SemanticAnalyzer.analyze_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 27,
        "src": "and isinstance(defn.type, CallableType)",
        "target": "mypy.semanal.SemanticAnalyzer.analyze_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 52,
        "src": "elif isinstance(functype, CallableType):",
        "target": "mypy.semanal.SemanticAnalyzer.prepare_method_signature"
      },
      {
        "code": "no-any-expr",
        "column": 72,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 11,
        "src": "elif has_self_type and isinstance(func.unanalyzed_type, CallableType):",
        "target": "mypy.semanal.SemanticAnalyzer.prepare_method_signature"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 130,
        "src": "assert isinstance(typ, CallableType)",
        "target": "mypy.semanal.SemanticAnalyzer.analyze_overloaded_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 73,
        "src": "assert isinstance(callable, CallableType)",
        "target": "mypy.semanal.SemanticAnalyzer.analyze_overload_sigs_and_impl"
      },
      {
        "code": "no-any-expr",
        "column": 64,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 162,
        "src": "if isinstance(first_item.func.type, CallableType):",
        "target": "mypy.semanal.SemanticAnalyzer.analyze_property_with_multi_part_definition"
      },
      {
        "code": "no-any-expr",
        "column": 64,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 5,
        "src": "elif isinstance(item.func.type, CallableType):",
        "target": "mypy.semanal.SemanticAnalyzer.analyze_property_with_multi_part_definition"
      },
      {
        "code": "no-any-expr",
        "column": 64,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 13,
        "src": "elif isinstance(item.func.type, CallableType):",
        "target": "mypy.semanal.SemanticAnalyzer.analyze_property_with_multi_part_definition"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 48,
        "src": "assert isinstance(typ, CallableType)",
        "target": "mypy.semanal.SemanticAnalyzer.analyze_function_body"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 27,
        "src": "if not isinstance(typ, CallableType):",
        "target": "mypy.semanal.SemanticAnalyzer.check_classvar_in_signature"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 10,
        "src": "assert isinstance(sig, CallableType)",
        "target": "mypy.semanal.SemanticAnalyzer.check_function_signature"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 12,
        "src": "assert isinstance(func, CallableType)",
        "target": "mypy.semanal.SemanticAnalyzer.check_paramspec_definition"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 455,
        "src": "if not set(all_tvars).issubset(set(declared_tvars)):",
        "target": "mypy.semanal.SemanticAnalyzer.clean_up_bases_and_infer_type_variables"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 727,
        "src": "alternatives = set(module.names.keys()).difference({source_id})",
        "target": "mypy.semanal.SemanticAnalyzer.report_missing_module_attribute"
      },
      {
        "code": "unreachable",
        "column": 20,
        "message": "Statement is unreachable",
        "offset": 90,
        "src": "continue",
        "target": "mypy.semanal.SemanticAnalyzer.visit_import_all"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"rvalue\" has type \"Expression\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 421,
        "src": "if s.rvalue:",
        "target": "mypy.semanal.SemanticAnalyzer.analyze_lvalues"
      },
      {
        "code": "possibly-undefined",
        "column": 38,
        "message": "Name \"type_name\" may be undefined",
        "offset": 268,
        "src": "typ = self.named_type_or_none(type_name)",
        "target": "mypy.semanal"
      },
      {
        "code": "truthy-bool",
        "column": 15,
        "message": "\"call\" has type \"CallExpr\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 767,
        "src": "if not call:",
        "target": "mypy.semanal.SemanticAnalyzer.extract_typevarlike_name"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"zip[tuple[Any, ...]]\")",
        "offset": 216,
        "src": "elementwise_assignments = zip(rval.items, *[v.items for v in seq_lvals])",
        "target": "mypy.semanal.SemanticAnalyzer.process_module_assignment"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 1,
        "src": "for rv, *lvs in elementwise_assignments:",
        "target": "mypy.semanal.SemanticAnalyzer.process_module_assignment"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for rv, *lvs in elementwise_assignments:",
        "target": "mypy.semanal.SemanticAnalyzer.process_module_assignment"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "for rv, *lvs in elementwise_assignments:",
        "target": "mypy.semanal.SemanticAnalyzer.process_module_assignment"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"zip[tuple[Any, ...]]\")",
        "offset": 0,
        "src": "for rv, *lvs in elementwise_assignments:",
        "target": "mypy.semanal.SemanticAnalyzer.process_module_assignment"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "self.process_module_assignment(lvs, rv, ctx)",
        "target": "mypy.semanal.SemanticAnalyzer.process_module_assignment"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "self.process_module_assignment(lvs, rv, ctx)",
        "target": "mypy.semanal.SemanticAnalyzer.process_module_assignment"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"expr\" has type \"Expression\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 163,
        "src": "if s.expr:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_assert_stmt"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"expr\" has type \"Expression\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 264,
        "src": "if e.expr:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_yield_from_expr"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 59,
        "src": "if getattr(n.node, \"is_inferred\", False) and isinstance(n.node, Var)",
        "target": "mypy.semanal.SemanticAnalyzer.visit_call_expr"
      },
      {
        "code": "no-any-expr",
        "column": 72,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 133,
        "src": "if not func_def.is_static and isinstance(func_def.type, CallableType):",
        "target": "mypy.semanal.SemanticAnalyzer.visit_member_expr"
      },
      {
        "code": "truthy-bool",
        "column": 27,
        "message": "\"n\" has type \"SymbolTableNode\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 12,
        "src": "if not n:",
        "target": "mypy.semanal.SemanticAnalyzer.visit_member_expr"
      },
      {
        "code": "possibly-undefined",
        "column": 23,
        "message": "Name \"implicit_node\" may be undefined",
        "offset": 400,
        "src": "return implicit_node",
        "target": "mypy.semanal"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 201,
        "src": "if isinstance(node_type, CallableType):",
        "target": "mypy.semanal.SemanticAnalyzer.create_getattr_var"
      },
      {
        "code": "truthy-bool",
        "column": 15,
        "message": "\"sym\" has type \"SymbolTableNode\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 46,
        "src": "assert sym, \"Internal error: attempted to construct unknown type\"",
        "target": "mypy.semanal.SemanticAnalyzer.named_type"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 198,
        "src": "f: Callable[[object], Any] = lambda x: x",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(f(symbol_node), (Decorator, FuncBase, Var)):",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 7,
        "src": "existing is not None",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "and isinstance(f(existing.node), (Decorator, FuncBase, Var))",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"True | Any\")",
        "offset": 2,
        "src": "isinstance(f(existing.type), f(AnyType))",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "isinstance(f(existing.type), f(AnyType))",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "isinstance(f(existing.type), f(AnyType))",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "or f(existing.type) == f(symbol_node).type",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "or f(existing.type) == f(symbol_node).type",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "if isinstance(f(symbol_node), (FuncBase, Decorator)):",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "typ = f(symbol_node).type",
        "target": "mypy.semanal.SemanticAnalyzer._get_node_for_class_scoped_import"
      },
      {
        "code": "possibly-undefined",
        "column": 19,
        "message": "Name \"names\" may be undefined",
        "offset": 273,
        "src": "assert names is not None",
        "target": "mypy.semanal"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 430,
        "src": "if isinstance(sig, CallableType):",
        "target": "mypy.semanal.replace_implicit_first_type"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> Any\")",
        "offset": 78,
        "src": "patches_by_priority = sorted(patches, key=lambda x: x[0])",
        "target": "mypy.semanal.apply_semantic_analyzer_patches"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "patches_by_priority = sorted(patches, key=lambda x: x[0])",
        "target": "mypy.semanal.apply_semantic_analyzer_patches"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 74,
        "src": "if defn.type and isinstance(defn.type, CallableType) and defn.type.fully_typed:",
        "target": "mypy.semanal.infer_fdef_types_from_defaults"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 31,
        "src": "assert isinstance(defn.type, CallableType)",
        "target": "mypy.semanal.infer_fdef_types_from_defaults"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 5,
        "src": "isinstance(defn.unanalyzed_type, CallableType)",
        "target": "mypy.semanal.infer_fdef_types_from_defaults"
      }
    ],
    "mypy/semanal_infer.py": [
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 44,
        "src": "elif isinstance(dec.func.type, CallableType):",
        "target": "mypy.semanal_infer.infer_decorator_signature_if_simple"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 34,
        "src": "if isinstance(sig, CallableType) and sig.arg_kinds == [ARG_POS]:",
        "target": "mypy.semanal_infer.is_identity_signature"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 20,
        "src": "if isinstance(typ, CallableType):",
        "target": "mypy.semanal_infer.calculate_return_type"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 21,
        "src": "if isinstance(typ, CallableType) and has_no_typevars(typ.ret_type):",
        "target": "mypy.semanal_infer.find_fixed_callable_return"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 2,
        "src": "if isinstance(ret_type, CallableType):",
        "target": "mypy.semanal_infer.find_fixed_callable_return"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 6,
        "src": "if isinstance(ret_type, CallableType):",
        "target": "mypy.semanal_infer.find_fixed_callable_return"
      }
    ],
    "mypy/semanal_main.py": [
      {
        "code": "possibly-undefined",
        "column": 4,
        "message": "Name \"state\" may be undefined",
        "offset": 191,
        "src": "state.manager.incomplete_namespaces.update(scc)",
        "target": "mypy.semanal_main"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> (Any, Any)\")",
        "offset": 58,
        "src": "targets = sorted(get_all_leaf_targets(tree), key=lambda x: (x[1].line, x[0]))",
        "target": "mypy.semanal_main.process_functions"
      },
      {
        "code": "no-any-expr",
        "column": 68,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "targets = sorted(get_all_leaf_targets(tree), key=lambda x: (x[1].line, x[0]))",
        "target": "mypy.semanal_main.process_functions"
      },
      {
        "code": "no-any-expr",
        "column": 68,
        "message": "Expression type contains \"Any\" (has type \"(Any, Any)\")",
        "offset": 0,
        "src": "targets = sorted(get_all_leaf_targets(tree), key=lambda x: (x[1].line, x[0]))",
        "target": "mypy.semanal_main.process_functions"
      },
      {
        "code": "no-any-expr",
        "column": 79,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "targets = sorted(get_all_leaf_targets(tree), key=lambda x: (x[1].line, x[0]))",
        "target": "mypy.semanal_main.process_functions"
      }
    ],
    "mypy/semanal_namedtuple.py": [
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 508,
        "src": "info.metadata[\"namedtuple\"] = {\"fields\": items.copy()}",
        "target": "mypy.semanal_namedtuple.NamedTupleAnalyzer.build_namedtuple_typeinfo"
      }
    ],
    "mypy/server/astdiff.py": [
      {
        "code": "unreachable",
        "column": 8,
        "message": "Statement is unreachable",
        "offset": 225,
        "src": "if node.type:",
        "target": "mypy.server.astdiff.snapshot_definition"
      }
    ],
    "mypy/server/astmerge.py": [
      {
        "code": "unreachable",
        "column": 12,
        "message": "Statement is unreachable",
        "offset": 298,
        "src": "node.analyzed = self.fixup(node.analyzed)",
        "target": "mypy.server.astmerge.NodeReplaceVisitor.visit_call_expr"
      }
    ],
    "mypy/server/aststrip.py": [
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 167,
        "src": "assert isinstance(node.type, CallableType)",
        "target": "mypy.server.aststrip.NodeStripVisitor.visit_func_def"
      }
    ],
    "mypy/server/deps.py": [
      {
        "code": "unreachable",
        "column": 24,
        "message": "Statement is unreachable",
        "offset": 507,
        "src": "fname = init.node.fullname",
        "target": "mypy.server.deps.DependencyVisitor.visit_assignment_stmt"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"upper_bound\" has type \"Type\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 534,
        "src": "if typ.upper_bound:",
        "target": "mypy.server.deps.TypeTriggersVisitor.visit_type_var"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> Any\")",
        "offset": 90,
        "src": "for trigger, targets in sorted(all_deps.items(), key=lambda x: x[0]):",
        "target": "mypy.server.deps.dump_all_dependencies"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for trigger, targets in sorted(all_deps.items(), key=lambda x: x[0]):",
        "target": "mypy.server.deps.dump_all_dependencies"
      }
    ],
    "mypy/server/mergecheck.py": [
      {
        "code": "unreachable",
        "column": 12,
        "message": "Statement is unreachable",
        "offset": 32,
        "src": "continue",
        "target": "mypy.server.mergecheck.check_consistency"
      }
    ],
    "mypy/server/objgraph.py": [
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"(type[BuiltinFunctionType], type[FunctionType], type[MethodType], type[(object) -> Iterable[str]], type[(object, object) -> bool], type[(object) -> bool])\")",
        "offset": 16,
        "src": "types.BuiltinFunctionType,",
        "target": "mypy.server.objgraph"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"type[FunctionType]\")",
        "offset": 1,
        "src": "types.FunctionType,",
        "target": "mypy.server.objgraph"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"type[MethodType]\")",
        "offset": 1,
        "src": "types.MethodType,",
        "target": "mypy.server.objgraph"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"set[type[ReferenceType[Any]]]\")",
        "offset": 15,
        "src": "TYPE_BLACKLIST: Final = {weakref.ReferenceType}",
        "target": "mypy.server.objgraph"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"type[ReferenceType[Any]]\")",
        "offset": 0,
        "src": "TYPE_BLACKLIST: Final = {weakref.ReferenceType}",
        "target": "mypy.server.objgraph"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 4,
        "src": "return isinstance(getattr(type(o), attr, None), property)",
        "target": "mypy.server.objgraph.isproperty"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression type contains \"Any\" (has type \"type[property]\")",
        "offset": 0,
        "src": "return isinstance(getattr(type(o), attr, None), property)",
        "target": "mypy.server.objgraph.isproperty"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "if \"__getattribute__\" in getattr(type(o), \"__dict__\"):  # noqa: B009",
        "target": "mypy.server.objgraph.get_edge_candidates"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "e = getattr(o, attr)",
        "target": "mypy.server.objgraph.get_edge_candidates"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 1,
        "src": "if not type(e) in ATOMIC_TYPE_BLACKLIST:",
        "target": "mypy.server.objgraph.get_edge_candidates"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if not type(e) in ATOMIC_TYPE_BLACKLIST:",
        "target": "mypy.server.objgraph.get_edge_candidates"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 1,
        "src": "yield attr, e",
        "target": "mypy.server.objgraph.get_edge_candidates"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "yield attr, e",
        "target": "mypy.server.objgraph.get_edge_candidates"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(int, Any)\")",
        "offset": 6,
        "src": "for i, e in enumerate(o):",
        "target": "mypy.server.objgraph.get_edge_candidates"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for i, e in enumerate(o):",
        "target": "mypy.server.objgraph.get_edge_candidates"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"enumerate[Any]\")",
        "offset": 0,
        "src": "for i, e in enumerate(o):",
        "target": "mypy.server.objgraph.get_edge_candidates"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"(int, Any)\")",
        "offset": 1,
        "src": "yield i, e",
        "target": "mypy.server.objgraph.get_edge_candidates"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "yield i, e",
        "target": "mypy.server.objgraph.get_edge_candidates"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"(type[BuiltinFunctionType], type[FunctionType], type[MethodType], type[(object) -> Iterable[str]], type[(object, object) -> bool], type[(object) -> bool])\")",
        "offset": 5,
        "src": "if isinstance(e, FUNCTION_TYPES):",
        "target": "mypy.server.objgraph.get_edges"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"((object, str), tuple[_Cell, ...] | None | Any (unannotated))\")",
        "offset": 5,
        "src": "yield (s, \"__closure__\"), e.__closure__",
        "target": "mypy.server.objgraph.get_edges"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"tuple[_Cell, ...] | None | Any (unannotated)\")",
        "offset": 0,
        "src": "yield (s, \"__closure__\"), e.__closure__",
        "target": "mypy.server.objgraph.get_edges"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"object | Any (unannotated)\")",
        "offset": 2,
        "src": "se = e.__self__",
        "target": "mypy.server.objgraph.get_edges"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"object | Any (unannotated)\")",
        "offset": 1,
        "src": "if se is not o and se is not type(o) and hasattr(s, \"__self__\"):",
        "target": "mypy.server.objgraph.get_edges"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"object | Any (unannotated)\")",
        "offset": 0,
        "src": "if se is not o and se is not type(o) and hasattr(s, \"__self__\"):",
        "target": "mypy.server.objgraph.get_edges"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any (unannotated)\"",
        "offset": 1,
        "src": "yield s.__self__, se",
        "target": "mypy.server.objgraph.get_edges"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"(Any (unannotated), object | Any (unannotated))\")",
        "offset": 0,
        "src": "yield s.__self__, se",
        "target": "mypy.server.objgraph.get_edges"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"object | Any (unannotated)\")",
        "offset": 0,
        "src": "yield s.__self__, se",
        "target": "mypy.server.objgraph.get_edges"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"set[type[ReferenceType[Any]]]\")",
        "offset": 2,
        "src": "if not type(e) in TYPE_BLACKLIST:",
        "target": "mypy.server.objgraph.get_edges"
      }
    ],
    "mypy/server/update.py": [
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 254,
        "src": "\"previous targets with errors: %s\" % sorted(self.previous_targets_with_errors)",
        "target": "mypy.server.update.FineGrainedBuildManager.update"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> Any\")",
        "offset": 625,
        "src": "for id, nodes in sorted(todo.items(), key=lambda x: x[0]):",
        "target": "mypy.server.update.propagate_changes_using_dependencies"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for id, nodes in sorted(todo.items(), key=lambda x: x[0]):",
        "target": "mypy.server.update.propagate_changes_using_dependencies"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 407,
        "src": "return m.group(1)",
        "target": "mypy.server.update.extract_fnam_from_message"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> Any\")",
        "offset": 48,
        "src": "groups = sorted(groups, key=lambda g: g[0])",
        "target": "mypy.server.update.sort_messages_preserving_file_order"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "groups = sorted(groups, key=lambda g: g[0])",
        "target": "mypy.server.update.sort_messages_preserving_file_order"
      }
    ],
    "mypy/split_namespace.py": [
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 18,
        "src": "self.__dict__[\"_standard_namespace\"] = standard_namespace",
        "target": "mypy.split_namespace.SplitNamespace.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "self.__dict__[\"_alt_namespace\"] = alt_namespace",
        "target": "mypy.split_namespace.SplitNamespace.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "self.__dict__[\"_alt_prefix\"] = alt_prefix",
        "target": "mypy.split_namespace.SplitNamespace.__init__"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 2,
        "src": "def _get(self) -> tuple[Any, Any]:",
        "target": "mypy.split_namespace.SplitNamespace._get"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return (self._standard_namespace, self._alt_namespace)",
        "target": "mypy.split_namespace.SplitNamespace._get"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"(Any, Any)\")",
        "offset": 0,
        "src": "return (self._standard_namespace, self._alt_namespace)",
        "target": "mypy.split_namespace.SplitNamespace._get"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return (self._standard_namespace, self._alt_namespace)",
        "target": "mypy.split_namespace.SplitNamespace._get"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 2,
        "src": "def __setattr__(self, name: str, value: Any) -> None:",
        "target": "mypy.split_namespace.SplitNamespace.__setattr__"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if name.startswith(self._alt_prefix):",
        "target": "mypy.split_namespace.SplitNamespace.__setattr__"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "setattr(self._alt_namespace, name[len(self._alt_prefix) :], value)",
        "target": "mypy.split_namespace.SplitNamespace.__setattr__"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "setattr(self._alt_namespace, name[len(self._alt_prefix) :], value)",
        "target": "mypy.split_namespace.SplitNamespace.__setattr__"
      },
      {
        "code": "no-any-expr",
        "column": 72,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "setattr(self._alt_namespace, name[len(self._alt_prefix) :], value)",
        "target": "mypy.split_namespace.SplitNamespace.__setattr__"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "setattr(self._standard_namespace, name, value)",
        "target": "mypy.split_namespace.SplitNamespace.__setattr__"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "setattr(self._standard_namespace, name, value)",
        "target": "mypy.split_namespace.SplitNamespace.__setattr__"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 2,
        "src": "def __getattr__(self, name: str) -> Any:",
        "target": "mypy.split_namespace.SplitNamespace.__getattr__"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if name.startswith(self._alt_prefix):",
        "target": "mypy.split_namespace.SplitNamespace.__getattr__"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return getattr(self._alt_namespace, name[len(self._alt_prefix) :])",
        "target": "mypy.split_namespace.SplitNamespace.__getattr__"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return getattr(self._alt_namespace, name[len(self._alt_prefix) :])",
        "target": "mypy.split_namespace.SplitNamespace.__getattr__"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return getattr(self._alt_namespace, name[len(self._alt_prefix) :])",
        "target": "mypy.split_namespace.SplitNamespace.__getattr__"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "return getattr(self._standard_namespace, name)",
        "target": "mypy.split_namespace.SplitNamespace.__getattr__"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return getattr(self._standard_namespace, name)",
        "target": "mypy.split_namespace.SplitNamespace.__getattr__"
      }
    ],
    "mypy/stats.py": [
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 161,
        "src": "assert isinstance(o.type, CallableType)",
        "target": "mypy.stats.StatisticsVisitor.visit_func_def"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"expr\" has type \"Expression\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 84,
        "src": "if o.expr:",
        "target": "mypy.stats.StatisticsVisitor.visit_yield_from_expr"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 19,
        "src": "if isinstance(callee_type, CallableType):",
        "target": "mypy.stats.StatisticsVisitor.record_call_target_precision"
      }
    ],
    "mypy/strconv.py": [
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 78,
        "src": "a: list[Any] = []",
        "target": "mypy.strconv.StrConv.func_helper"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Args\", args))",
        "target": "mypy.strconv.StrConv.func_helper"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append(o.type)",
        "target": "mypy.strconv.StrConv.func_helper"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append(\"Generator\")",
        "target": "mypy.strconv.StrConv.func_helper"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "a.extend(extra)",
        "target": "mypy.strconv.StrConv.func_helper"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "a.append(o.body)",
        "target": "mypy.strconv.StrConv.func_helper"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return a",
        "target": "mypy.strconv.StrConv.func_helper"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 6,
        "src": "a: list[Any] = [o.defs]",
        "target": "mypy.strconv.StrConv.visit_mypy_file"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.insert(0, \"BOM\")",
        "target": "mypy.strconv.StrConv.visit_mypy_file"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 7,
        "src": "a.insert(0, o.path.replace(os.sep, \"/\"))",
        "target": "mypy.strconv.StrConv.visit_mypy_file"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append(\"IgnoredLines(%s)\" % \", \".join(str(line) for line in sorted(o.ignored_lines)))",
        "target": "mypy.strconv.StrConv.visit_mypy_file"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_mypy_file"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 42,
        "src": "a: Any = o.items[:]",
        "target": "mypy.strconv.StrConv.visit_overloaded_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "a.insert(0, o.type)",
        "target": "mypy.strconv.StrConv.visit_overloaded_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "a.insert(0, o.impl)",
        "target": "mypy.strconv.StrConv.visit_overloaded_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "a.insert(-1, \"Static\")",
        "target": "mypy.strconv.StrConv.visit_overloaded_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "a.insert(-1, \"Class\")",
        "target": "mypy.strconv.StrConv.visit_overloaded_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_overloaded_func_def"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 52,
        "src": "a: list[Any] = []",
        "target": "mypy.strconv.StrConv.visit_assignment_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 5,
        "src": "a.append(o.rvalue)",
        "target": "mypy.strconv.StrConv.visit_assignment_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append(o.type)",
        "target": "mypy.strconv.StrConv.visit_assignment_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_assignment_stmt"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 6,
        "src": "a: list[Any] = [o.expr, o.body]",
        "target": "mypy.strconv.StrConv.visit_while_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Else\", o.else_body.body))",
        "target": "mypy.strconv.StrConv.visit_while_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_while_stmt"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "a: list[Any] = []",
        "target": "mypy.strconv.StrConv.visit_for_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Async\", \"\"))",
        "target": "mypy.strconv.StrConv.visit_for_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "a.append(o.index)",
        "target": "mypy.strconv.StrConv.visit_for_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append(o.index_type)",
        "target": "mypy.strconv.StrConv.visit_for_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "a.extend([o.expr, o.body])",
        "target": "mypy.strconv.StrConv.visit_for_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "a.extend([o.expr, o.body])",
        "target": "mypy.strconv.StrConv.visit_for_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Else\", o.else_body.body))",
        "target": "mypy.strconv.StrConv.visit_for_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_for_stmt"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 6,
        "src": "a: list[Any] = []",
        "target": "mypy.strconv.StrConv.visit_if_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"If\", [o.expr[i]]))",
        "target": "mypy.strconv.StrConv.visit_if_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "a.append((\"Then\", o.body[i].body))",
        "target": "mypy.strconv.StrConv.visit_if_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 3,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_if_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "return self.dump([a, (\"Else\", o.else_body.body)], o)",
        "target": "mypy.strconv.StrConv.visit_if_stmt"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 27,
        "src": "a: list[Any] = [o.body]",
        "target": "mypy.strconv.StrConv.visit_try_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append(\"*\")",
        "target": "mypy.strconv.StrConv.visit_try_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 3,
        "src": "a.append(o.types[i])",
        "target": "mypy.strconv.StrConv.visit_try_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append(o.vars[i])",
        "target": "mypy.strconv.StrConv.visit_try_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "a.append(o.handlers[i])",
        "target": "mypy.strconv.StrConv.visit_try_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 3,
        "src": "a.append((\"Else\", o.else_body.body))",
        "target": "mypy.strconv.StrConv.visit_try_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Finally\", o.finally_body.body))",
        "target": "mypy.strconv.StrConv.visit_try_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_try_stmt"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "a: list[Any] = []",
        "target": "mypy.strconv.StrConv.visit_with_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Async\", \"\"))",
        "target": "mypy.strconv.StrConv.visit_with_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Expr\", [o.expr[i]]))",
        "target": "mypy.strconv.StrConv.visit_with_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Target\", [o.target[i]]))",
        "target": "mypy.strconv.StrConv.visit_with_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append(o.unanalyzed_type)",
        "target": "mypy.strconv.StrConv.visit_with_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a + [o.body], o)",
        "target": "mypy.strconv.StrConv.visit_with_stmt"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "a: list[Any] = [o.subject]",
        "target": "mypy.strconv.StrConv.visit_match_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Pattern\", [o.patterns[i]]))",
        "target": "mypy.strconv.StrConv.visit_match_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Guard\", [o.guards[i]]))",
        "target": "mypy.strconv.StrConv.visit_match_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "a.append((\"Body\", o.bodies[i].body))",
        "target": "mypy.strconv.StrConv.visit_match_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_match_stmt"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> Any\")",
        "offset": 16,
        "src": "s = re.sub(r\"\\\\u[0-9a-fA-F]{4}\", lambda m: \"\\\\\" + m.group(0), s)",
        "target": "mypy.strconv.StrConv.str_repr"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "s = re.sub(r\"\\\\u[0-9a-fA-F]{4}\", lambda m: \"\\\\\" + m.group(0), s)",
        "target": "mypy.strconv.StrConv.str_repr"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "s = re.sub(r\"\\\\u[0-9a-fA-F]{4}\", lambda m: \"\\\\\" + m.group(0), s)",
        "target": "mypy.strconv.StrConv.str_repr"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> str\")",
        "offset": 1,
        "src": "return re.sub(\"[^\\\\x20-\\\\x7e]\", lambda m: r\"\\u%.4x\" % ord(m.group(0)), s)",
        "target": "mypy.strconv.StrConv.str_repr"
      },
      {
        "code": "no-any-expr",
        "column": 66,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return re.sub(\"[^\\\\x20-\\\\x7e]\", lambda m: r\"\\u%.4x\" % ord(m.group(0)), s)",
        "target": "mypy.strconv.StrConv.str_repr"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"expr\" has type \"Expression\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 60,
        "src": "if o.expr:",
        "target": "mypy.strconv.StrConv.visit_yield_from_expr"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 9,
        "src": "extra: list[str | tuple[str, list[Any]]] = []",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"list[str | (str, list[Any])]\")",
        "offset": 5,
        "src": "extra.append(\"VarArg\")",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[str | (str, list[Any])]\")",
        "offset": 2,
        "src": "extra.append((\"KwArgs\", [o.arg_names[i], o.args[i]]))",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 0,
        "src": "extra.append((\"KwArgs\", [o.arg_names[i], o.args[i]]))",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "extra.append((\"KwArgs\", [o.arg_names[i], o.args[i]]))",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[str | (str, list[Any])]\")",
        "offset": 2,
        "src": "extra.append((\"DictVarArg\", [o.args[i]]))",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 0,
        "src": "extra.append((\"DictVarArg\", [o.args[i]]))",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "extra.append((\"DictVarArg\", [o.args[i]]))",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "a: list[Any] = [o.callee, (\"Args\", args)]",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a + extra, o)",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"list[str | (str, list[Any])]\")",
        "offset": 0,
        "src": "return self.dump(a + extra, o)",
        "target": "mypy.strconv.StrConv.visit_call_expr"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 55,
        "src": "a: list[Any] = []",
        "target": "mypy.strconv.StrConv.visit_type_var_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a += [\"Variance(COVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_expr"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "a += [\"Variance(COVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a += [\"Variance(CONTRAVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_expr"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "a += [\"Variance(CONTRAVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a += [(\"Values\", o.values)]",
        "target": "mypy.strconv.StrConv.visit_type_var_expr"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "a += [(\"Values\", o.values)]",
        "target": "mypy.strconv.StrConv.visit_type_var_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a += [f\"UpperBound({o.upper_bound})\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_expr"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "a += [f\"UpperBound({o.upper_bound})\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_expr"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_type_var_expr"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 5,
        "src": "a: list[Any] = []",
        "target": "mypy.strconv.StrConv.visit_paramspec_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a += [\"Variance(COVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_paramspec_expr"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "a += [\"Variance(COVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_paramspec_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a += [\"Variance(CONTRAVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_paramspec_expr"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "a += [\"Variance(CONTRAVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_paramspec_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a += [f\"UpperBound({o.upper_bound})\"]",
        "target": "mypy.strconv.StrConv.visit_paramspec_expr"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "a += [f\"UpperBound({o.upper_bound})\"]",
        "target": "mypy.strconv.StrConv.visit_paramspec_expr"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_paramspec_expr"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 5,
        "src": "a: list[Any] = []",
        "target": "mypy.strconv.StrConv.visit_type_var_tuple_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a += [\"Variance(COVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_tuple_expr"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "a += [\"Variance(COVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_tuple_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a += [\"Variance(CONTRAVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_tuple_expr"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "a += [\"Variance(CONTRAVARIANT)\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_tuple_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a += [f\"UpperBound({o.upper_bound})\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_tuple_expr"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "a += [f\"UpperBound({o.upper_bound})\"]",
        "target": "mypy.strconv.StrConv.visit_type_var_tuple_expr"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_type_var_tuple_expr"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 42,
        "src": "a: list[Any] = [o.begin_index, o.end_index, o.stride]",
        "target": "mypy.strconv.StrConv.visit_slice_expr"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "if not a[0]:",
        "target": "mypy.strconv.StrConv.visit_slice_expr"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if not a[0]:",
        "target": "mypy.strconv.StrConv.visit_slice_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "a[0] = \"<empty>\"",
        "target": "mypy.strconv.StrConv.visit_slice_expr"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "if not a[1]:",
        "target": "mypy.strconv.StrConv.visit_slice_expr"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if not a[1]:",
        "target": "mypy.strconv.StrConv.visit_slice_expr"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "a[1] = \"<empty>\"",
        "target": "mypy.strconv.StrConv.visit_slice_expr"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_slice_expr"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 24,
        "src": "a: list[Any] = []",
        "target": "mypy.strconv.StrConv.visit_mapping_pattern"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Key\", [o.keys[i]]))",
        "target": "mypy.strconv.StrConv.visit_mapping_pattern"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "a.append((\"Value\", [o.values[i]]))",
        "target": "mypy.strconv.StrConv.visit_mapping_pattern"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Rest\", [o.rest]))",
        "target": "mypy.strconv.StrConv.visit_mapping_pattern"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_mapping_pattern"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "a: list[Any] = [o.class_ref]",
        "target": "mypy.strconv.StrConv.visit_class_pattern"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Positionals\", o.positionals))",
        "target": "mypy.strconv.StrConv.visit_class_pattern"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "a.append((\"Keyword\", [o.keyword_keys[i], o.keyword_values[i]]))",
        "target": "mypy.strconv.StrConv.visit_class_pattern"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 2,
        "src": "return self.dump(a, o)",
        "target": "mypy.strconv.StrConv.visit_class_pattern"
      }
    ],
    "mypy/stubdoc.py": [
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 49,
        "src": "def __eq__(self, other: Any) -> bool:",
        "target": "mypy.stubdoc.ArgSig.__eq__"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(other, ArgSig):",
        "target": "mypy.stubdoc.ArgSig.__eq__"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> int\")",
        "offset": 189,
        "src": "return list(sorted(self.signatures, key=lambda x: 1 if args_kwargs(x) else 0))",
        "target": "mypy.stubdoc.DocStringParser.get_signatures"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 70,
        "src": "name = m.group(1)",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "name = name.split(\".\")[-1]",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"list[str] | Any\")",
        "offset": 0,
        "src": "name = name.split(\".\")[-1]",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "arg_string = m.group(2)",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "if not arg_string.strip():",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 2,
        "src": "return name, [], []",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"(str | Any, list[str], list[str])\")",
        "offset": 0,
        "src": "return name, [], []",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 2,
        "src": "args = [arg.strip() for arg in arg_string.split(\",\")]",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 0,
        "src": "args = [arg.strip() for arg in arg_string.split(\",\")]",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "args = [arg.strip() for arg in arg_string.split(\",\")]",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"list[str] | Any\")",
        "offset": 0,
        "src": "args = [arg.strip() for arg in arg_string.split(\",\")]",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 4,
        "src": "while i < len(args):",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 2,
        "src": "if args[i].startswith(\"[\") or \"=\" in args[i]:",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "if args[i].startswith(\"[\") or \"=\" in args[i]:",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "if args[i].startswith(\"[\") or \"=\" in args[i]:",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "if args[i].startswith(\"[\") or \"=\" in args[i]:",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 0,
        "src": "if args[i].startswith(\"[\") or \"=\" in args[i]:",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "if args[i].startswith(\"[\") or \"=\" in args[i]:",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 2,
        "src": "positional.append(args[i].rstrip(\"[\"))",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 0,
        "src": "positional.append(args[i].rstrip(\"[\"))",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "positional.append(args[i].rstrip(\"[\"))",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 2,
        "src": "if args[i - 1].endswith(\"[\"):",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "if args[i - 1].endswith(\"[\"):",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "if args[i - 1].endswith(\"[\"):",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 2,
        "src": "while i < len(args):",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 1,
        "src": "arg = args[i]",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "arg = args[i]",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "arg = arg.strip(\"[]\")",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "arg = arg.split(\"=\")[0]",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression type contains \"Any\" (has type \"list[str] | Any\")",
        "offset": 0,
        "src": "arg = arg.split(\"=\")[0]",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 1,
        "src": "optional.append(arg)",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "optional.append(arg)",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 2,
        "src": "return name, positional, optional",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"(str | Any, list[str | Any], list[str | Any])\")",
        "offset": 0,
        "src": "return name, positional, optional",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 0,
        "src": "return name, positional, optional",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 0,
        "src": "return name, positional, optional",
        "target": "mypy.stubdoc.parse_signature"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 33,
        "src": "if m.group(1) != \"class\":",
        "target": "mypy.stubdoc.parse_all_signatures"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "if m.group(1) != \"class\":",
        "target": "mypy.stubdoc.parse_all_signatures"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 34,
        "src": "return m.group(1) if m else None",
        "target": "mypy.stubdoc.infer_prop_type_from_docstring"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 0,
        "src": "return m.group(1) if m else None",
        "target": "mypy.stubdoc.infer_prop_type_from_docstring"
      }
    ],
    "mypy/stubgen.py": [
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 723,
        "src": "if isinstance(o.unanalyzed_type, CallableType)",
        "target": "mypy.stubgen.StubGenerator.visit_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 66,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 35,
        "src": "if o.name != \"__init__\" and isinstance(o.unanalyzed_type, CallableType):",
        "target": "mypy.stubgen.StubGenerator.visit_func_def"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1069,
        "src": "default=[],",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 9,
        "src": "default=[],",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 15,
        "src": "if ns.modules + ns.packages and ns.files:",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if ns.modules + ns.packages and ns.files:",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if ns.modules + ns.packages and ns.files:",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if ns.quiet and ns.verbose:",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if ns.quiet and ns.verbose:",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "if not os.path.exists(ns.output_dir):",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "os.makedirs(ns.output_dir)",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "no_import=ns.no_import,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "doc_dir=ns.doc_dir,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "search_path=ns.search_path.split(\":\"),",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "ignore_errors=ns.ignore_errors,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "parse_only=ns.parse_only,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "include_private=ns.include_private,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "output_dir=ns.output_dir,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "modules=ns.modules,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "packages=ns.packages,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "files=ns.files,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "verbose=ns.verbose,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "quiet=ns.quiet,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "export_less=ns.export_less,",
        "target": "mypy.stubgen.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "legacy=ns.legacy,",
        "target": "mypy.stubgen.parse_options"
      }
    ],
    "mypy/stubgenc.py": [
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 107,
        "src": "docstr = getattr(func, \"__doc__\", None)",
        "target": "mypy.stubgenc.DocstringSignatureGenerator.get_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "inferred = infer_sig_from_docstring(docstr, name)",
        "target": "mypy.stubgenc.DocstringSignatureGenerator.get_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 2,
        "src": "assert docstr is not None",
        "target": "mypy.stubgenc.DocstringSignatureGenerator.get_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if is_pybind11_overloaded_function_docstring(docstr, name):",
        "target": "mypy.stubgenc.DocstringSignatureGenerator.get_function_sig"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 58,
        "src": "items = sorted(module.__dict__.items(), key=lambda x: x[0])",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "items = sorted(module.__dict__.items(), key=lambda x: x[0])",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"dict_items[str, Any]\")",
        "offset": 0,
        "src": "items = sorted(module.__dict__.items(), key=lambda x: x[0])",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> Any\")",
        "offset": 0,
        "src": "items = sorted(module.__dict__.items(), key=lambda x: x[0])",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression type contains \"Any\" (has type \"((str, Any)) -> str\")",
        "offset": 0,
        "src": "items = sorted(module.__dict__.items(), key=lambda x: x[0])",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "items = sorted(module.__dict__.items(), key=lambda x: x[0])",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 0,
        "src": "items = sorted(module.__dict__.items(), key=lambda x: x[0])",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 1,
        "src": "for name, obj in items:",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for name, obj in items:",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 0,
        "src": "for name, obj in items:",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if is_c_function(obj):",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "module, name, obj, functions, imports=imports, sig_generators=sig_generators",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 4,
        "src": "for name, obj in items:",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for name, obj in items:",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 0,
        "src": "for name, obj in items:",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if is_c_type(obj):",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "module, name, obj, types, imports=imports, sig_generators=sig_generators",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 4,
        "src": "for name, obj in items:",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for name, obj in items:",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 0,
        "src": "for name, obj in items:",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if name not in done and not inspect.ismodule(obj):",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 1,
        "src": "type_str = strip_or_import(get_type_fullname(type(obj)), module, imports)",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "type_str = strip_or_import(get_type_fullname(type(obj)), module, imports)",
        "target": "mypy.stubgenc.generate_stub_for_c_module"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 54,
        "src": "def is_c_property_readonly(prop: Any) -> bool:",
        "target": "mypy.stubgenc.is_c_property_readonly"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return hasattr(prop, \"fset\") and prop.fset is None",
        "target": "mypy.stubgenc.is_c_property_readonly"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return hasattr(prop, \"fset\") and prop.fset is None",
        "target": "mypy.stubgenc.is_c_property_readonly"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 102,
        "src": "for subtyp in re.split(r\"[\\[,\\]]\", typ):",
        "target": "mypy.stubgenc.strip_or_import"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 0,
        "src": "for subtyp in re.split(r\"[\\[,\\]]\", typ):",
        "target": "mypy.stubgenc.strip_or_import"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "strip_or_import(subtyp.strip(), module, imports)",
        "target": "mypy.stubgenc.strip_or_import"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "\"module\" has type Module which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 1,
        "src": "if module:",
        "target": "mypy.stubgenc.strip_or_import"
      },
      {
        "code": "truthy-bool",
        "column": 9,
        "message": "\"module\" has type Module which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 2,
        "src": "elif module and typ.startswith(module.__name__ + \".\"):",
        "target": "mypy.stubgenc.strip_or_import"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 48,
        "src": "inferred = infer_prop_type(getattr(obj, \"__doc__\", None))",
        "target": "mypy.stubgenc.generate_c_property_stub"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 2,
        "src": "fget = getattr(obj, \"fget\", None)",
        "target": "mypy.stubgenc.generate_c_property_stub"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "inferred = infer_prop_type(getattr(fget, \"__doc__\", None))",
        "target": "mypy.stubgenc.generate_c_property_stub"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "inferred = infer_prop_type(getattr(fget, \"__doc__\", None))",
        "target": "mypy.stubgenc.generate_c_property_stub"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 33,
        "src": "obj_dict: Mapping[str, Any] = getattr(obj, \"__dict__\")  # noqa: B009",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 1,
        "src": "items = sorted(obj_dict.items(), key=lambda x: method_name_sort_key(x[0]))",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"Mapping[str, Any]\")",
        "offset": 0,
        "src": "items = sorted(obj_dict.items(), key=lambda x: method_name_sort_key(x[0]))",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"ItemsView[str, Any]\")",
        "offset": 0,
        "src": "items = sorted(obj_dict.items(), key=lambda x: method_name_sort_key(x[0]))",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> (int, str)\")",
        "offset": 0,
        "src": "items = sorted(obj_dict.items(), key=lambda x: method_name_sort_key(x[0]))",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"((str, Any)) -> (int, str)\")",
        "offset": 0,
        "src": "items = sorted(obj_dict.items(), key=lambda x: method_name_sort_key(x[0]))",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 72,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "items = sorted(obj_dict.items(), key=lambda x: method_name_sort_key(x[0]))",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 72,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 0,
        "src": "items = sorted(obj_dict.items(), key=lambda x: method_name_sort_key(x[0]))",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 7,
        "src": "for attr, value in items:",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for attr, value in items:",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 0,
        "src": "for attr, value in items:",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if is_c_method(value) or is_c_classmethod(value):",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if is_c_method(value) or is_c_classmethod(value):",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"Mapping[str, Any]\")",
        "offset": 5,
        "src": "if \"__init__\" in obj_dict:",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "if is_c_classmethod(value):",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "value,",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "elif is_c_property(value):",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "value,",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "is_c_property_readonly(value),",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "elif is_c_type(value):",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "module, attr, value, types, imports=imports, sig_generators=sig_generators",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 4,
        "src": "for attr, value in items:",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for attr, value in items:",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"list[(str, Any)]\")",
        "offset": 0,
        "src": "for attr, value in items:",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 6,
        "src": "attr, strip_or_import(get_type_fullname(type(value)), module, imports)",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 65,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "attr, strip_or_import(get_type_fullname(type(value)), module, imports)",
        "target": "mypy.stubgenc.generate_c_type_stub"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"type[type]\")",
        "offset": 3,
        "src": "all_bases = type.mro(obj)",
        "target": "mypy.stubgenc.generate_c_type_stub"
      }
    ],
    "mypy/stubtest.py": [
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 59,
        "src": "def _style(message: str, **kwargs: Any) -> str:",
        "target": "mypy.stubtest._style"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "kwargs.setdefault(\"color\", \"none\")",
        "target": "mypy.stubtest._style"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return _formatter.style(message, **kwargs)",
        "target": "mypy.stubtest._style"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 14,
        "src": "def __init__(",
        "target": "mypy.stubtest.Error.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 25,
        "src": "self.runtime_object = runtime_object",
        "target": "mypy.stubtest.Error.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"Any | Node | Missing\")",
        "offset": 1,
        "src": "self.stub_desc = stub_desc or str(getattr(stub_object, \"type\", stub_object))",
        "target": "mypy.stubtest.Error.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 59,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 1,
        "src": "self.runtime_desc = runtime_desc or _truncate(repr(runtime_object), 100)",
        "target": "mypy.stubtest.Error.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 36,
        "src": "if not isinstance(self.runtime_object, Missing):",
        "target": "mypy.stubtest.Error.get_description"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "runtime_line = inspect.getsourcelines(self.runtime_object)[1]",
        "target": "mypy.stubtest.Error.get_description"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "runtime_file = inspect.getsourcefile(self.runtime_object)",
        "target": "mypy.stubtest.Error.get_description"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 76,
        "src": "bottom_module = bottom_frame.f_globals.get(\"__name__\", \"\")",
        "target": "mypy.stubtest.test_module"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "bottom_module = bottom_frame.f_globals.get(\"__name__\", \"\")",
        "target": "mypy.stubtest.test_module"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if bottom_module == \"__main__\" or bottom_module.split(\".\")[0] == \"mypy\":",
        "target": "mypy.stubtest.test_module"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if bottom_module == \"__main__\" or bottom_module.split(\".\")[0] == \"mypy\":",
        "target": "mypy.stubtest.test_module"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"[_T] ((...) -> _T) -> _SingleDispatchCallable[_T]\")",
        "offset": 17,
        "src": "@singledispatch",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"(Node | Missing, Any | Missing, list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "@singledispatch",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "def verify(",
        "target": "mypy.stubtest.verify"
      },
      {
        "code": "no-any-decorated",
        "column": 0,
        "message": "Type of decorated function contains type \"Any\" (\"_SingleDispatchCallable[Iterator[Error], (Node | Missing, Any | Missing, list[str]) -> Iterator[Error]]\")",
        "offset": 0,
        "src": "def verify(",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 11,
        "src": "yield Error(object_path, \"is an unknown mypy node\", stub, runtime)",
        "target": "mypy.stubtest.verify"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchCallable[Iterator[Error], (Node | Missing, Any | Missing, list[str]) -> Iterator[Error]]\")",
        "offset": 64,
        "src": "@verify.register(nodes.MypyFile)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchRegisterCallable[MypyFile, _SingleDispatchCallable[Iterator[Error], (Node | Missing, Any | Missing, list[str]) -> Iterator[Error]]]\")",
        "offset": 0,
        "src": "@verify.register(nodes.MypyFile)",
        "target": "mypy.stubtest"
      },
      {
        "code": "unreachable",
        "column": 8,
        "message": "Statement is unreachable",
        "offset": 8,
        "src": "yield Error(object_path, \"is not a module\", stub, runtime)",
        "target": "mypy.stubtest.verify_mypyfile"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "runtime_all_as_set = set(runtime.__all__)",
        "target": "mypy.stubtest.verify_mypyfile"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 19,
        "src": "obj = getattr(r, attr)",
        "target": "mypy.stubtest.verify_mypyfile"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(obj, types.ModuleType):",
        "target": "mypy.stubtest.verify_mypyfile"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if callable(obj):",
        "target": "mypy.stubtest.verify_mypyfile"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "obj_mod = obj.__module__",
        "target": "mypy.stubtest.verify_mypyfile"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "if isinstance(obj_mod, str):",
        "target": "mypy.stubtest.verify_mypyfile"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 30,
        "src": "runtime_entry = getattr(runtime, entry, MISSING)",
        "target": "mypy.stubtest.verify_mypyfile"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 5,
        "src": "yield from verify(stub_entry, runtime_entry, object_path + [entry])",
        "target": "mypy.stubtest.verify_mypyfile"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def _verify_final(",
        "target": "mypy.stubtest._verify_final"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 10,
        "src": "if not stub.is_final and not issubclass(runtime, enum.Enum):",
        "target": "mypy.stubtest._verify_final"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 5,
        "src": "runtime,",
        "target": "mypy.stubtest._verify_final"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 10,
        "src": "runtime_final = getattr(runtime, \"__final__\", False)",
        "target": "mypy.stubtest._verify_final"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 0,
        "src": "runtime_final = getattr(runtime, \"__final__\", False)",
        "target": "mypy.stubtest._verify_final"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 4,
        "src": "if runtime_final and not stub.is_final:",
        "target": "mypy.stubtest._verify_final"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 5,
        "src": "runtime,",
        "target": "mypy.stubtest._verify_final"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 5,
        "src": "def _verify_metaclass(",
        "target": "mypy.stubtest._verify_metaclass"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"type[type[Any]]\")",
        "offset": 7,
        "src": "runtime_metaclass = type(runtime)",
        "target": "mypy.stubtest._verify_metaclass"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 0,
        "src": "runtime_metaclass = type(runtime)",
        "target": "mypy.stubtest._verify_metaclass"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"type[type[Any]]\")",
        "offset": 1,
        "src": "if runtime_metaclass is not type and stub.metaclass_type is None:",
        "target": "mypy.stubtest._verify_metaclass"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"type[type]\")",
        "offset": 0,
        "src": "if runtime_metaclass is not type and stub.metaclass_type is None:",
        "target": "mypy.stubtest._verify_metaclass"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 6,
        "src": "runtime,",
        "target": "mypy.stubtest._verify_metaclass"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"type[type[Any]]\")",
        "offset": 2,
        "src": "runtime_desc=f\"{runtime_metaclass}\",",
        "target": "mypy.stubtest._verify_metaclass"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"type[type[Any]]\")",
        "offset": 3,
        "src": "runtime_metaclass is type",
        "target": "mypy.stubtest._verify_metaclass"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"type[type]\")",
        "offset": 0,
        "src": "runtime_metaclass is type",
        "target": "mypy.stubtest._verify_metaclass"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 13,
        "src": "runtime,",
        "target": "mypy.stubtest._verify_metaclass"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchCallable[Iterator[Error], (Node | Missing, Any | Missing, list[str]) -> Iterator[Error]]\")",
        "offset": 6,
        "src": "@verify.register(nodes.TypeInfo)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchRegisterCallable[TypeInfo, _SingleDispatchCallable[Iterator[Error], (Node | Missing, Any | Missing, list[str]) -> Iterator[Error]]]\")",
        "offset": 0,
        "src": "@verify.register(nodes.TypeInfo)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"(TypeInfo, type[Any] | Missing, list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "@verify.register(nodes.TypeInfo)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "def verify_typeinfo(",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-decorated",
        "column": 0,
        "message": "Type of decorated function contains type \"Any\" (\"(TypeInfo, type[Any] | Missing, list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "def verify_typeinfo(",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"type[Any] | Missing\")",
        "offset": 3,
        "src": "if isinstance(runtime, Missing):",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 3,
        "src": "if not isinstance(runtime, type):",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[type]\")",
        "offset": 0,
        "src": "if not isinstance(runtime, type):",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "unreachable",
        "column": 8,
        "message": "Statement is unreachable",
        "offset": 1,
        "src": "yield Error(object_path, \"is not a type\", stub, runtime, stub_desc=repr(stub))",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 3,
        "src": "yield from _verify_final(stub, runtime, object_path)",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 1,
        "src": "yield from _verify_metaclass(stub, runtime, object_path)",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"MappingProxyType[str, Any]\")",
        "offset": 6,
        "src": "m for m in vars(runtime) if not is_probably_private(m) and m not in IGNORABLE_CLASS_DUNDERS",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 0,
        "src": "m for m in vars(runtime) if not is_probably_private(m) and m not in IGNORABLE_CLASS_DUNDERS",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 19,
        "src": "runtime_attr = getattr(runtime, mangled_entry)",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 0,
        "src": "runtime_attr = getattr(runtime, mangled_entry)",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "runtime_attr = inspect.getattr_static(runtime, mangled_entry, MISSING)",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 0,
        "src": "runtime_attr = inspect.getattr_static(runtime, mangled_entry, MISSING)",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 11,
        "src": "and isinstance(runtime_attr, types.WrapperDescriptorType)",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "yield from verify(stub_to_verify, runtime_attr, object_path + [entry])",
        "target": "mypy.stubtest.verify_typeinfo"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def _static_lookup_runtime(object_path: list[str]) -> MaybeMissing[Any]:",
        "target": "mypy.stubtest._static_lookup_runtime"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 13,
        "src": "def _verify_static_class_methods(",
        "target": "mypy.stubtest._verify_static_class_methods"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "if inspect.isbuiltin(runtime):",
        "target": "mypy.stubtest._verify_static_class_methods"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 3,
        "src": "probably_class_method = isinstance(getattr(runtime, \"__self__\", None), type)",
        "target": "mypy.stubtest._verify_static_class_methods"
      },
      {
        "code": "no-any-expr",
        "column": 79,
        "message": "Expression type contains \"Any\" (has type \"type[type]\")",
        "offset": 0,
        "src": "probably_class_method = isinstance(getattr(runtime, \"__self__\", None), type)",
        "target": "mypy.stubtest._verify_static_class_methods"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 7,
        "src": "if static_runtime is MISSING:",
        "target": "mypy.stubtest._verify_static_class_methods"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 3,
        "src": "if isinstance(static_runtime, classmethod) and not stub.is_class:",
        "target": "mypy.stubtest._verify_static_class_methods"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 2,
        "src": "if not isinstance(static_runtime, classmethod) and stub.is_class:",
        "target": "mypy.stubtest._verify_static_class_methods"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 2,
        "src": "if isinstance(static_runtime, staticmethod) and not stub.is_static:",
        "target": "mypy.stubtest._verify_static_class_methods"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 2,
        "src": "if not isinstance(static_runtime, staticmethod) and stub.is_static:",
        "target": "mypy.stubtest._verify_static_class_methods"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"type[Parameter]\")",
        "offset": 24,
        "src": "if runtime_arg.kind == inspect.Parameter.POSITIONAL_ONLY and names_approx_match(",
        "target": "mypy.stubtest._verify_arg_name"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 17,
        "src": "if runtime_arg.default != inspect.Parameter.empty:",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"type[Parameter]\")",
        "offset": 0,
        "src": "if runtime_arg.default != inspect.Parameter.empty:",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "runtime_type = get_mypy_type_of_runtime_value(runtime_arg.default)",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 12,
        "src": "and type(runtime_arg.default) != object",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "and type(runtime_arg.default) != object",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "and runtime_arg.default is not ...",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 11,
        "src": "stub_default is not UNKNOWN",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "stub_default != runtime_arg.default",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "stub_default != runtime_arg.default",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "stub_default != runtime_arg.default",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 3,
        "src": "or type(stub_default) is not type(runtime_arg.default)  # noqa: E721",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "or type(stub_default) is not type(runtime_arg.default)  # noqa: E721",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "f'runtime argument \"{runtime_arg.name}\" '",
        "target": "mypy.stubtest._verify_arg_default_value"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 29,
        "src": "def get_name(arg: Any) -> str:",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(arg, inspect.Parameter):",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[Parameter]\")",
        "offset": 0,
        "src": "if isinstance(arg, inspect.Parameter):",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if isinstance(arg, nodes.Argument):",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 4,
        "src": "def get_type(arg: Any) -> str | None:",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(arg, inspect.Parameter):",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[Parameter]\")",
        "offset": 0,
        "src": "if isinstance(arg, inspect.Parameter):",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if isinstance(arg, nodes.Argument):",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 4,
        "src": "def has_default(arg: Any) -> bool:",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(arg, inspect.Parameter):",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[Parameter]\")",
        "offset": 0,
        "src": "if isinstance(arg, inspect.Parameter):",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return bool(arg.default != inspect.Parameter.empty)",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression type contains \"Any\" (has type \"type[Parameter]\")",
        "offset": 0,
        "src": "return bool(arg.default != inspect.Parameter.empty)",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(arg, nodes.Argument):",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 4,
        "src": "def get_desc(arg: Any) -> str:",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "arg_type = get_type(arg)",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "get_name(arg)",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "+ (\" = ...\" if has_default(arg) else \"\")",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> (bool, str)\")",
        "offset": 3,
        "src": "kw_only = sorted(self.kwonly.values(), key=lambda a: (has_default(a), get_name(a)))",
        "target": "mypy.stubtest.Signature.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"type[Parameter]\")",
        "offset": 33,
        "src": "inspect.Parameter.POSITIONAL_ONLY,",
        "target": "mypy.stubtest.Signature.from_inspect_signature"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"type[Parameter]\")",
        "offset": 1,
        "src": "inspect.Parameter.POSITIONAL_OR_KEYWORD,",
        "target": "mypy.stubtest.Signature.from_inspect_signature"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"type[Parameter]\")",
        "offset": 3,
        "src": "elif runtime_arg.kind == inspect.Parameter.KEYWORD_ONLY:",
        "target": "mypy.stubtest.Signature.from_inspect_signature"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"type[Parameter]\")",
        "offset": 2,
        "src": "elif runtime_arg.kind == inspect.Parameter.VAR_POSITIONAL:",
        "target": "mypy.stubtest.Signature.from_inspect_signature"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"type[Parameter]\")",
        "offset": 2,
        "src": "elif runtime_arg.kind == inspect.Parameter.VAR_KEYWORD:",
        "target": "mypy.stubtest.Signature.from_inspect_signature"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"type[Parameter]\")",
        "offset": 94,
        "src": "runtime_arg.kind == inspect.Parameter.POSITIONAL_ONLY",
        "target": "mypy.stubtest._verify_signature"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"type[Parameter]\")",
        "offset": 11,
        "src": "runtime_arg.kind != inspect.Parameter.POSITIONAL_ONLY",
        "target": "mypy.stubtest._verify_signature"
      },
      {
        "code": "no-any-expr",
        "column": 65,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 46,
        "src": "if runtime.varkw is None or not set(runtime.kwonly).issubset(set(stub.kwonly)):",
        "target": "mypy.stubtest._verify_signature"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression type contains \"Any\" (has type \"set[str | Any]\")",
        "offset": 31,
        "src": "if not set(runtime.kwonly).issubset(set(stub.kwonly) | stub_pos_names):",
        "target": "mypy.stubtest._verify_signature"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchCallable[Iterator[Error], (Node | Missing, Any | Missing, list[str]) -> Iterator[Error]]\")",
        "offset": 6,
        "src": "@verify.register(nodes.FuncItem)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchRegisterCallable[FuncItem, _SingleDispatchCallable[Iterator[Error], (Node | Missing, Any | Missing, list[str]) -> Iterator[Error]]]\")",
        "offset": 0,
        "src": "@verify.register(nodes.FuncItem)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"(FuncItem, Any | Missing, list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "@verify.register(nodes.FuncItem)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "def verify_funcitem(",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-decorated",
        "column": 0,
        "message": "Type of decorated function contains type \"Any\" (\"(FuncItem, Any | Missing, list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "def verify_funcitem(",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 3,
        "src": "if isinstance(runtime, Missing):",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "if not is_probably_a_function(runtime):",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, \"is not a function\", stub, runtime)",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if not callable(runtime):",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 4,
        "src": "static_runtime = _static_lookup_runtime(object_path)",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "for error_text in _verify_abstract_status(stub, runtime):",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, error_text, stub, runtime)",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "for error_text in _verify_final_method(stub, runtime, static_runtime):",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 0,
        "src": "for error_text in _verify_final_method(stub, runtime, static_runtime):",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, error_text, stub, runtime)",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "for message in _verify_static_class_methods(stub, runtime, static_runtime, object_path):",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 63,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 0,
        "src": "for message in _verify_static_class_methods(stub, runtime, static_runtime, object_path):",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 70,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, \"is inconsistent, \" + message, stub, runtime)",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "signature = safe_inspect_signature(runtime)",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "runtime_is_coroutine = inspect.iscoroutinefunction(runtime)",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 18,
        "src": "runtime,",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "possibly-undefined",
        "column": 37,
        "message": "Name \"stub_sig\" may be undefined",
        "offset": 8,
        "src": "for message in _verify_signature(stub_sig, runtime_sig, function_name=stub.name):",
        "target": "mypy.stubtest"
      },
      {
        "code": "possibly-undefined",
        "column": 47,
        "message": "Name \"runtime_sig\" may be undefined",
        "offset": 0,
        "src": "for message in _verify_signature(stub_sig, runtime_sig, function_name=stub.name):",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "runtime,",
        "target": "mypy.stubtest.verify_funcitem"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchCallable[Iterator[Error], (Node | Missing, Any | Missing, list[str]) -> Iterator[Error]]\")",
        "offset": 5,
        "src": "@verify.register(Missing)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchRegisterCallable[Missing, _SingleDispatchCallable[Iterator[Error], (Node | Missing, Any | Missing, list[str]) -> Iterator[Error]]]\")",
        "offset": 0,
        "src": "@verify.register(Missing)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"(Missing, Any | Missing, list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "@verify.register(Missing)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "def verify_none(",
        "target": "mypy.stubtest.verify_none"
      },
      {
        "code": "no-any-decorated",
        "column": 0,
        "message": "Type of decorated function contains type \"Any\" (\"(Missing, Any | Missing, list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "def verify_none(",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 61,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 3,
        "src": "yield Error(object_path, \"is not present in stub\", stub, runtime)",
        "target": "mypy.stubtest.verify_none"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchCallable[Iterator[Error], (Node | Missing, Any | Missing, list[str]) -> Iterator[Error]]\")",
        "offset": 3,
        "src": "@verify.register(nodes.Var)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchRegisterCallable[Var, _SingleDispatchCallable[Iterator[Error], (Node | Missing, Any | Missing, list[str]) -> Iterator[Error]]]\")",
        "offset": 0,
        "src": "@verify.register(nodes.Var)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"(Var, Any | Missing, list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "@verify.register(nodes.Var)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "def verify_var(",
        "target": "mypy.stubtest.verify_var"
      },
      {
        "code": "no-any-decorated",
        "column": 0,
        "message": "Type of decorated function contains type \"Any\" (\"(Var, Any | Missing, list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "def verify_var(",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 3,
        "src": "if isinstance(runtime, Missing):",
        "target": "mypy.stubtest.verify_var"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 8,
        "src": "and is_read_only_property(runtime)",
        "target": "mypy.stubtest.verify_var"
      },
      {
        "code": "no-any-expr",
        "column": 86,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "yield Error(object_path, \"is read-only at runtime but not in the stub\", stub, runtime)",
        "target": "mypy.stubtest.verify_var"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "runtime_type = get_mypy_type_of_runtime_value(runtime)",
        "target": "mypy.stubtest.verify_var"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "if isinstance(runtime, enum.Enum):",
        "target": "mypy.stubtest.verify_var"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "runtime_type = get_mypy_type_of_runtime_value(runtime.value)",
        "target": "mypy.stubtest.verify_var"
      },
      {
        "code": "no-any-expr",
        "column": 89,
        "message": "Expression type contains \"Any\" (has type \"Enum | Any\")",
        "offset": 6,
        "src": "object_path, f\"variable differs from runtime type {runtime_type}\", stub, runtime",
        "target": "mypy.stubtest.verify_var"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchCallable[Iterator[Error], (Node | Missing, Any | Missing, list[str]) -> Iterator[Error]]\")",
        "offset": 4,
        "src": "@verify.register(nodes.OverloadedFuncDef)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchRegisterCallable[OverloadedFuncDef, _SingleDispatchCallable[Iterator[Error], (Node | Missing, Any | Missing, list[str]) -> Iterator[Error]]]\")",
        "offset": 0,
        "src": "@verify.register(nodes.OverloadedFuncDef)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"(OverloadedFuncDef, Any | Missing, list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "@verify.register(nodes.OverloadedFuncDef)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "def verify_overloadedfuncdef(",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-decorated",
        "column": 0,
        "message": "Type of decorated function contains type \"Any\" (\"(OverloadedFuncDef, Any | Missing, list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "def verify_overloadedfuncdef(",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 3,
        "src": "if isinstance(runtime, Missing):",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "if is_read_only_property(runtime):",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 90,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, \"is read-only at runtime but not in the stub\", stub, runtime)",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if not is_probably_a_function(runtime):",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, \"is not a function\", stub, runtime)",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if not callable(runtime):",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 11,
        "src": "for msg in _verify_abstract_status(first_part.func, runtime):",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, msg, stub, runtime)",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 3,
        "src": "static_runtime = _static_lookup_runtime(object_path)",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "for message in _verify_static_class_methods(stub, runtime, static_runtime, object_path):",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 63,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 0,
        "src": "for message in _verify_static_class_methods(stub, runtime, static_runtime, object_path):",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 70,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, \"is inconsistent, \" + message, stub, runtime)",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "signature = safe_inspect_signature(runtime)",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 18,
        "src": "runtime,",
        "target": "mypy.stubtest.verify_overloadedfuncdef"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchCallable[Iterator[Error], (Node | Missing, Any | Missing, list[str]) -> Iterator[Error]]\")",
        "offset": 6,
        "src": "@verify.register(nodes.TypeVarExpr)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchRegisterCallable[TypeVarExpr, _SingleDispatchCallable[Iterator[Error], (Node | Missing, Any | Missing, list[str]) -> Iterator[Error]]]\")",
        "offset": 0,
        "src": "@verify.register(nodes.TypeVarExpr)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"(TypeVarExpr, Any | Missing, list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "@verify.register(nodes.TypeVarExpr)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "def verify_typevarexpr(",
        "target": "mypy.stubtest.verify_typevarexpr"
      },
      {
        "code": "no-any-decorated",
        "column": 0,
        "message": "Type of decorated function contains type \"Any\" (\"(TypeVarExpr, Any | Missing, list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "def verify_typevarexpr(",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 3,
        "src": "if isinstance(runtime, Missing):",
        "target": "mypy.stubtest.verify_typevarexpr"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "if not isinstance(runtime, TypeVar):",
        "target": "mypy.stubtest.verify_typevarexpr"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[TypeVar]\")",
        "offset": 0,
        "src": "if not isinstance(runtime, TypeVar):",
        "target": "mypy.stubtest.verify_typevarexpr"
      },
      {
        "code": "no-any-expr",
        "column": 59,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, \"is not a TypeVar\", stub, runtime)",
        "target": "mypy.stubtest.verify_typevarexpr"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchCallable[Iterator[Error], (Node | Missing, Any | Missing, list[str]) -> Iterator[Error]]\")",
        "offset": 4,
        "src": "@verify.register(nodes.ParamSpecExpr)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchRegisterCallable[ParamSpecExpr, _SingleDispatchCallable[Iterator[Error], (Node | Missing, Any | Missing, list[str]) -> Iterator[Error]]]\")",
        "offset": 0,
        "src": "@verify.register(nodes.ParamSpecExpr)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"(ParamSpecExpr, Any | Missing, list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "@verify.register(nodes.ParamSpecExpr)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "def verify_paramspecexpr(",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-decorated",
        "column": 0,
        "message": "Type of decorated function contains type \"Any\" (\"(ParamSpecExpr, Any | Missing, list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "def verify_paramspecexpr(",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 3,
        "src": "if isinstance(runtime, Missing):",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 4,
        "src": "getattr(typing, \"ParamSpec\", None),",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(Any | None, Any | None)\")",
        "offset": 0,
        "src": "getattr(typing, \"ParamSpec\", None),",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 1,
        "src": "getattr(typing_extensions, \"ParamSpec\", None),",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 2,
        "src": "paramspec_types = tuple(t for t in maybe_paramspec_types if t is not None)",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "paramspec_types = tuple(t for t in maybe_paramspec_types if t is not None)",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "paramspec_types = tuple(t for t in maybe_paramspec_types if t is not None)",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"Generator[Any, None, None]\")",
        "offset": 0,
        "src": "paramspec_types = tuple(t for t in maybe_paramspec_types if t is not None)",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"(Any | None, Any | None)\")",
        "offset": 0,
        "src": "paramspec_types = tuple(t for t in maybe_paramspec_types if t is not None)",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 64,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "paramspec_types = tuple(t for t in maybe_paramspec_types if t is not None)",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 1,
        "src": "if not paramspec_types or not isinstance(runtime, paramspec_types):",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if not paramspec_types or not isinstance(runtime, paramspec_types):",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "if not paramspec_types or not isinstance(runtime, paramspec_types):",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-expr",
        "column": 61,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, \"is not a ParamSpec\", stub, runtime)",
        "target": "mypy.stubtest.verify_paramspecexpr"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 4,
        "src": "def _verify_readonly_property(stub: nodes.Decorator, runtime: Any) -> Iterator[str]:",
        "target": "mypy.stubtest._verify_readonly_property"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if isinstance(runtime, property):",
        "target": "mypy.stubtest._verify_readonly_property"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"type[property]\")",
        "offset": 0,
        "src": "if isinstance(runtime, property):",
        "target": "mypy.stubtest._verify_readonly_property"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression type contains \"Any\" (has type \"(Any) -> Any | None\")",
        "offset": 1,
        "src": "yield from _verify_final_method(stub.func, runtime.fget, MISSING)",
        "target": "mypy.stubtest._verify_readonly_property"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if inspect.isdatadescriptor(runtime):",
        "target": "mypy.stubtest._verify_readonly_property"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "runtime_type = get_mypy_type_of_runtime_value(runtime)",
        "target": "mypy.stubtest._verify_readonly_property"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 2,
        "src": "stub.func.type.ret_type if isinstance(stub.func.type, mypy.types.CallableType) else None",
        "target": "mypy.stubtest._verify_readonly_property"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 11,
        "src": "def _verify_abstract_status(stub: nodes.FuncDef, runtime: Any) -> Iterator[str]:",
        "target": "mypy.stubtest._verify_abstract_status"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 2,
        "src": "runtime_abstract = getattr(runtime, \"__isabstractmethod__\", False)",
        "target": "mypy.stubtest._verify_abstract_status"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "runtime_abstract = getattr(runtime, \"__isabstractmethod__\", False)",
        "target": "mypy.stubtest._verify_abstract_status"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 2,
        "src": "if runtime_abstract and not stub_abstract:",
        "target": "mypy.stubtest._verify_abstract_status"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 5,
        "src": "def _verify_final_method(",
        "target": "mypy.stubtest._verify_final_method"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 5,
        "src": "if getattr(runtime, \"__final__\", False) or (",
        "target": "mypy.stubtest._verify_final_method"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if getattr(runtime, \"__final__\", False) or (",
        "target": "mypy.stubtest._verify_final_method"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 1,
        "src": "static_runtime is not MISSING and getattr(static_runtime, \"__final__\", False)",
        "target": "mypy.stubtest._verify_final_method"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "static_runtime is not MISSING and getattr(static_runtime, \"__final__\", False)",
        "target": "mypy.stubtest._verify_final_method"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "static_runtime is not MISSING and getattr(static_runtime, \"__final__\", False)",
        "target": "mypy.stubtest._verify_final_method"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 0,
        "src": "static_runtime is not MISSING and getattr(static_runtime, \"__final__\", False)",
        "target": "mypy.stubtest._verify_final_method"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchCallable[Iterator[Error], (Node | Missing, Any | Missing, list[str]) -> Iterator[Error]]\")",
        "offset": 53,
        "src": "@verify.register(nodes.Decorator)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchRegisterCallable[Decorator, _SingleDispatchCallable[Iterator[Error], (Node | Missing, Any | Missing, list[str]) -> Iterator[Error]]]\")",
        "offset": 0,
        "src": "@verify.register(nodes.Decorator)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"(Decorator, Any | Missing, list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "@verify.register(nodes.Decorator)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "def verify_decorator(",
        "target": "mypy.stubtest.verify_decorator"
      },
      {
        "code": "no-any-decorated",
        "column": 0,
        "message": "Type of decorated function contains type \"Any\" (\"(Decorator, Any | Missing, list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "def verify_decorator(",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 3,
        "src": "if isinstance(runtime, Missing):",
        "target": "mypy.stubtest.verify_decorator"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "for message in _verify_readonly_property(stub, runtime):",
        "target": "mypy.stubtest.verify_decorator"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, message, stub, runtime)",
        "target": "mypy.stubtest.verify_decorator"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "for message in _verify_abstract_status(stub.func, runtime):",
        "target": "mypy.stubtest.verify_decorator"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "yield Error(object_path, message, stub, runtime)",
        "target": "mypy.stubtest.verify_decorator"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "yield from verify(func, runtime, object_path)",
        "target": "mypy.stubtest.verify_decorator"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchCallable[Iterator[Error], (Node | Missing, Any | Missing, list[str]) -> Iterator[Error]]\")",
        "offset": 3,
        "src": "@verify.register(nodes.TypeAlias)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"_SingleDispatchRegisterCallable[TypeAlias, _SingleDispatchCallable[Iterator[Error], (Node | Missing, Any | Missing, list[str]) -> Iterator[Error]]]\")",
        "offset": 0,
        "src": "@verify.register(nodes.TypeAlias)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"(TypeAlias, Any | Missing, list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "@verify.register(nodes.TypeAlias)",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "def verify_typealias(",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-decorated",
        "column": 0,
        "message": "Type of decorated function contains type \"Any\" (\"(TypeAlias, Any | Missing, list[str]) -> Iterator[Error]\")",
        "offset": 0,
        "src": "def verify_typealias(",
        "target": "mypy.stubtest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"Any | Missing\")",
        "offset": 5,
        "src": "if isinstance(runtime, Missing):",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "truthy-bool",
        "column": 21,
        "message": "\"typing_extensions.get_origin\" returns \"ParamSpec\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 3,
        "src": "runtime_origin = get_origin(runtime) or runtime",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"ParamSpec | Any\")",
        "offset": 0,
        "src": "runtime_origin = get_origin(runtime) or runtime",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "runtime_origin = get_origin(runtime) or runtime",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "runtime_origin = get_origin(runtime) or runtime",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"ParamSpec | Any\")",
        "offset": 2,
        "src": "if not isinstance(runtime_origin, type):",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"type[type]\")",
        "offset": 0,
        "src": "if not isinstance(runtime_origin, type):",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "runtime,",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"ParamSpec | Any\")",
        "offset": 31,
        "src": "if runtime_origin is not Union and (",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 61,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "yield Error(object_path, \"is not a Union\", stub, runtime, stub_desc=str(stub_target))",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"Any | ()\")",
        "offset": 4,
        "src": "if tuple not in getattr(runtime_origin, \"__mro__\", ()):",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"ParamSpec | Any\")",
        "offset": 0,
        "src": "if tuple not in getattr(runtime_origin, \"__mro__\", ()):",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 65,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "object_path, \"is not a subclass of tuple\", stub, runtime, stub_desc=stub_desc",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 4,
        "src": "if isinstance(stub_target, mypy.types.CallableType):",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"ParamSpec | Any\")",
        "offset": 1,
        "src": "if runtime_origin is not collections.abc.Callable:",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 71,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "object_path, \"is not a type alias for Callable\", stub, runtime, stub_desc=stub_desc",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-expr",
        "column": 69,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "yield Error(object_path, \"is not a recognised type alias\", stub, runtime, stub_desc=stub_desc)",
        "target": "mypy.stubtest.verify_typealias"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 86,
        "src": "def is_probably_a_function(runtime: Any) -> bool:",
        "target": "mypy.stubtest.is_probably_a_function"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "isinstance(runtime, (types.FunctionType, types.BuiltinFunctionType))",
        "target": "mypy.stubtest.is_probably_a_function"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"type[FunctionType]\")",
        "offset": 0,
        "src": "isinstance(runtime, (types.FunctionType, types.BuiltinFunctionType))",
        "target": "mypy.stubtest.is_probably_a_function"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"(type[FunctionType], type[BuiltinFunctionType])\")",
        "offset": 0,
        "src": "isinstance(runtime, (types.FunctionType, types.BuiltinFunctionType))",
        "target": "mypy.stubtest.is_probably_a_function"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "or isinstance(runtime, (types.MethodType, types.BuiltinMethodType))",
        "target": "mypy.stubtest.is_probably_a_function"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"type[MethodType]\")",
        "offset": 0,
        "src": "or isinstance(runtime, (types.MethodType, types.BuiltinMethodType))",
        "target": "mypy.stubtest.is_probably_a_function"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"(type[MethodType], type[BuiltinFunctionType])\")",
        "offset": 0,
        "src": "or isinstance(runtime, (types.MethodType, types.BuiltinMethodType))",
        "target": "mypy.stubtest.is_probably_a_function"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "or (inspect.ismethoddescriptor(runtime) and callable(runtime))",
        "target": "mypy.stubtest.is_probably_a_function"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[property]\")",
        "offset": 5,
        "src": "return isinstance(runtime, property) and runtime.fset is None",
        "target": "mypy.stubtest.is_read_only_property"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression type contains \"Any\" (has type \"(Any, Any) -> None | None\")",
        "offset": 0,
        "src": "return isinstance(runtime, property) and runtime.fset is None",
        "target": "mypy.stubtest.is_read_only_property"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def safe_inspect_signature(runtime: Any) -> inspect.Signature | None:",
        "target": "mypy.stubtest.safe_inspect_signature"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "return inspect.signature(runtime)",
        "target": "mypy.stubtest.safe_inspect_signature"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 32,
        "src": "def get_mypy_type_of_runtime_value(runtime: Any) -> mypy.types.Type | None:",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "if runtime is None:",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "if isinstance(runtime, property):",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"type[property]\")",
        "offset": 0,
        "src": "if isinstance(runtime, property):",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 8,
        "src": "runtime,",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 9,
        "message": "Expression type contains \"Any\" (has type \"type[FunctionType]\")",
        "offset": 1,
        "src": "(types.FunctionType, types.BuiltinFunctionType, types.MethodType, types.BuiltinMethodType),",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 9,
        "message": "Expression type contains \"Any\" (has type \"(type[FunctionType], type[BuiltinFunctionType], type[MethodType], type[BuiltinFunctionType])\")",
        "offset": 0,
        "src": "(types.FunctionType, types.BuiltinFunctionType, types.MethodType, types.BuiltinMethodType),",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression type contains \"Any\" (has type \"type[MethodType]\")",
        "offset": 0,
        "src": "(types.FunctionType, types.BuiltinFunctionType, types.MethodType, types.BuiltinMethodType),",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"type[Parameter]\")",
        "offset": 15,
        "src": "None if arg.kind == inspect.Parameter.POSITIONAL_ONLY else arg.name",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "has_default = arg.default == inspect.Parameter.empty",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression type contains \"Any\" (has type \"type[Parameter]\")",
        "offset": 0,
        "src": "has_default = arg.default == inspect.Parameter.empty",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[Parameter]\")",
        "offset": 1,
        "src": "if arg.kind == inspect.Parameter.POSITIONAL_ONLY:",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "arg_kinds.append(nodes.ARG_POS if has_default else nodes.ARG_OPT)",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"type[Parameter]\")",
        "offset": 1,
        "src": "elif arg.kind == inspect.Parameter.POSITIONAL_OR_KEYWORD:",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "arg_kinds.append(nodes.ARG_POS if has_default else nodes.ARG_OPT)",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"type[Parameter]\")",
        "offset": 1,
        "src": "elif arg.kind == inspect.Parameter.KEYWORD_ONLY:",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "arg_kinds.append(nodes.ARG_NAMED if has_default else nodes.ARG_NAMED_OPT)",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"type[Parameter]\")",
        "offset": 1,
        "src": "elif arg.kind == inspect.Parameter.VAR_POSITIONAL:",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"type[Parameter]\")",
        "offset": 2,
        "src": "elif arg.kind == inspect.Parameter.VAR_KEYWORD:",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 19,
        "src": "stub = get_stub(type(runtime).__module__)",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "stub = get_stub(type(runtime).__module__)",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 3,
        "src": "type_name = type(runtime).__name__",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "type_name = type(runtime).__name__",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "if isinstance(runtime, tuple):",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 10,
        "src": "if isinstance(runtime, bytes):",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif isinstance(runtime, enum.Enum):",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif isinstance(runtime, (bool, int, str)):",
        "target": "mypy.stubtest.get_mypy_type_of_runtime_value"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 290,
        "src": "default=[],",
        "target": "mypy.stubtest.parse_options"
      }
    ],
    "mypy/subtypes.py": [
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 630,
        "src": "if isinstance(right, CallableType):",
        "target": "mypy.subtypes.SubtypeVisitor.visit_instance"
      },
      {
        "code": "no-any-expr",
        "column": 72,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 41,
        "src": "if isinstance(self.right, Parameters) or isinstance(self.right, CallableType):",
        "target": "mypy.subtypes.SubtypeVisitor.visit_parameters"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 2,
        "src": "if isinstance(right, CallableType):",
        "target": "mypy.subtypes.SubtypeVisitor.visit_parameters"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 13,
        "src": "if isinstance(right, CallableType):",
        "target": "mypy.subtypes.SubtypeVisitor.visit_callable_type"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 145,
        "src": "elif isinstance(right, CallableType):",
        "target": "mypy.subtypes.SubtypeVisitor.visit_overloaded"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 132,
        "src": "if isinstance(right, CallableType):",
        "target": "mypy.subtypes.SubtypeVisitor.visit_type_type"
      },
      {
        "code": "no-any-expr",
        "column": 71,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 128,
        "src": "if isinstance(subtype, NoneType) and isinstance(supertype, CallableType):",
        "target": "mypy.subtypes.is_protocol_implementation"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 86,
        "src": "if isinstance(getattr_type, CallableType):",
        "target": "mypy.subtypes.find_member"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 105,
        "src": "assert isinstance(signature, CallableType)",
        "target": "mypy.subtypes.find_node_type"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"(type[Overloaded], type[CallableType])\")",
        "offset": 19,
        "src": "if not isinstance(typ, (Overloaded, CallableType)):",
        "target": "mypy.subtypes.non_method_protocol_members"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 0,
        "src": "if not isinstance(typ, (Overloaded, CallableType)):",
        "target": "mypy.subtypes.non_method_protocol_members"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 432,
        "src": "def report(*args: Any) -> None:",
        "target": "mypy.subtypes.unify_generic_callable"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"(VarArg(Any)) -> None\")",
        "offset": 9,
        "src": "type, non_none_inferred_vars, report, context=target, allow_erased_callables=True",
        "target": "mypy.subtypes.unify_generic_callable"
      }
    ],
    "mypy/suggestions.py": [
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 178,
        "src": "if not isinstance(typ, CallableType):",
        "target": "mypy.suggestions.ArgUseFinder.visit_call_expr"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 149,
        "src": "if isinstance(fdef.type, CallableType):",
        "target": "mypy.suggestions.SuggestionEngine.get_starting_type"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"islice[tuple[Any, ...]]\")",
        "offset": 80,
        "src": "product = itertools.islice(itertools.product(*options), 0, self.max_guesses)",
        "target": "mypy.suggestions.SuggestionEngine.get_guesses"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"product[tuple[Any, ...]]\")",
        "offset": 0,
        "src": "product = itertools.islice(itertools.product(*options), 0, self.max_guesses)",
        "target": "mypy.suggestions.SuggestionEngine.get_guesses"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 1,
        "src": "return [refine_callable(base, base.copy_modified(arg_types=list(x))) for x in product]",
        "target": "mypy.suggestions.SuggestionEngine.get_guesses"
      },
      {
        "code": "no-any-expr",
        "column": 72,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "return [refine_callable(base, base.copy_modified(arg_types=list(x))) for x in product]",
        "target": "mypy.suggestions.SuggestionEngine.get_guesses"
      },
      {
        "code": "no-any-expr",
        "column": 86,
        "message": "Expression type contains \"Any\" (has type \"islice[tuple[Any, ...]]\")",
        "offset": 0,
        "src": "return [refine_callable(base, base.copy_modified(arg_types=list(x))) for x in product]",
        "target": "mypy.suggestions.SuggestionEngine.get_guesses"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> (int, int)\")",
        "offset": 37,
        "src": "best = min(guesses, key=lambda s: (count_errors(errors[s]), self.score_callable(s)))",
        "target": "mypy.suggestions.SuggestionEngine.find_best"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 13,
        "src": "if isinstance(typ, CallableType) and len(typ.arg_types) == len(node.arguments):",
        "target": "mypy.suggestions.SuggestionEngine.get_guesses_from_parent"
      },
      {
        "code": "possibly-undefined",
        "column": 24,
        "message": "Name \"arg\" may be undefined",
        "offset": 68,
        "src": "args.append(arg)",
        "target": "mypy.suggestions"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 121,
        "src": "and isinstance(dec.callee.node.type, CallableType)",
        "target": "mypy.suggestions.SuggestionEngine.extract_from_decorator"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 72,
        "src": "return json.dumps([obj], sort_keys=True)",
        "target": "mypy.suggestions.SuggestionEngine.json_suggestion"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 38,
        "src": "if isinstance(t, CallableType) and (has_any_type(t) or is_tricky_callable(t)):",
        "target": "mypy.suggestions.SuggestionEngine.score_type"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 25,
        "src": "if isinstance(t, CallableType) and is_tricky_callable(t):",
        "target": "mypy.suggestions.any_score_type"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"partial_fallback\" has type \"Instance\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 75,
        "src": "if t.partial_fallback and t.partial_fallback.type:",
        "target": "mypy.suggestions.TypeFormatter.visit_tuple_type"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 117,
        "src": "if isinstance(t, CallableType) and isinstance(s, CallableType):",
        "target": "mypy.suggestions.refine_type"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 0,
        "src": "if isinstance(t, CallableType) and isinstance(s, CallableType):",
        "target": "mypy.suggestions.refine_type"
      }
    ],
    "mypy/test/data.py": [
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 128,
        "src": "num = int(m.group(2))",
        "target": "mypy.test.data.parse_test_case"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 2,
        "src": "full = join(base_path, m.group(1))",
        "target": "mypy.test.data.parse_test_case"
      },
      {
        "code": "no-untyped-usage",
        "column": 8,
        "message": "Usage of untyped name \"suite\" in typed context",
        "offset": 166,
        "src": "suite = parent.obj()",
        "target": "mypy.test.data.DataDrivenTestCase.runtest"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Untyped\"",
        "offset": 0,
        "src": "suite = parent.obj()",
        "target": "mypy.test.data.DataDrivenTestCase.runtest"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Untyped\"",
        "offset": 1,
        "src": "suite.setup()",
        "target": "mypy.test.data.DataDrivenTestCase.runtest"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Untyped\"",
        "offset": 2,
        "src": "suite.run_case(self)",
        "target": "mypy.test.data.DataDrivenTestCase.runtest"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 29,
        "src": "num = int(m.group(1))",
        "target": "mypy.test.data.DataDrivenTestCase.setup"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 34,
        "src": "def repr_failure(self, excinfo: Any, style: Any | None = None) -> str:",
        "target": "mypy.test.data.DataDrivenTestCase.repr_failure"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if excinfo.errisinstance(SystemExit):",
        "target": "mypy.test.data.DataDrivenTestCase.repr_failure"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "excrepr = excinfo.exconly()",
        "target": "mypy.test.data.DataDrivenTestCase.repr_failure"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "self.parent._prunetraceback(excinfo)",
        "target": "mypy.test.data.DataDrivenTestCase.repr_failure"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "excrepr = excinfo.getrepr(style=\"short\")",
        "target": "mypy.test.data.DataDrivenTestCase.repr_failure"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "return f\"data: {self.file}:{self.line}:\\n{excrepr}\"",
        "target": "mypy.test.data.DataDrivenTestCase.repr_failure"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 17,
        "src": "parts = re.split(r\"[/\\\\]\", path)",
        "target": "mypy.test.data.module_from_path"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 1,
        "src": "del parts[0]",
        "target": "mypy.test.data.module_from_path"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 1,
        "src": "module = \".\".join(parts)",
        "target": "mypy.test.data.module_from_path"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 123,
        "src": "if m.group(1) == \"E\":",
        "target": "mypy.test.data.expand_errors"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "if m.group(1) == \"E\":",
        "target": "mypy.test.data.expand_errors"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 2,
        "src": "elif m.group(1) == \"N\":",
        "target": "mypy.test.data.expand_errors"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "elif m.group(1) == \"N\":",
        "target": "mypy.test.data.expand_errors"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 2,
        "src": "elif m.group(1) == \"W\":",
        "target": "mypy.test.data.expand_errors"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "elif m.group(1) == \"W\":",
        "target": "mypy.test.data.expand_errors"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 2,
        "src": "col = m.group(\"col\")",
        "target": "mypy.test.data.expand_errors"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "message = m.group(\"message\")",
        "target": "mypy.test.data.expand_errors"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "message = message.replace(\"\\\\#\", \"#\")  # adds back escaped # character",
        "target": "mypy.test.data.expand_errors"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "if col is None:",
        "target": "mypy.test.data.expand_errors"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "output.append(f\"{fnam}:{i + 1}: {severity}: {message}\")",
        "target": "mypy.test.data.expand_errors"
      },
      {
        "code": "possibly-undefined",
        "column": 34,
        "message": "Name \"severity\" may be undefined",
        "offset": 0,
        "src": "output.append(f\"{fnam}:{i + 1}: {severity}: {message}\")",
        "target": "mypy.test.data"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 2,
        "src": "output.append(f\"{fnam}:{i + 1}:{col}: {severity}: {message}\")",
        "target": "mypy.test.data.expand_errors"
      },
      {
        "code": "possibly-undefined",
        "column": 34,
        "message": "Name \"severity\" may be undefined",
        "offset": 0,
        "src": "output.append(f\"{fnam}:{i + 1}:{col}: {severity}: {message}\")",
        "target": "mypy.test.data"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"tuple[str | Any, ...]\")",
        "offset": 13,
        "src": "filename, lineno, message = m.groups()",
        "target": "mypy.test.data.fix_win_path"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "filename, lineno, message = m.groups()",
        "target": "mypy.test.data.fix_win_path"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "return \"{}:{}{}\".format(filename.replace(\"\\\\\", \"/\"), lineno or \"\", message)",
        "target": "mypy.test.data.fix_win_path"
      },
      {
        "code": "no-any-expr",
        "column": 61,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "return \"{}:{}{}\".format(filename.replace(\"\\\\\", \"/\"), lineno or \"\", message)",
        "target": "mypy.test.data.fix_win_path"
      },
      {
        "code": "no-any-expr",
        "column": 75,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "return \"{}:{}{}\".format(filename.replace(\"\\\\\", \"/\"), lineno or \"\", message)",
        "target": "mypy.test.data.fix_win_path"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 12,
        "src": "line[: m.start(1)], m.group(\"filename\").replace(\"\\\\\", \"/\"), line[m.end(1) :]",
        "target": "mypy.test.data.fix_cobertura_filename"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 13,
        "src": "def pytest_addoption(parser: Any) -> None:",
        "target": "mypy.test.data.pytest_addoption"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "group = parser.getgroup(\"mypy\")",
        "target": "mypy.test.data.pytest_addoption"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "group.addoption(",
        "target": "mypy.test.data.pytest_addoption"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "group.addoption(",
        "target": "mypy.test.data.pytest_addoption"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "group.addoption(",
        "target": "mypy.test.data.pytest_addoption"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "group.addoption(",
        "target": "mypy.test.data.pytest_addoption"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "group.addoption(",
        "target": "mypy.test.data.pytest_addoption"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 11,
        "src": "def pytest_pycollect_makeitem(collector: Any, name: str, obj: object) -> Any | None:",
        "target": "mypy.test.data.pytest_pycollect_makeitem"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"type[type]\")",
        "offset": 5,
        "src": "if isinstance(obj, type):",
        "target": "mypy.test.data.pytest_pycollect_makeitem"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Untyped\"",
        "offset": 6,
        "src": "return DataSuiteCollector.from_parent(  # type: ignore[unused-ignore, no-untyped-call]",
        "target": "mypy.test.data.pytest_pycollect_makeitem"
      },
      {
        "code": null,
        "column": 19,
        "message": "Error code \"no-any-expr\" not covered by \"type: ignore\" comment",
        "offset": 0,
        "src": "return DataSuiteCollector.from_parent(  # type: ignore[unused-ignore, no-untyped-call]",
        "target": null
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "parent=collector, name=name",
        "target": "mypy.test.data.pytest_pycollect_makeitem"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 17,
        "src": "cases = re.split(",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 11,
        "src": "line_no = cases[0].count(\"\\n\") + 1",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "line_no = cases[0].count(\"\\n\") + 1",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 0,
        "src": "line_no = cases[0].count(\"\\n\") + 1",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 2,
        "src": "for i in range(1, len(cases), NUM_GROUPS):",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 73,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 1,
        "src": "name, writescache, only_when, platform_flag, skip, xfail, data = cases[i : i + NUM_GROUPS]",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 73,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "name, writescache, only_when, platform_flag, skip, xfail, data = cases[i : i + NUM_GROUPS]",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "if name in test_names:",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 3,
        "src": "name, parent.name, line_no",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 0,
        "src": "name, parent.name, line_no",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 3,
        "src": "platform = platform_flag[1:] if platform_flag else None",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 0,
        "src": "platform = platform_flag[1:] if platform_flag else None",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "platform = platform_flag[1:] if platform_flag else None",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Untyped\"",
        "offset": 1,
        "src": "yield DataDrivenTestCase.from_parent(  # type: ignore[unused-ignore, no-untyped-call]",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": null,
        "column": 14,
        "message": "Error code \"no-any-expr\" not covered by \"type: ignore\" comment",
        "offset": 0,
        "src": "yield DataDrivenTestCase.from_parent(  # type: ignore[unused-ignore, no-untyped-call]",
        "target": null
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 4,
        "src": "name=add_test_name_suffix(name, suite.test_name_suffix),",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "writescache=bool(writescache),",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "only_when=only_when,",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 1,
        "src": "platform=platform,",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "skip=bool(skip),",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "xfail=bool(xfail),",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "data=data,",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 1,
        "src": "line=line_no,",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 2,
        "src": "line_no += data.count(\"\\n\") + 1",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "line_no += data.count(\"\\n\") + 1",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 0,
        "src": "line_no += data.count(\"\\n\") + 1",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"set[Any (unannotated)]\")",
        "offset": 3,
        "src": "test_names.update({name})  # type: ignore[no-untyped-call]",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": null,
        "column": 8,
        "message": "Error code \"no-any-expr\" not covered by \"type: ignore\" comment",
        "offset": 0,
        "src": "test_names.update({name})  # type: ignore[no-untyped-call]",
        "target": null
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"set[str | Any]\")",
        "offset": 0,
        "src": "test_names.update({name})  # type: ignore[no-untyped-call]",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": null,
        "column": 26,
        "message": "Error code \"no-any-expr\" not covered by \"type: ignore\" comment",
        "offset": 0,
        "src": "test_names.update({name})  # type: ignore[no-untyped-call]",
        "target": null
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"set[Any (unannotated)]\")",
        "offset": 0,
        "src": "test_names.update({name})  # type: ignore[no-untyped-call]",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "test_names.update({name})  # type: ignore[no-untyped-call]",
        "target": "mypy.test.data.split_test_cases"
      },
      {
        "code": null,
        "column": 27,
        "message": "Error code \"no-any-expr\" not covered by \"type: ignore\" comment",
        "offset": 0,
        "src": "test_names.update({name})  # type: ignore[no-untyped-call]",
        "target": null
      },
      {
        "code": "no-untyped-usage",
        "column": 27,
        "message": "Usage of untyped name \"obj\" in typed context",
        "offset": 8,
        "src": "suite: DataSuite = self.obj",
        "target": "mypy.test.data.DataSuiteCollector.collect"
      },
      {
        "code": "no-untyped-usage",
        "column": 8,
        "message": "Usage of untyped name \"collector\" in typed context",
        "offset": 22,
        "src": "collector = super().from_parent(parent, name=name)",
        "target": "mypy.test.data.DataFileCollector.from_parent"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Untyped\"",
        "offset": 0,
        "src": "collector = super().from_parent(parent, name=name)",
        "target": "mypy.test.data.DataFileCollector.from_parent"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Untyped\"",
        "offset": 1,
        "src": "assert isinstance(collector, DataFileCollector)",
        "target": "mypy.test.data.DataFileCollector.from_parent"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Untyped\"",
        "offset": 6,
        "src": "suite=self.parent.obj,",
        "target": "mypy.test.data.DataFileCollector.collect"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Untyped\"",
        "offset": 1,
        "src": "file=os.path.join(self.parent.obj.data_prefix, self.name),",
        "target": "mypy.test.data.DataFileCollector.collect"
      }
    ],
    "mypy/test/helpers.py": [
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 125,
        "src": "actual_normalized = sorted(set(actual).difference({\"__main__\"}))",
        "target": "mypy.test.helpers.assert_module_equivalence"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 181,
        "src": "def retry_on_error(func: Callable[[], Any], max_wait: float = 1.0) -> None:",
        "target": "mypy.test.helpers.retry_on_error"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 71,
        "src": "flag_list: list[str] = flags.group(1).split()",
        "target": "mypy.test.helpers.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Untyped\"",
        "offset": 34,
        "src": "if testcase.config.getoption(\"--mypy-verbose\"):",
        "target": "mypy.test.helpers.parse_options"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"Any | str\")",
        "offset": 99,
        "src": "base_version = getattr(mypy.version, \"base_based_version\", version)",
        "target": "mypy.test.helpers.normalize_file_output"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"Any | str\")",
        "offset": 1,
        "src": "result = [re.sub(r\"\\b\" + re.escape(base_version) + r\"\\b\", \"$VERSION\", x) for x in result]",
        "target": "mypy.test.helpers.normalize_file_output"
      }
    ],
    "mypy/test/testcheck.py": [
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 63,
        "src": "if lxml is None and os.path.basename(testcase.file) == \"check-reports.test\":",
        "target": "mypy.test.testcheck.TypeCheckSuite.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 15,
        "src": "if m and int(m.group(1)) > num_steps:",
        "target": "mypy.test.testcheck.TypeCheckSuite.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"False | Untyped\")",
        "offset": 113,
        "src": "if output != a and testcase.config.getoption(\"--update-data\", False):",
        "target": "mypy.test.testcheck.TypeCheckSuite.run_case_once"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Untyped\"",
        "offset": 0,
        "src": "if output != a and testcase.config.getoption(\"--update-data\", False):",
        "target": "mypy.test.testcheck.TypeCheckSuite.run_case_once"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 68,
        "src": "p = m.group(1)",
        "target": "mypy.test.testcheck.TypeCheckSuite.find_error_message_paths"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"set[str | Any]\")",
        "offset": 1,
        "src": "hits.add(p)",
        "target": "mypy.test.testcheck.TypeCheckSuite.find_error_message_paths"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "hits.add(p)",
        "target": "mypy.test.testcheck.TypeCheckSuite.find_error_message_paths"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"set[str | Any]\")",
        "offset": 1,
        "src": "return hits",
        "target": "mypy.test.testcheck.TypeCheckSuite.find_error_message_paths"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 11,
        "src": "meta = build.find_cache_meta(id, path, manager)",
        "target": "mypy.test.testcheck.TypeCheckSuite.find_missing_cache_files"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 1,
        "src": "if not build.validate_meta(meta, id, path, ignore_errors, manager):",
        "target": "mypy.test.testcheck.TypeCheckSuite.find_missing_cache_files"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"CacheMeta | None\")",
        "offset": 0,
        "src": "if not build.validate_meta(meta, id, path, ignore_errors, manager):",
        "target": "mypy.test.testcheck.TypeCheckSuite.find_missing_cache_files"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 35,
        "src": "module_names = m.group(1)",
        "target": "mypy.test.testcheck.TypeCheckSuite.parse_module"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 4,
        "src": "for module_name in module_names.split(\" \"):",
        "target": "mypy.test.testcheck.TypeCheckSuite.parse_module"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "for module_name in module_names.split(\" \"):",
        "target": "mypy.test.testcheck.TypeCheckSuite.parse_module"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"list[str] | Any\")",
        "offset": 0,
        "src": "for module_name in module_names.split(\" \"):",
        "target": "mypy.test.testcheck.TypeCheckSuite.parse_module"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "path = cache.find_module(module_name)",
        "target": "mypy.test.testcheck.TypeCheckSuite.parse_module"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "assert isinstance(path, str), f\"Can't find ad hoc case file: {module_name}\"",
        "target": "mypy.test.testcheck.TypeCheckSuite.parse_module"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[(str | Any, str, str)]\")",
        "offset": 3,
        "src": "out.append((module_name, path, program_text))",
        "target": "mypy.test.testcheck.TypeCheckSuite.parse_module"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "out.append((module_name, path, program_text))",
        "target": "mypy.test.testcheck.TypeCheckSuite.parse_module"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"(str | Any, str, str)\")",
        "offset": 0,
        "src": "out.append((module_name, path, program_text))",
        "target": "mypy.test.testcheck.TypeCheckSuite.parse_module"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"list[(str | Any, str, str)]\")",
        "offset": 1,
        "src": "return out",
        "target": "mypy.test.testcheck.TypeCheckSuite.parse_module"
      }
    ],
    "mypy/test/testcmdline.py": [
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 48,
        "src": "if lxml is None and os.path.basename(testcase.file) == \"reports.test\":",
        "target": "mypy.test.testcmdline.PythonCmdlineSuite.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 43,
        "src": "result = process.returncode",
        "target": "mypy.test.testcmdline.test_python_cmdline"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"list[str] | int | Any\")",
        "offset": 18,
        "src": "if err or result:",
        "target": "mypy.test.testcmdline.test_python_cmdline"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 0,
        "src": "if err or result:",
        "target": "mypy.test.testcmdline.test_python_cmdline"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"(str, int | Any, str)\")",
        "offset": 3,
        "src": "% (\" on step %d\" % step if testcase.output2 else \"\", result, \"\\n\".join(err + out))",
        "target": "mypy.test.testcmdline.test_python_cmdline"
      },
      {
        "code": "no-any-expr",
        "column": 69,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 0,
        "src": "% (\" on step %d\" % step if testcase.output2 else \"\", result, \"\\n\".join(err + out))",
        "target": "mypy.test.testcmdline.test_python_cmdline"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 7,
        "src": "if obvious_result != result:",
        "target": "mypy.test.testcmdline.test_python_cmdline"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 0,
        "src": "if obvious_result != result:",
        "target": "mypy.test.testcmdline.test_python_cmdline"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 1,
        "src": "out.append(f\"== Return code: {result}\")",
        "target": "mypy.test.testcmdline.test_python_cmdline"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 27,
        "src": "return m.group(1).split()",
        "target": "mypy.test.testcmdline.parse_args"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"list[str] | Any\")",
        "offset": 0,
        "src": "return m.group(1).split()",
        "target": "mypy.test.testcmdline.parse_args"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 15,
        "src": "return m.group(1) if m else None",
        "target": "mypy.test.testcmdline.parse_cwd"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 0,
        "src": "return m.group(1) if m else None",
        "target": "mypy.test.testcmdline.parse_cwd"
      }
    ],
    "mypy/test/testdaemon.py": [
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"(int, Any)\")",
        "offset": 101,
        "src": "return err.returncode, err.output",
        "target": "mypy.test.testdaemon.run_cmd"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return err.returncode, err.output",
        "target": "mypy.test.testdaemon.run_cmd"
      }
    ],
    "mypy/test/testfinegrained.py": [
      {
        "code": "unreachable",
        "column": 12,
        "message": "Statement is unreachable",
        "offset": 81,
        "src": "return",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 90,
        "src": "response = server.check(sources, export_types=True, is_tty=False, terminal_width=-1)",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.run_check"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "out = response[\"out\"] or response[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.run_check"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "out = response[\"out\"] or response[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.run_check"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "out = response[\"out\"] or response[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.run_check"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "out = response[\"out\"] or response[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.run_check"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert isinstance(out, str)",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.run_check"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 24,
        "src": "return int(m.group(1))",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.get_build_steps"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 90,
        "src": "paths = [os.path.join(test_temp_dir, path) for path in m.group(1).strip().split()]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.parse_sources"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "paths = [os.path.join(test_temp_dir, path) for path in m.group(1).strip().split()]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.parse_sources"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "paths = [os.path.join(test_temp_dir, path) for path in m.group(1).strip().split()]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.parse_sources"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression type contains \"Any\" (has type \"list[str] | Any\")",
        "offset": 0,
        "src": "paths = [os.path.join(test_temp_dir, path) for path in m.group(1).strip().split()]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.parse_sources"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 17,
        "src": "flex_any = float(m.group(1)) if m else None",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 2,
        "src": "use_fixme = m.group(1) if m else None",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 0,
        "src": "use_fixme = m.group(1) if m else None",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 2,
        "src": "max_guesses = int(m.group(1)) if m else None",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-explicit",
        "column": 12,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "res: dict[str, Any] = server.cmd_suggest(",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"str | Any | None\")",
        "offset": 6,
        "src": "use_fixme=use_fixme,",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 4,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "val = val.replace(\"\\\\\\\\\", \"\\\\\")",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "val = val.replace(os.path.realpath(tmp_dir) + os.path.sep, \"\")",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "output.extend(val.strip().split(\"\\n\"))",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 8,
        "src": "show = m.group(1) if m else \"type\"",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 7,
        "src": "limit = int(m.group(1)) if m else 0",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_inspect"
      },
      {
        "code": "no-any-explicit",
        "column": 12,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 6,
        "src": "res: dict[str, Any] = server.cmd_inspect(",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 1,
        "src": "show,",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 10,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "val = res[\"error\"] if \"error\" in res else res[\"out\"] + res[\"err\"]",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "output.extend(val.strip().split(\"\\n\"))",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.maybe_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 6,
        "src": "m = re.findall(regex, program_text, flags=re.MULTILINE)",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.get_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return m",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.get_suggest"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 5,
        "src": "m = re.findall(regex, program_text, flags=re.MULTILINE)",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.get_inspect"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "return m",
        "target": "mypy.test.testfinegrained.FineGrainedSuite.get_inspect"
      }
    ],
    "mypy/test/testinfer.py": [
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 164,
        "src": "d.items(), [({0, 1}, {\"group1\"}), ({2, 3, 4}, {\"group2\"}), ({5, 6, 7}, {\"group3\"})]",
        "target": "mypy.test.testinfer.OperandDisjointDictSuite.test_independent_maps"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 14,
        "src": "[",
        "target": "mypy.test.testinfer.OperandDisjointDictSuite.test_partial_merging"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 17,
        "src": "[({0, 1, 2, 3, 4, 10, 11, 12, 13, 14, 15, 16}, {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"})],",
        "target": "mypy.test.testinfer.OperandDisjointDictSuite.test_full_merging"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 11,
        "src": "self.assertEqual(d.items(), [({0, 1, 2, 3, 4, 5, 6}, {\"a\", \"b\", \"c\", \"d\", \"e\"})])",
        "target": "mypy.test.testinfer.OperandDisjointDictSuite.test_merge_with_multiple_overlaps"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 29,
        "src": "[(\"==\", [0, 1]), (\"==\", [1, 2]), (\"<\", [2, 3]), (\"==\", [3, 4])],",
        "target": "mypy.test.testinfer.OperandComparisonGroupingSuite.test_basic_cases"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 4,
        "src": "[(\"==\", [0, 1, 2]), (\"<\", [2, 3]), (\"==\", [3, 4])],",
        "target": "mypy.test.testinfer.OperandComparisonGroupingSuite.test_basic_cases"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 4,
        "src": "[(\"==\", [0, 1]), (\"==\", [1, 2]), (\"<\", [2, 3]), (\"==\", [3, 4])],",
        "target": "mypy.test.testinfer.OperandComparisonGroupingSuite.test_basic_cases"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 4,
        "src": "[(\"==\", [0, 1, 2]), (\"<\", [2, 3]), (\"==\", [3, 4])],",
        "target": "mypy.test.testinfer.OperandComparisonGroupingSuite.test_basic_cases"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 17,
        "src": "[(\"==\", [0, 1, 2]), (\"is\", [2, 3, 4])],",
        "target": "mypy.test.testinfer.OperandComparisonGroupingSuite.test_multiple_groups"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 8,
        "src": "[(\"==\", [0, 1, 2, 3, 4])],",
        "target": "mypy.test.testinfer.OperandComparisonGroupingSuite.test_multiple_groups"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 8,
        "src": "[(\"is\", [0, 1]), (\"==\", [1, 2, 3, 4])],",
        "target": "mypy.test.testinfer.OperandComparisonGroupingSuite.test_multiple_groups"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 8,
        "src": "[(\"is\", [0, 1, 2]), (\"<\", [2, 3]), (\"==\", [3, 4, 5])],",
        "target": "mypy.test.testinfer.OperandComparisonGroupingSuite.test_multiple_groups"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 58,
        "src": "[(\"==\", [0, 1, 2]), (\"is\", [2, 3, 4])],",
        "target": "mypy.test.testinfer.OperandComparisonGroupingSuite.test_multiple_groups_different_operators"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 26,
        "src": "self.assertEqual(group_comparison_operands([], {}, set()), [])",
        "target": "mypy.test.testinfer.OperandComparisonGroupingSuite.test_empty_pair_list"
      },
      {
        "code": "no-any-expr",
        "column": 68,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "self.assertEqual(group_comparison_operands([], {}, {\"==\"}), [])",
        "target": "mypy.test.testinfer.OperandComparisonGroupingSuite.test_empty_pair_list"
      }
    ],
    "mypy/test/testmerge.py": [
      {
        "code": "unreachable",
        "column": 12,
        "message": "Statement is unreachable",
        "offset": 173,
        "src": "s = f\"? ({type(node.node)})\"",
        "target": "mypy.test.testmerge.ASTMergeSuite.format_symbol_table_node"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> Any\")",
        "offset": 18,
        "src": "for name, node in sorted(names.items(), key=lambda x: x[0]):",
        "target": "mypy.test.testmerge.ASTMergeSuite.dump_typeinfos_recursive"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for name, node in sorted(names.items(), key=lambda x: x[0]):",
        "target": "mypy.test.testmerge.ASTMergeSuite.dump_typeinfos_recursive"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> (Any, str, str)\")",
        "offset": 30,
        "src": "type_map, key=lambda n: (n.line, short_type(n), str(n) + str(type_map[n]))",
        "target": "mypy.test.testmerge.ASTMergeSuite.dump_types"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "type_map, key=lambda n: (n.line, short_type(n), str(n) + str(type_map[n]))",
        "target": "mypy.test.testmerge.ASTMergeSuite.dump_types"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression type contains \"Any\" (has type \"(Any, str, str)\")",
        "offset": 0,
        "src": "type_map, key=lambda n: (n.line, short_type(n), str(n) + str(type_map[n]))",
        "target": "mypy.test.testmerge.ASTMergeSuite.dump_types"
      }
    ],
    "mypy/test/testpep561.py": [
      {
        "code": "possibly-undefined",
        "column": 22,
        "message": "Name \"program\" may be undefined",
        "offset": 143,
        "src": "os.remove(program)",
        "target": "mypy.test.testpep561"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 15,
        "src": "return m.group(1).split()",
        "target": "mypy.test.testpep561.parse_mypy_args"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"list[str] | Any\")",
        "offset": 0,
        "src": "return m.group(1).split()",
        "target": "mypy.test.testpep561.parse_mypy_args"
      },
      {
        "code": "unreachable",
        "column": 4,
        "message": "Statement is unreachable",
        "offset": 5,
        "src": "packages = \"packages\"",
        "target": "mypy.test.testpep561.test_mypy_path_is_respected"
      }
    ],
    "mypy/test/testpythoneval.py": [
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 64,
        "src": "mypy_cmdline.extend(m.group(1).split())",
        "target": "mypy.test.testpythoneval.test_python_evaluation"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"list[str] | Any\")",
        "offset": 0,
        "src": "mypy_cmdline.extend(m.group(1).split())",
        "target": "mypy.test.testpythoneval.test_python_evaluation"
      }
    ],
    "mypy/test/testreports.py": [
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 18,
        "src": "@pytest.mark.skipif(lxml is None, reason=\"Cannot import lxml. Is it installed?\")",
        "target": "mypy.test.testreports"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 5,
        "src": "@pytest.mark.skipif(lxml is None, reason=\"Cannot import lxml. Is it installed?\")",
        "target": "mypy.test.testreports"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 11,
        "src": "child_package.classes[\"class\"] = etree.Element(\"class\")",
        "target": "mypy.test.testreports.CoberturaReportSuite.test_as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 0,
        "src": "child_package.classes[\"class\"] = etree.Element(\"class\")",
        "target": "mypy.test.testreports.CoberturaReportSuite.test_as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any (from unimported type)\"",
        "offset": 19,
        "src": "expected_output, etree.tostring(cobertura_package.as_xml(), pretty_print=True)",
        "target": "mypy.test.testreports.CoberturaReportSuite.test_as_xml"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "expected_output, etree.tostring(cobertura_package.as_xml(), pretty_print=True)",
        "target": "mypy.test.testreports.CoberturaReportSuite.test_as_xml"
      }
    ],
    "mypy/test/teststubgen.py": [
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"[_FT: (...) -> Any] (_FT) -> _FT\")",
        "offset": 52,
        "src": "@unittest.skipIf(sys.platform == \"win32\", \"clean up fails on Windows\")",
        "target": "mypy.test.teststubgen"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"[_FT: (...) -> Any] (_FT) -> _FT\")",
        "offset": 26,
        "src": "@unittest.skipIf(sys.platform == \"win32\", \"clean up fails on Windows\")",
        "target": "mypy.test.teststubgen"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"[_FT: (...) -> Any] (_FT) -> _FT\")",
        "offset": 25,
        "src": "@unittest.skipIf(sys.platform == \"win32\", \"clean up fails on Windows\")",
        "target": "mypy.test.teststubgen"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 21,
        "src": "def run(self, result: Any | None = None) -> Any | None:",
        "target": "mypy.test.teststubgen.StubgenCmdLineSuite.run"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 2,
        "src": "return super().run(result)",
        "target": "mypy.test.teststubgen.StubgenCmdLineSuite.run"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 16,
        "src": "{\"mypy\", \"mypy.errors\", \"mypy.stubgen\", \"mypy.test\", \"mypy.test.helpers\"}",
        "target": "mypy.test.teststubgen.StubgenCliParseSuite.test_walk_packages"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"[_FT: (...) -> Any] (_FT) -> _FT\")",
        "offset": 436,
        "src": "@unittest.skipIf(sys.platform == \"win32\", \"Tests building the paths common ancestor on *nix\")",
        "target": "mypy.test.teststubgen"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"[_FT: (...) -> Any] (_FT) -> _FT\")",
        "offset": 16,
        "src": "@unittest.skipIf(",
        "target": "mypy.test.teststubgen"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 134,
        "src": "flag_list = flags.group(1).split()",
        "target": "mypy.test.teststubgen.StubgenPythonSuite.parse_flags"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"list[str] | Any\")",
        "offset": 0,
        "src": "flag_list = flags.group(1).split()",
        "target": "mypy.test.teststubgen.StubgenPythonSuite.parse_flags"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"list[str] | Any\")",
        "offset": 3,
        "src": "options = parse_options(flag_list + extra)",
        "target": "mypy.test.teststubgen.StubgenPythonSuite.parse_flags"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"list[str] | Any\")",
        "offset": 1,
        "src": "if \"--verbose\" not in flag_list:",
        "target": "mypy.test.teststubgen.StubgenPythonSuite.parse_flags"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 9,
        "src": "return modules.group(1).split()",
        "target": "mypy.test.teststubgen.StubgenPythonSuite.parse_modules"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"list[str] | Any\")",
        "offset": 0,
        "src": "return modules.group(1).split()",
        "target": "mypy.test.teststubgen.StubgenPythonSuite.parse_modules"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"type[TestClass]\")",
        "offset": 161,
        "src": "TestClass,",
        "target": "mypy.test.teststubgen.StubgencSuite.test_generate_c_type_inheritance_builtin_type"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 244,
        "src": "TestClass.attribute,",
        "target": "mypy.test.teststubgen.StubgencSuite.test_generate_c_property_with_pybind11"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "is_c_property_readonly(TestClass.attribute),",
        "target": "mypy.test.teststubgen.StubgencSuite.test_generate_c_property_with_pybind11"
      }
    ],
    "mypy/test/teststubtest.py": [
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 141,
        "src": "def collect_cases(fn: Callable[..., Iterator[Case]]) -> Callable[..., None]:",
        "target": "mypy.test.teststubtest.collect_cases"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 8,
        "src": "def test(*args: Any, **kwargs: Any) -> None:",
        "target": "mypy.test.teststubtest.collect_cases"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 1,
        "src": "cases = list(fn(*args, **kwargs))",
        "target": "mypy.test.teststubtest.collect_cases"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "cases = list(fn(*args, **kwargs))",
        "target": "mypy.test.teststubtest.collect_cases"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"(VarArg(Any), KwArg(Any)) -> None\")",
        "offset": 24,
        "src": "return test",
        "target": "mypy.test.teststubtest.collect_cases"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 4,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_basic_good(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 18,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_types(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 21,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_coroutines(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 9,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_arg_name(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 40,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_arg_kind(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 33,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_default_presence(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 34,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_default_value(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 52,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_static_class_method(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 64,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_arg_mismatch(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 17,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_varargs_varkwargs(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 66,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_overload(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 55,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_property(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 103,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_var(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 63,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_type_alias(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 211,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_enum(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 19,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_decorator(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 16,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_all_at_runtime_not_stub(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 9,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_all_in_stub_not_at_runtime(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 3,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_all_in_stub_different_to_all_at_runtime(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 16,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_missing(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 33,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_missing_no_runtime_all(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 8,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_non_public_1(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 6,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_non_public_2(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 5,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_dunders(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 28,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_not_subclassable(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 10,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_has_runtime_final_decorator(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 256,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_name_mangling(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 58,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_mro(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 31,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_good_literal(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 33,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_bad_literal(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 35,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_special_subtype(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 34,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_protocol(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 19,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_type_var(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 14,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_metaclass_match(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 48,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_metaclass_abcmeta(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 13,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_abstract_methods(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"((...) -> Iterator[Case]) -> (...) -> None\")",
        "offset": 97,
        "src": "@collect_cases",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-decorated",
        "column": 4,
        "message": "Type of decorated function contains type \"Any\" (\"(...) -> None\")",
        "offset": 1,
        "src": "def test_abstract_properties(self) -> Iterator[Case]:",
        "target": "mypy.test.teststubtest"
      },
      {
        "code": "no-any-explicit",
        "column": 8,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 226,
        "src": "def f(a: int, b: int, *, c: int, d: int = 0, **kwargs: Any) -> None:",
        "target": "mypy.test.teststubtest.StubtestMiscUnit.test_signature"
      },
      {
        "code": "no-any-expr",
        "column": 81,
        "message": "Expression type contains \"Any\" (has type \"(int, int, NamedArg(int, 'c'), DefaultNamedArg(int, 'd'), KwArg(Any)) -> None\")",
        "offset": 4,
        "src": "str(mypy.stubtest.Signature.from_inspect_signature(inspect.signature(f)))",
        "target": "mypy.test.teststubtest.StubtestMiscUnit.test_signature"
      }
    ],
    "mypy/test/testtypegen.py": [
      {
        "code": "truthy-bool",
        "column": 39,
        "message": "Expression has type \"Type\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 60,
        "src": "if node.line != -1 and map[node]:",
        "target": "mypy.test.testtypegen.TypeExportSuite.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> (Any, str, str)\")",
        "offset": 9,
        "src": "for key in sorted(keys, key=lambda n: (n.line, short_type(n), str(n) + str(map[n]))):",
        "target": "mypy.test.testtypegen.TypeExportSuite.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for key in sorted(keys, key=lambda n: (n.line, short_type(n), str(n) + str(map[n]))):",
        "target": "mypy.test.testtypegen.TypeExportSuite.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression type contains \"Any\" (has type \"(Any, str, str)\")",
        "offset": 0,
        "src": "for key in sorted(keys, key=lambda n: (n.line, short_type(n), str(n) + str(map[n]))):",
        "target": "mypy.test.testtypegen.TypeExportSuite.run_case"
      }
    ],
    "mypy/test/testtypes.py": [
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 937,
        "src": "assert isinstance(j, CallableType)",
        "target": "mypy.test.testtypes.JoinSuite.test_simple_type_objects"
      }
    ],
    "mypy/type_visitor.py": [
      {
        "code": "no-any-explicit",
        "column": 12,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 253,
        "src": "cast(Any, t.partial_fallback.accept(self)),",
        "target": "mypy.type_visitor.TypeTranslator.visit_tuple_type"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "cast(Any, t.partial_fallback.accept(self)),",
        "target": "mypy.type_visitor.TypeTranslator.visit_tuple_type"
      },
      {
        "code": "no-any-explicit",
        "column": 12,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 11,
        "src": "cast(Any, t.fallback.accept(self)),",
        "target": "mypy.type_visitor.TypeTranslator.visit_typeddict_type"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "cast(Any, t.fallback.accept(self)),",
        "target": "mypy.type_visitor.TypeTranslator.visit_typeddict_type"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 28,
        "src": "assert isinstance(new, CallableType)  # type: ignore[misc]",
        "target": "mypy.type_visitor.TypeTranslator.visit_overloaded"
      },
      {
        "code": null,
        "column": 35,
        "message": "Error code changed to no-any-expr; \"type: ignore\" comment may be out of date",
        "offset": 0,
        "src": "assert isinstance(new, CallableType)  # type: ignore[misc]",
        "target": null
      }
    ],
    "mypy/typeanal.py": [
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 1310,
        "src": "assert isinstance(ret, CallableType)",
        "target": "mypy.typeanal.TypeAnalyser.analyze_callable_type"
      }
    ],
    "mypy/typeops.py": [
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 159,
        "src": "if isinstance(signature, CallableType):",
        "target": "mypy.typeops.type_object_type_from_function"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 127,
        "src": "assert isinstance(method, CallableType)",
        "target": "mypy.typeops.bind_self"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 53,
        "src": "if isinstance(original_type, CallableType) and original_type.is_type_obj():",
        "target": "mypy.typeops.bind_self"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 362,
        "src": "if isinstance(callee, CallableType):",
        "target": "mypy.typeops._get_type_special_method_bool_ret_type"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 329,
        "src": "sum_types: dict[str, tuple[set[Any], list[int]]] = {}",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"dict[str, (set[Any], list[int])]\")",
        "offset": 6,
        "src": "if fullname not in sum_types:",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, (set[Any], list[int])]\")",
        "offset": 1,
        "src": "sum_types[fullname] = (",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 1,
        "src": "set(typ.fallback.get_enum_values())",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"(set[Any], list[int])\")",
        "offset": 0,
        "src": "set(typ.fallback.get_enum_values())",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 2,
        "src": "else {True, False},",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"dict[str, (set[Any], list[int])]\")",
        "offset": 3,
        "src": "literals, indexes = sum_types[fullname]",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"(set[Any], list[int])\")",
        "offset": 0,
        "src": "literals, indexes = sum_types[fullname]",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 0,
        "src": "literals, indexes = sum_types[fullname]",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 1,
        "src": "literals.discard(typ.value)",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"set[Any]\")",
        "offset": 2,
        "src": "if not literals:",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 6,
        "src": "proper_types, [(i not in marked_for_deletion) for i in range(len(proper_types))]",
        "target": "mypy.typeops.try_contracting_literals_in_union"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 60,
        "src": "if isinstance(typ, CallableType) and typ.is_type_obj():",
        "target": "mypy.typeops.custom_special_method"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 82,
        "src": "assert isinstance(impl_func.unanalyzed_type, CallableType)",
        "target": "mypy.typeops.infer_impl_from_parts"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 1,
        "src": "assert isinstance(impl_func.type, CallableType)",
        "target": "mypy.typeops.infer_impl_from_parts"
      }
    ],
    "mypy/types.py": [
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 44,
        "src": "JsonDict: _TypeAlias = Dict[str, Any]",
        "target": "mypy.types"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 121,
        "src": "_dummy: Final[Any] = object()",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 224,
        "src": "\"args\": [arg.serialize() for arg in self.args],",
        "target": "mypy.types.TypeAliasType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"args\": [arg.serialize() for arg in self.args],",
        "target": "mypy.types.TypeAliasType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "assert data[\".class\"] == \"TypeAliasType\"",
        "target": "mypy.types.TypeAliasType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 182,
        "src": "values: Bogus[list[Type]] = _dummy,",
        "target": "mypy.types.TypeVarType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "upper_bound: Bogus[Type] = _dummy,",
        "target": "mypy.types.TypeVarType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "id: Bogus[TypeVarId | int] = _dummy,",
        "target": "mypy.types.TypeVarType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "self.id if id is _dummy else id,",
        "target": "mypy.types.TypeVarType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "self.values if values is _dummy else values,",
        "target": "mypy.types.TypeVarType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "self.upper_bound if upper_bound is _dummy else upper_bound,",
        "target": "mypy.types.TypeVarType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 23,
        "src": "return {",
        "target": "mypy.types.TypeVarType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 6,
        "src": "\"values\": [v.serialize() for v in self.values],",
        "target": "mypy.types.TypeVarType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"values\": [v.serialize() for v in self.values],",
        "target": "mypy.types.TypeVarType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 8,
        "src": "assert data[\".class\"] == \"TypeVarType\"",
        "target": "mypy.types.TypeVarType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "[deserialize_type(v) for v in data[\"values\"]],",
        "target": "mypy.types.TypeVarType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[deserialize_type(v) for v in data[\"values\"]],",
        "target": "mypy.types.TypeVarType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 73,
        "src": "id: Bogus[TypeVarId | int] = _dummy,",
        "target": "mypy.types.ParamSpecType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "prefix: Bogus[Parameters] = _dummy,",
        "target": "mypy.types.ParamSpecType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "id if id is not _dummy else self.id,",
        "target": "mypy.types.ParamSpecType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "prefix=prefix if prefix is not _dummy else self.prefix,",
        "target": "mypy.types.ParamSpecType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 25,
        "src": "return {",
        "target": "mypy.types.ParamSpecType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 12,
        "src": "assert data[\".class\"] == \"ParamSpecType\"",
        "target": "mypy.types.ParamSpecType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 33,
        "src": "return {",
        "target": "mypy.types.TypeVarTupleType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 11,
        "src": "assert data[\".class\"] == \"TypeVarTupleType\"",
        "target": "mypy.types.TypeVarTupleType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression has type \"Any\"",
        "offset": 25,
        "src": "def copy_modified(self, id: Bogus[TypeVarId | int] = _dummy) -> TypeVarTupleType:",
        "target": "mypy.types.TypeVarTupleType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "self.id if id is _dummy else id,",
        "target": "mypy.types.TypeVarTupleType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 65,
        "message": "Expression has type \"Any\"",
        "offset": 62,
        "src": "def copy_modified(self, args: Bogus[Sequence[Type] | None] = _dummy) -> UnboundType:",
        "target": "mypy.types.UnboundType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if args is _dummy:",
        "target": "mypy.types.UnboundType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 31,
        "src": "return {",
        "target": "mypy.types.UnboundType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 3,
        "src": "\"args\": [a.serialize() for a in self.args],",
        "target": "mypy.types.UnboundType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"args\": [a.serialize() for a in self.args],",
        "target": "mypy.types.UnboundType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "assert data[\".class\"] == \"UnboundType\"",
        "target": "mypy.types.UnboundType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "[deserialize_type(a) for a in data[\"args\"]],",
        "target": "mypy.types.UnboundType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[deserialize_type(a) for a in data[\"args\"]],",
        "target": "mypy.types.UnboundType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 90,
        "src": "return {\".class\": \"UnpackType\", \"type\": self.type.serialize()}",
        "target": "mypy.types.UnpackType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "assert data[\".class\"] == \"UnpackType\"",
        "target": "mypy.types.UnpackType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 52,
        "src": "original_any: Bogus[AnyType | None] = _dummy,",
        "target": "mypy.types.AnyType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "if original_any is _dummy:",
        "target": "mypy.types.AnyType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 17,
        "src": "return {",
        "target": "mypy.types.AnyType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "assert data[\".class\"] == cls.__name__",
        "target": "mypy.types.AnyType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 108,
        "src": "return {\".class\": \"UninhabitedType\", \"is_noreturn\": self.is_noreturn}",
        "target": "mypy.types.UninhabitedType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "assert data[\".class\"] == \"UninhabitedType\"",
        "target": "mypy.types.UninhabitedType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 28,
        "src": "return {\".class\": \"NoneType\"}",
        "target": "mypy.types.NoneType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "assert data[\".class\"] == \"NoneType\"",
        "target": "mypy.types.NoneType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 43,
        "src": "return {\".class\": \"DeletedType\", \"source\": self.source}",
        "target": "mypy.types.DeletedType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "assert data[\".class\"] == \"DeletedType\"",
        "target": "mypy.types.DeletedType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 150,
        "src": "data[\"args\"] = [arg.serialize() for arg in self.args]",
        "target": "mypy.types.Instance.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 11,
        "src": "assert data[\".class\"] == \"Instance\"",
        "target": "mypy.types.Instance.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 15,
        "src": "args: Bogus[list[Type]] = _dummy,",
        "target": "mypy.types.Instance.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "last_known_value: Bogus[LiteralType | None] = _dummy,",
        "target": "mypy.types.Instance.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "args if args is not _dummy else self.args,",
        "target": "mypy.types.Instance.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "if last_known_value is not _dummy",
        "target": "mypy.types.Instance.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 116,
        "src": "arg_types: Bogus[Sequence[Type]] = _dummy,",
        "target": "mypy.types.Parameters.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "arg_kinds: Bogus[list[ArgKind]] = _dummy,",
        "target": "mypy.types.Parameters.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "arg_names: Bogus[Sequence[str | None]] = _dummy,",
        "target": "mypy.types.Parameters.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "variables: Bogus[Sequence[TypeVarLikeType]] = _dummy,",
        "target": "mypy.types.Parameters.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "is_ellipsis_args: Bogus[bool] = _dummy,",
        "target": "mypy.types.Parameters.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "arg_types=arg_types if arg_types is not _dummy else self.arg_types,",
        "target": "mypy.types.Parameters.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "arg_kinds=arg_kinds if arg_kinds is not _dummy else self.arg_kinds,",
        "target": "mypy.types.Parameters.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "arg_names=arg_names if arg_names is not _dummy else self.arg_names,",
        "target": "mypy.types.Parameters.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "is_ellipsis_args if is_ellipsis_args is not _dummy else self.is_ellipsis_args",
        "target": "mypy.types.Parameters.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "variables=variables if variables is not _dummy else self.variables,",
        "target": "mypy.types.Parameters.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 91,
        "src": "return {",
        "target": "mypy.types.Parameters.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 2,
        "src": "\"arg_types\": [t.serialize() for t in self.arg_types],",
        "target": "mypy.types.Parameters.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"arg_types\": [t.serialize() for t in self.arg_types],",
        "target": "mypy.types.Parameters.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"arg_kinds\": [int(x.value) for x in self.arg_kinds],",
        "target": "mypy.types.Parameters.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"arg_kinds\": [int(x.value) for x in self.arg_kinds],",
        "target": "mypy.types.Parameters.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 2,
        "src": "\"variables\": [tv.serialize() for tv in self.variables],",
        "target": "mypy.types.Parameters.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"variables\": [tv.serialize() for tv in self.variables],",
        "target": "mypy.types.Parameters.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "assert data[\".class\"] == \"Parameters\"",
        "target": "mypy.types.Parameters.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "[deserialize_type(t) for t in data[\"arg_types\"]],",
        "target": "mypy.types.Parameters.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[deserialize_type(t) for t in data[\"arg_types\"]],",
        "target": "mypy.types.Parameters.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "[ArgKind(x) for x in data[\"arg_kinds\"]],",
        "target": "mypy.types.Parameters.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[ArgKind(x) for x in data[\"arg_kinds\"]],",
        "target": "mypy.types.Parameters.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "variables=[cast(TypeVarLikeType, deserialize_type(v)) for v in data[\"variables\"]],",
        "target": "mypy.types.Parameters.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "variables=[cast(TypeVarLikeType, deserialize_type(v)) for v in data[\"variables\"]],",
        "target": "mypy.types.Parameters.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 14,
        "src": "if isinstance(other, Parameters) or isinstance(other, CallableType):",
        "target": "mypy.types.Parameters.__eq__"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 47,
        "src": "def __init__(",
        "target": "mypy.types.CallableType.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any] | None\")",
        "offset": 45,
        "src": "if def_extras:",
        "target": "mypy.types.CallableType.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "self.def_extras = def_extras",
        "target": "mypy.types.CallableType.__init__"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 8,
        "src": "if getattr(definition, \"arguments\", None):",
        "target": "mypy.types.CallableType.__init__"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 13,
        "src": "def copy_modified(",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "arg_types: Bogus[Sequence[Type]] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "arg_kinds: Bogus[list[ArgKind]] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "arg_names: Bogus[Sequence[str | None]] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "ret_type: Bogus[Type] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "fallback: Bogus[Instance] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "name: Bogus[str | None] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "definition: Bogus[SymbolNode] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 54,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "variables: Bogus[Sequence[TypeVarLikeType]] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "is_ellipsis_args: Bogus[bool] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "implicit: Bogus[bool] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "special_sig: Bogus[str | None] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "from_type_type: Bogus[bool] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "bound_args: Bogus[list[Type | None]] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "def_extras: Bogus[dict[str, Any]] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "type_guard: Bogus[Type | None] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "from_concatenate: Bogus[bool] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "unpack_kwargs: Bogus[bool] = _dummy,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "arg_types=arg_types if arg_types is not _dummy else self.arg_types,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "arg_kinds=arg_kinds if arg_kinds is not _dummy else self.arg_kinds,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "arg_names=arg_names if arg_names is not _dummy else self.arg_names,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "ret_type=ret_type if ret_type is not _dummy else self.ret_type,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "fallback=fallback if fallback is not _dummy else self.fallback,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "name=name if name is not _dummy else self.name,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "definition=definition if definition is not _dummy else self.definition,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "variables=variables if variables is not _dummy else self.variables,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "is_ellipsis_args if is_ellipsis_args is not _dummy else self.is_ellipsis_args",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "implicit=implicit if implicit is not _dummy else self.implicit,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "special_sig=special_sig if special_sig is not _dummy else self.special_sig,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "from_type_type=from_type_type if from_type_type is not _dummy else self.from_type_type,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "bound_args=bound_args if bound_args is not _dummy else self.bound_args,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "def_extras=def_extras if def_extras is not _dummy else dict(self.def_extras),",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "def_extras=def_extras if def_extras is not _dummy else dict(self.def_extras),",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "def_extras=def_extras if def_extras is not _dummy else dict(self.def_extras),",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "def_extras=def_extras if def_extras is not _dummy else dict(self.def_extras),",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 72,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "def_extras=def_extras if def_extras is not _dummy else dict(self.def_extras),",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 55,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "type_guard=type_guard if type_guard is not _dummy else self.type_guard,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 60,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "from_concatenate if from_concatenate is not _dummy else self.from_concatenate",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 64,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "unpack_kwargs=unpack_kwargs if unpack_kwargs is not _dummy else self.unpack_kwargs,",
        "target": "mypy.types.CallableType.copy_modified"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 233,
        "src": "if isinstance(other, CallableType):",
        "target": "mypy.types.CallableType.__eq__"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 17,
        "src": "return {",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 2,
        "src": "\"arg_types\": [t.serialize() for t in self.arg_types],",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"arg_types\": [t.serialize() for t in self.arg_types],",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"arg_kinds\": [int(x.value) for x in self.arg_kinds],",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"arg_kinds\": [int(x.value) for x in self.arg_kinds],",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 6,
        "src": "\"variables\": [v.serialize() for v in self.variables],",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"variables\": [v.serialize() for v in self.variables],",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 3,
        "src": "\"bound_args\": [(None if t is None else t.serialize()) for t in self.bound_args],",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"bound_args\": [(None if t is None else t.serialize()) for t in self.bound_args],",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, dict[Any, Any])\")",
        "offset": 1,
        "src": "\"def_extras\": dict(self.def_extras),",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[Any, Any]\")",
        "offset": 0,
        "src": "\"def_extras\": dict(self.def_extras),",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "\"def_extras\": dict(self.def_extras),",
        "target": "mypy.types.CallableType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 8,
        "src": "assert data[\".class\"] == \"CallableType\"",
        "target": "mypy.types.CallableType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "[deserialize_type(t) for t in data[\"arg_types\"]],",
        "target": "mypy.types.CallableType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[deserialize_type(t) for t in data[\"arg_types\"]],",
        "target": "mypy.types.CallableType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "[ArgKind(x) for x in data[\"arg_kinds\"]],",
        "target": "mypy.types.CallableType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[ArgKind(x) for x in data[\"arg_kinds\"]],",
        "target": "mypy.types.CallableType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "variables=[cast(TypeVarLikeType, deserialize_type(v)) for v in data[\"variables\"]],",
        "target": "mypy.types.CallableType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "variables=[cast(TypeVarLikeType, deserialize_type(v)) for v in data[\"variables\"]],",
        "target": "mypy.types.CallableType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "bound_args=[(None if t is None else deserialize_type(t)) for t in data[\"bound_args\"]],",
        "target": "mypy.types.CallableType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "bound_args=[(None if t is None else deserialize_type(t)) for t in data[\"bound_args\"]],",
        "target": "mypy.types.CallableType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 65,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "bound_args=[(None if t is None else deserialize_type(t)) for t in data[\"bound_args\"]],",
        "target": "mypy.types.CallableType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 77,
        "src": "return {\".class\": \"Overloaded\", \"items\": [t.serialize() for t in self.items]}",
        "target": "mypy.types.Overloaded.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 0,
        "src": "return {\".class\": \"Overloaded\", \"items\": [t.serialize() for t in self.items]}",
        "target": "mypy.types.Overloaded.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "return {\".class\": \"Overloaded\", \"items\": [t.serialize() for t in self.items]}",
        "target": "mypy.types.Overloaded.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "assert data[\".class\"] == \"Overloaded\"",
        "target": "mypy.types.Overloaded.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return Overloaded([CallableType.deserialize(t) for t in data[\"items\"]])",
        "target": "mypy.types.Overloaded.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 0,
        "src": "return Overloaded([CallableType.deserialize(t) for t in data[\"items\"]])",
        "target": "mypy.types.Overloaded.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return Overloaded([CallableType.deserialize(t) for t in data[\"items\"]])",
        "target": "mypy.types.Overloaded.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 14,
        "src": "return {",
        "target": "mypy.types.NamedOverloaded.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 2,
        "src": "\"items\": [t.serialize() for t in self.items],",
        "target": "mypy.types.NamedOverloaded.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"items\": [t.serialize() for t in self.items],",
        "target": "mypy.types.NamedOverloaded.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "assert data[\".class\"] == \"NamedOverloaded\"",
        "target": "mypy.types.NamedOverloaded.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return NamedOverloaded([CallableType.deserialize(t) for t in data[\"items\"]], data[\"_name\"])",
        "target": "mypy.types.NamedOverloaded.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 0,
        "src": "return NamedOverloaded([CallableType.deserialize(t) for t in data[\"items\"]], data[\"_name\"])",
        "target": "mypy.types.NamedOverloaded.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return NamedOverloaded([CallableType.deserialize(t) for t in data[\"items\"]], data[\"_name\"])",
        "target": "mypy.types.NamedOverloaded.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 71,
        "src": "return {",
        "target": "mypy.types.TupleType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 2,
        "src": "\"items\": [t.serialize() for t in self.items],",
        "target": "mypy.types.TupleType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"items\": [t.serialize() for t in self.items],",
        "target": "mypy.types.TupleType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "assert data[\".class\"] == \"TupleType\"",
        "target": "mypy.types.TupleType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "[deserialize_type(t) for t in data[\"items\"]],",
        "target": "mypy.types.TupleType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[deserialize_type(t) for t in data[\"items\"]],",
        "target": "mypy.types.TupleType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 86,
        "src": "return {",
        "target": "mypy.types.TypedDictType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 2,
        "src": "\"items\": [[n, t.serialize()] for (n, t) in self.items.items()],",
        "target": "mypy.types.TypedDictType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"items\": [[n, t.serialize()] for (n, t) in self.items.items()],",
        "target": "mypy.types.TypedDictType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"required_keys\": sorted(self.required_keys),",
        "target": "mypy.types.TypedDictType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"required_keys\": sorted(self.required_keys),",
        "target": "mypy.types.TypedDictType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "assert data[\".class\"] == \"TypedDictType\"",
        "target": "mypy.types.TypedDictType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "{n: deserialize_type(t) for (n, t) in data[\"items\"]},",
        "target": "mypy.types.TypedDictType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "{n: deserialize_type(t) for (n, t) in data[\"items\"]},",
        "target": "mypy.types.TypedDictType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "{n: deserialize_type(t) for (n, t) in data[\"items\"]},",
        "target": "mypy.types.TypedDictType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 225,
        "src": "return {",
        "target": "mypy.types.LiteralType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 8,
        "src": "assert data[\".class\"] == \"LiteralType\"",
        "target": "mypy.types.LiteralType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 88,
        "src": "return {\".class\": \"UnionType\", \"items\": [t.serialize() for t in self.items]}",
        "target": "mypy.types.UnionType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 0,
        "src": "return {\".class\": \"UnionType\", \"items\": [t.serialize() for t in self.items]}",
        "target": "mypy.types.UnionType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "return {\".class\": \"UnionType\", \"items\": [t.serialize() for t in self.items]}",
        "target": "mypy.types.UnionType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "assert data[\".class\"] == \"UnionType\"",
        "target": "mypy.types.UnionType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return UnionType([deserialize_type(t) for t in data[\"items\"]])",
        "target": "mypy.types.UnionType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return UnionType([deserialize_type(t) for t in data[\"items\"]])",
        "target": "mypy.types.UnionType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 56,
        "src": "return {\".class\": \"IntersectionType\", \"items\": [t.serialize() for t in self.items]}",
        "target": "mypy.types.IntersectionType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 0,
        "src": "return {\".class\": \"IntersectionType\", \"items\": [t.serialize() for t in self.items]}",
        "target": "mypy.types.IntersectionType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "return {\".class\": \"IntersectionType\", \"items\": [t.serialize() for t in self.items]}",
        "target": "mypy.types.IntersectionType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "assert data[\".class\"] == \"IntersectionType\"",
        "target": "mypy.types.IntersectionType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return IntersectionType([deserialize_type(t) for t in data[\"items\"]])",
        "target": "mypy.types.IntersectionType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 50,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return IntersectionType([deserialize_type(t) for t in data[\"items\"]])",
        "target": "mypy.types.IntersectionType.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 131,
        "src": "return {\".class\": \"TypeType\", \"item\": self.item.serialize()}",
        "target": "mypy.types.TypeType.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "assert data[\".class\"] == \"TypeType\"",
        "target": "mypy.types.TypeType.deserialize"
      },
      {
        "code": "unreachable",
        "column": 12,
        "message": "Statement is unreachable",
        "offset": 217,
        "src": "s = f\"`{t.id}\"",
        "target": "mypy.types.TypeStrVisitor.visit_type_var"
      },
      {
        "code": "truthy-bool",
        "column": 30,
        "message": "Member \"upper_bound\" has type \"Type\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 13,
        "src": "if self.id_mapper and t.upper_bound:",
        "target": "mypy.types.TypeStrVisitor.visit_type_var"
      },
      {
        "code": "unreachable",
        "column": 12,
        "message": "Statement is unreachable",
        "offset": 11,
        "src": "s += f\"`{t.id}\"",
        "target": "mypy.types.TypeStrVisitor.visit_param_spec"
      },
      {
        "code": "unreachable",
        "column": 12,
        "message": "Statement is unreachable",
        "offset": 40,
        "src": "s = f\"`{t.id}\"",
        "target": "mypy.types.TypeStrVisitor.visit_type_var_tuple"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"partial_fallback\" has type \"Instance\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 96,
        "src": "if t.partial_fallback and t.partial_fallback.type:",
        "target": "mypy.types.TypeStrVisitor.visit_tuple_type"
      },
      {
        "code": "truthy-bool",
        "column": 11,
        "message": "Member \"fallback\" has type \"Instance\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 23,
        "src": "if t.fallback and t.fallback.type:",
        "target": "mypy.types.TypeStrVisitor.visit_typeddict_type"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 115,
        "src": "if isinstance(typ, CallableType):",
        "target": "mypy.types.strip_type"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 34,
        "src": "if isinstance(repl, CallableType) or isinstance(repl, Parameters):",
        "target": "mypy.types.InstantiateAliasVisitor.visit_callable_type"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"(type[ParamSpecType], type[Parameters], type[CallableType])\")",
        "offset": 18,
        "src": "elif isinstance(repl, (ParamSpecType, Parameters, CallableType)):",
        "target": "mypy.types.InstantiateAliasVisitor.visit_param_spec"
      },
      {
        "code": "no-any-expr",
        "column": 62,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 0,
        "src": "elif isinstance(repl, (ParamSpecType, Parameters, CallableType)):",
        "target": "mypy.types.InstantiateAliasVisitor.visit_param_spec"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 197,
        "src": "names: Final = globals().copy()",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 0,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "names.pop(\"NOT_READY\", None)",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"(str, Any)\")",
        "offset": 1,
        "src": "deserialize_map: Final = {",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "deserialize_map: Final = {",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "for key, obj in names.items()",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict_items[str, Any]\")",
        "offset": 0,
        "src": "for key, obj in names.items()",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(obj, type) and issubclass(obj, Type) and obj is not Type",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"type[type]\")",
        "offset": 0,
        "src": "if isinstance(obj, type) and issubclass(obj, Type) and obj is not Type",
        "target": "mypy.types"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 41,
        "src": "assert isinstance(repl, CallableType), \"Should not be able to get here.\"",
        "target": "mypy.types.expand_param_spec"
      }
    ],
    "mypy/util.py": [
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"bytes | Any\")",
        "offset": 122,
        "src": "line = 2 if result.group(1) else 1",
        "target": "mypy.util.find_python_encoding"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"bytes | Any\")",
        "offset": 1,
        "src": "encoding = result.group(3).decode(\"ascii\")",
        "target": "mypy.util.find_python_encoding"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "encoding = result.group(3).decode(\"ascii\")",
        "target": "mypy.util.find_python_encoding"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 2,
        "src": "if encoding.startswith((\"iso-latin-1-\", \"latin-1-\")) or encoding == \"iso-latin-1\":",
        "target": "mypy.util.find_python_encoding"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "if encoding.startswith((\"iso-latin-1-\", \"latin-1-\")) or encoding == \"iso-latin-1\":",
        "target": "mypy.util.find_python_encoding"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "if encoding.startswith((\"iso-latin-1-\", \"latin-1-\")) or encoding == \"iso-latin-1\":",
        "target": "mypy.util.find_python_encoding"
      },
      {
        "code": "no-any-expr",
        "column": 64,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "if encoding.startswith((\"iso-latin-1-\", \"latin-1-\")) or encoding == \"iso-latin-1\":",
        "target": "mypy.util.find_python_encoding"
      },
      {
        "code": "no-any-expr",
        "column": 64,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "if encoding.startswith((\"iso-latin-1-\", \"latin-1-\")) or encoding == \"iso-latin-1\":",
        "target": "mypy.util.find_python_encoding"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 2,
        "src": "return encoding, line",
        "target": "mypy.util.find_python_encoding"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"(str | Any, int)\")",
        "offset": 0,
        "src": "return encoding, line",
        "target": "mypy.util.find_python_encoding"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 238,
        "src": "new.__dict__ = dict(old.__dict__)",
        "target": "mypy.util.replace_object_state"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "setattr(new, attr, getattr(old, attr))",
        "target": "mypy.util.replace_object_state"
      }
    ],
    "mypy/visitor.py": [
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 364,
        "src": "def visit_mypy_file(self, o: mypy.nodes.MypyFile) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_mypy_file"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 6,
        "src": "def visit_var(self, o: mypy.nodes.Var) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_var"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 5,
        "src": "def visit_import(self, o: mypy.nodes.Import) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_import"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_import_from(self, o: mypy.nodes.ImportFrom) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_import_from"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_import_all(self, o: mypy.nodes.ImportAll) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_import_all"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 5,
        "src": "def visit_func_def(self, o: mypy.nodes.FuncDef) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_func_def"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_overloaded_func_def(self, o: mypy.nodes.OverloadedFuncDef) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_overloaded_func_def"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_class_def(self, o: mypy.nodes.ClassDef) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_class_def"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_global_decl(self, o: mypy.nodes.GlobalDecl) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_global_decl"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_nonlocal_decl(self, o: mypy.nodes.NonlocalDecl) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_nonlocal_decl"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_decorator(self, o: mypy.nodes.Decorator) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_decorator"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_type_alias(self, o: mypy.nodes.TypeAlias) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_type_alias"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_placeholder_node(self, o: mypy.nodes.PlaceholderNode) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_placeholder_node"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 5,
        "src": "def visit_block(self, o: mypy.nodes.Block) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_block"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_expression_stmt(self, o: mypy.nodes.ExpressionStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_expression_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_assignment_stmt(self, o: mypy.nodes.AssignmentStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_assignment_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_operator_assignment_stmt(self, o: mypy.nodes.OperatorAssignmentStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_operator_assignment_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_while_stmt(self, o: mypy.nodes.WhileStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_while_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_for_stmt(self, o: mypy.nodes.ForStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_for_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_return_stmt(self, o: mypy.nodes.ReturnStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_return_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_assert_stmt(self, o: mypy.nodes.AssertStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_assert_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_del_stmt(self, o: mypy.nodes.DelStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_del_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_if_stmt(self, o: mypy.nodes.IfStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_if_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_break_stmt(self, o: mypy.nodes.BreakStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_break_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_continue_stmt(self, o: mypy.nodes.ContinueStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_continue_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_pass_stmt(self, o: mypy.nodes.PassStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_pass_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_raise_stmt(self, o: mypy.nodes.RaiseStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_raise_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_try_stmt(self, o: mypy.nodes.TryStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_try_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_with_stmt(self, o: mypy.nodes.WithStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_with_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_match_stmt(self, o: mypy.nodes.MatchStmt) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_match_stmt"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 5,
        "src": "def visit_int_expr(self, o: mypy.nodes.IntExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_int_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_str_expr(self, o: mypy.nodes.StrExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_str_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_bytes_expr(self, o: mypy.nodes.BytesExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_bytes_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_float_expr(self, o: mypy.nodes.FloatExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_float_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_complex_expr(self, o: mypy.nodes.ComplexExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_complex_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_ellipsis(self, o: mypy.nodes.EllipsisExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_ellipsis"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_star_expr(self, o: mypy.nodes.StarExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_star_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_name_expr(self, o: mypy.nodes.NameExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_name_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_member_expr(self, o: mypy.nodes.MemberExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_member_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_yield_from_expr(self, o: mypy.nodes.YieldFromExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_yield_from_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_yield_expr(self, o: mypy.nodes.YieldExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_yield_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_call_expr(self, o: mypy.nodes.CallExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_call_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_op_expr(self, o: mypy.nodes.OpExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_op_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_comparison_expr(self, o: mypy.nodes.ComparisonExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_comparison_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_cast_expr(self, o: mypy.nodes.CastExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_cast_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_assert_type_expr(self, o: mypy.nodes.AssertTypeExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_assert_type_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_reveal_expr(self, o: mypy.nodes.RevealExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_reveal_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_super_expr(self, o: mypy.nodes.SuperExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_super_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_assignment_expr(self, o: mypy.nodes.AssignmentExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_assignment_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_unary_expr(self, o: mypy.nodes.UnaryExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_unary_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_list_expr(self, o: mypy.nodes.ListExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_list_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_dict_expr(self, o: mypy.nodes.DictExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_dict_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_tuple_expr(self, o: mypy.nodes.TupleExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_tuple_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_set_expr(self, o: mypy.nodes.SetExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_set_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_index_expr(self, o: mypy.nodes.IndexExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_index_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_type_application(self, o: mypy.nodes.TypeApplication) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_type_application"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_lambda_expr(self, o: mypy.nodes.LambdaExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_lambda_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_list_comprehension(self, o: mypy.nodes.ListComprehension) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_list_comprehension"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_set_comprehension(self, o: mypy.nodes.SetComprehension) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_set_comprehension"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_dictionary_comprehension(self, o: mypy.nodes.DictionaryComprehension) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_dictionary_comprehension"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_generator_expr(self, o: mypy.nodes.GeneratorExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_generator_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_slice_expr(self, o: mypy.nodes.SliceExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_slice_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_conditional_expr(self, o: mypy.nodes.ConditionalExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_conditional_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_type_var_expr(self, o: mypy.nodes.TypeVarExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_type_var_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_paramspec_expr(self, o: mypy.nodes.ParamSpecExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_paramspec_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_type_var_tuple_expr(self, o: mypy.nodes.TypeVarTupleExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_type_var_tuple_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_type_alias_expr(self, o: mypy.nodes.TypeAliasExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_type_alias_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_namedtuple_expr(self, o: mypy.nodes.NamedTupleExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_namedtuple_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_enum_call_expr(self, o: mypy.nodes.EnumCallExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_enum_call_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_typeddict_expr(self, o: mypy.nodes.TypedDictExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_typeddict_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_newtype_expr(self, o: mypy.nodes.NewTypeExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_newtype_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit__promote_expr(self, o: mypy.nodes.PromoteExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit__promote_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_await_expr(self, o: mypy.nodes.AwaitExpr) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_await_expr"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_temp_node(self, o: mypy.nodes.TempNode) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_temp_node"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 5,
        "src": "def visit_as_pattern(self, o: mypy.patterns.AsPattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_as_pattern"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_or_pattern(self, o: mypy.patterns.OrPattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_or_pattern"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_value_pattern(self, o: mypy.patterns.ValuePattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_value_pattern"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_singleton_pattern(self, o: mypy.patterns.SingletonPattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_singleton_pattern"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_sequence_pattern(self, o: mypy.patterns.SequencePattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_sequence_pattern"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_starred_pattern(self, o: mypy.patterns.StarredPattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_starred_pattern"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_mapping_pattern(self, o: mypy.patterns.MappingPattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_mapping_pattern"
      },
      {
        "code": "empty-body",
        "column": 4,
        "message": "Missing return statement",
        "offset": 3,
        "src": "def visit_class_pattern(self, o: mypy.patterns.ClassPattern) -> T:",
        "target": "mypy.visitor.NodeVisitor.visit_class_pattern"
      }
    ],
    "mypyc/analysis/dataflow.py": [
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 75,
        "src": "lines.append(\"exits: %s\" % sorted(self.exits, key=lambda e: int(e.label)))",
        "target": "mypyc.analysis.dataflow.CFG.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> int\")",
        "offset": 0,
        "src": "lines.append(\"exits: %s\" % sorted(self.exits, key=lambda e: int(e.label)))",
        "target": "mypyc.analysis.dataflow.CFG.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 58,
        "message": "Expression type contains \"Any\" (has type \"(Any) -> int\")",
        "offset": 0,
        "src": "lines.append(\"exits: %s\" % sorted(self.exits, key=lambda e: int(e.label)))",
        "target": "mypyc.analysis.dataflow.CFG.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 72,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "lines.append(\"exits: %s\" % sorted(self.exits, key=lambda e: int(e.label)))",
        "target": "mypyc.analysis.dataflow.CFG.__str__"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"type[dict[Any, Any]]\")",
        "offset": 85,
        "src": "AnalysisDict = Dict[Tuple[BasicBlock, int], Set[T]]",
        "target": "mypyc.analysis.dataflow"
      }
    ],
    "mypyc/build.py": [
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 387,
        "src": "headers.update(re.findall(r'#include \"(.*)\"', contents))",
        "target": "mypyc.build.get_header_deps"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 5,
        "src": "def mypyc_build(",
        "target": "mypyc.build.mypyc_build"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 28,
        "src": "if not skip_cgen_input:",
        "target": "mypyc.build.mypyc_build"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "group_cfiles = skip_cgen_input",
        "target": "mypyc.build.mypyc_build"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 19,
        "src": "def mypycify(",
        "target": "mypyc.build.mypycify"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 70,
        "src": "skip_cgen_input=skip_cgen_input,",
        "target": "mypyc.build.mypycify"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 9,
        "src": "compiler: Any = ccompiler.new_compiler()",
        "target": "mypyc.build.mypycify"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "sysconfig.customize_compiler(compiler)",
        "target": "mypyc.build.mypycify"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "if compiler.compiler_type == \"unix\":",
        "target": "mypyc.build.mypycify"
      },
      {
        "code": "no-any-expr",
        "column": 9,
        "message": "Expression has type \"Any\"",
        "offset": 17,
        "src": "elif compiler.compiler_type == \"msvc\":",
        "target": "mypyc.build.mypycify"
      }
    ],
    "mypyc/codegen/emit.py": [
      {
        "code": "possibly-undefined",
        "column": 22,
        "message": "Name \"item_type\" may be undefined",
        "offset": 436,
        "src": "if isinstance(item_type, RTuple):",
        "target": "mypyc.codegen.emit"
      }
    ],
    "mypyc/codegen/emitclass.py": [
      {
        "code": "no-any-expr",
        "column": 61,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> str\")",
        "offset": 161,
        "src": "for name, (slot, generator) in sorted(table.items(), key=lambda x: slot_key(x[0])):",
        "target": "mypyc.codegen.emitclass.generate_slots"
      },
      {
        "code": "no-any-expr",
        "column": 80,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for name, (slot, generator) in sorted(table.items(), key=lambda x: slot_key(x[0])):",
        "target": "mypyc.codegen.emitclass.generate_slots"
      },
      {
        "code": "possibly-undefined",
        "column": 54,
        "message": "Name \"shadow_vtable_name\" may be undefined",
        "offset": 199,
        "src": "cl, setup_name, defaults_fn, vtable_name, shadow_vtable_name, emitter",
        "target": "mypyc.codegen.emitclass"
      }
    ],
    "mypyc/codegen/emitfunc.py": [
      {
        "code": "possibly-undefined",
        "column": 20,
        "message": "Name \"dest\" may be undefined",
        "offset": 424,
        "src": "dest,",
        "target": "mypyc.codegen.emitfunc"
      },
      {
        "code": "possibly-undefined",
        "column": 39,
        "message": "Name \"dest\" may be undefined",
        "offset": 33,
        "src": "self.emitter.emit_line(f\"{dest} = 1;\")",
        "target": "mypyc.codegen.emitfunc"
      }
    ],
    "mypyc/codegen/emitmodule.py": [
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 151,
        "src": "ir_data = json.loads(ir_json)",
        "target": "mypyc.codegen.emitmodule.MypycPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "if compute_hash(meta_json) != ir_data[\"meta_hash\"]:",
        "target": "mypyc.codegen.emitmodule.MypycPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if compute_hash(meta_json) != ir_data[\"meta_hash\"]:",
        "target": "mypyc.codegen.emitmodule.MypycPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "for path, hash in ir_data[\"src_hashes\"].items():",
        "target": "mypyc.codegen.emitmodule.MypycPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for path, hash in ir_data[\"src_hashes\"].items():",
        "target": "mypyc.codegen.emitmodule.MypycPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "if hash != real_hash:",
        "target": "mypyc.codegen.emitmodule.MypycPlugin.report_config_data"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 216,
        "src": "cache_data = {",
        "target": "mypyc.codegen.emitmodule.load_scc_from_cache"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "k.fullname: json.loads(",
        "target": "mypyc.codegen.emitmodule.load_scc_from_cache"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 5,
        "src": "modules = deserialize_modules(cache_data, ctx)",
        "target": "mypyc.codegen.emitmodule.load_scc_from_cache"
      }
    ],
    "mypyc/common.py": [
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 35,
        "src": "SIZEOF_SIZE_T_SYSCONFIG: Final = sysconfig.get_config_var(\"SIZEOF_SIZE_T\")",
        "target": "mypyc.common"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "int(SIZEOF_SIZE_T_SYSCONFIG)",
        "target": "mypyc.common"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if SIZEOF_SIZE_T_SYSCONFIG is not None",
        "target": "mypyc.common"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "MAX_SHORT_INT: Final = 2 ** (8 * int(SIZEOF_SIZE_T) - 2) - 1",
        "target": "mypyc.common"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "MIN_SHORT_INT: Final = -(MAX_SHORT_INT) - 1",
        "target": "mypyc.common"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "MIN_SHORT_INT: Final = -(MAX_SHORT_INT) - 1",
        "target": "mypyc.common"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "MAX_LITERAL_SHORT_INT: Final = MAX_SHORT_INT",
        "target": "mypyc.common"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "MIN_LITERAL_SHORT_INT: Final = -MAX_LITERAL_SHORT_INT - 1",
        "target": "mypyc.common"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "MIN_LITERAL_SHORT_INT: Final = -MAX_LITERAL_SHORT_INT - 1",
        "target": "mypyc.common"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 28,
        "src": "JsonDict = Dict[str, Any]",
        "target": "mypyc.common"
      }
    ],
    "mypyc/ir/class_ir.py": [
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> (int, Any)\")",
        "offset": 338,
        "src": "return sorted(concrete, key=lambda c: (len(c.children or []), c.name))",
        "target": "mypyc.ir.class_ir.ClassIR.concrete_subclasses"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression type contains \"Any\" (has type \"(int, Any)\")",
        "offset": 0,
        "src": "return sorted(concrete, key=lambda c: (len(c.children or []), c.name))",
        "target": "mypyc.ir.class_ir.ClassIR.concrete_subclasses"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return sorted(concrete, key=lambda c: (len(c.children or []), c.name))",
        "target": "mypyc.ir.class_ir.ClassIR.concrete_subclasses"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression type contains \"Any\" (has type \"Any | list[Any]\")",
        "offset": 0,
        "src": "return sorted(concrete, key=lambda c: (len(c.children or []), c.name))",
        "target": "mypyc.ir.class_ir.ClassIR.concrete_subclasses"
      },
      {
        "code": "no-any-expr",
        "column": 65,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "return sorted(concrete, key=lambda c: (len(c.children or []), c.name))",
        "target": "mypyc.ir.class_ir.ClassIR.concrete_subclasses"
      },
      {
        "code": "no-any-expr",
        "column": 70,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return sorted(concrete, key=lambda c: (len(c.children or []), c.name))",
        "target": "mypyc.ir.class_ir.ClassIR.concrete_subclasses"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 6,
        "src": "return {",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 16,
        "src": "\"attributes\": [(k, t.serialize()) for k, t in self.attributes.items()],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"attributes\": [(k, t.serialize()) for k, t in self.attributes.items()],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 3,
        "src": "\"method_decls\": [",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "(k, d.id if k in self.methods else d.serialize())",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 4,
        "src": "\"methods\": [(k, m.id) for k, m in self.methods.items()],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"methods\": [(k, m.id) for k, m in self.methods.items()],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"glue_methods\": [",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "((cir.fullname, k), m.id) for (cir, k), m in self.glue_methods.items()",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 4,
        "src": "\"property_types\": [(k, t.serialize()) for k, t in self.property_types.items()],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"property_types\": [(k, t.serialize()) for k, t in self.property_types.items()],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"properties\": list(self.properties),",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"properties\": list(self.properties),",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 3,
        "src": "\"trait_vtables\": [",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 1,
        "src": "(cir.fullname, serialize_vtable(v)) for cir, v in self.trait_vtables.items()",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 4,
        "src": "\"traits\": [cir.fullname for cir in self.traits],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"traits\": [cir.fullname for cir in self.traits],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"mro\": [cir.fullname for cir in self.mro],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"mro\": [cir.fullname for cir in self.mro],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"base_mro\": [cir.fullname for cir in self.base_mro],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"base_mro\": [cir.fullname for cir in self.base_mro],",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any] | None)\")",
        "offset": 1,
        "src": "\"children\": [cir.fullname for cir in self.children]",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"list[Any] | None\")",
        "offset": 0,
        "src": "\"children\": [cir.fullname for cir in self.children]",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"children\": [cir.fullname for cir in self.children]",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 4,
        "src": "\"attrs_with_defaults\": sorted(self.attrs_with_defaults),",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"attrs_with_defaults\": sorted(self.attrs_with_defaults),",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"_always_initialized_attrs\": sorted(self._always_initialized_attrs),",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"_always_initialized_attrs\": sorted(self._always_initialized_attrs),",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"_sometimes_initialized_attrs\": sorted(self._sometimes_initialized_attrs),",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"_sometimes_initialized_attrs\": sorted(self._sometimes_initialized_attrs),",
        "target": "mypyc.ir.class_ir.ClassIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "fullname = data[\"module_name\"] + \".\" + data[\"name\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "fullname = data[\"module_name\"] + \".\" + data[\"name\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert fullname in ctx.classes, \"Class %s not in deser class map\" % fullname",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 76,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "assert fullname in ctx.classes, \"Class %s not in deser class map\" % fullname",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "ir = ctx.classes[fullname]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 14,
        "src": "ir.attributes = {k: deserialize_type(t, ctx) for k, t in data[\"attributes\"]}",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ir.attributes = {k: deserialize_type(t, ctx) for k, t in data[\"attributes\"]}",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ir.attributes = {k: deserialize_type(t, ctx) for k, t in data[\"attributes\"]}",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "ir.method_decls = {",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "k: ctx.functions[v].decl if isinstance(v, str) else FuncDecl.deserialize(v, ctx)",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 51,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "k: ctx.functions[v].decl if isinstance(v, str) else FuncDecl.deserialize(v, ctx)",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 85,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "k: ctx.functions[v].decl if isinstance(v, str) else FuncDecl.deserialize(v, ctx)",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "ir.methods = {k: ctx.functions[v] for k, v in data[\"methods\"]}",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ir.methods = {k: ctx.functions[v] for k, v in data[\"methods\"]}",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 39,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ir.methods = {k: ctx.functions[v] for k, v in data[\"methods\"]}",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "ir.glue_methods = {",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression type contains \"Any\" (has type \"(ClassIR, Any)\")",
        "offset": 1,
        "src": "(ctx.classes[c], k): ctx.functions[v] for (c, k), v in data[\"glue_methods\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "(ctx.classes[c], k): ctx.functions[v] for (c, k), v in data[\"glue_methods\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "(ctx.classes[c], k): ctx.functions[v] for (c, k), v in data[\"glue_methods\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "(ctx.classes[c], k): ctx.functions[v] for (c, k), v in data[\"glue_methods\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "ir.property_types = {k: deserialize_type(t, ctx) for k, t in data[\"property_types\"]}",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ir.property_types = {k: deserialize_type(t, ctx) for k, t in data[\"property_types\"]}",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ir.property_types = {k: deserialize_type(t, ctx) for k, t in data[\"property_types\"]}",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "ir.properties = {",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "k: (ir.methods[k], ir.methods.get(PROPSET_PREFIX + k)) for k in data[\"properties\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "k: (ir.methods[k], ir.methods.get(PROPSET_PREFIX + k)) for k in data[\"properties\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "k: (ir.methods[k], ir.methods.get(PROPSET_PREFIX + k)) for k in data[\"properties\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 63,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "k: (ir.methods[k], ir.methods.get(PROPSET_PREFIX + k)) for k in data[\"properties\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "ir.trait_vtables = {",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "ctx.classes[k]: deserialize_vtable(v, ctx) for k, v in data[\"trait_vtables\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ctx.classes[k]: deserialize_vtable(v, ctx) for k, v in data[\"trait_vtables\"]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "ir.traits = [ctx.classes[s] for s in data[\"traits\"]]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ir.traits = [ctx.classes[s] for s in data[\"traits\"]]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "ir.mro = [ctx.classes[s] for s in data[\"mro\"]]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ir.mro = [ctx.classes[s] for s in data[\"mro\"]]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "ir.base_mro = [ctx.classes[s] for s in data[\"base_mro\"]]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ir.base_mro = [ctx.classes[s] for s in data[\"base_mro\"]]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "ir.children = data[\"children\"] and [ctx.classes[s] for s in data[\"children\"]]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "ir.children = data[\"children\"] and [ctx.classes[s] for s in data[\"children\"]]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 56,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ir.children = data[\"children\"] and [ctx.classes[s] for s in data[\"children\"]]",
        "target": "mypyc.ir.class_ir.ClassIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 25,
        "src": "return {",
        "target": "mypyc.ir.class_ir.serialize_vtable_entry"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression has type \"Any\"",
        "offset": 14,
        "src": "if data[\".class\"] == \"VTableMethod\":",
        "target": "mypyc.ir.class_ir.deserialize_vtable_entry"
      }
    ],
    "mypyc/ir/func_ir.py": [
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 48,
        "src": "return {",
        "target": "mypyc.ir.func_ir.RuntimeArg.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 55,
        "src": "return {\"args\": [t.serialize() for t in args], \"ret_type\": self.ret_type.serialize()}",
        "target": "mypyc.ir.func_ir.FuncSignature.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 0,
        "src": "return {\"args\": [t.serialize() for t in args], \"ret_type\": self.ret_type.serialize()}",
        "target": "mypyc.ir.func_ir.FuncSignature.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "return {\"args\": [t.serialize() for t in args], \"ret_type\": self.ret_type.serialize()}",
        "target": "mypyc.ir.func_ir.FuncSignature.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 5,
        "src": "[RuntimeArg.deserialize(arg, ctx) for arg in data[\"args\"]],",
        "target": "mypyc.ir.func_ir.FuncSignature.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[RuntimeArg.deserialize(arg, ctx) for arg in data[\"args\"]],",
        "target": "mypyc.ir.func_ir.FuncSignature.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 90,
        "src": "return {",
        "target": "mypyc.ir.func_ir.FuncDecl.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression has type \"Any\"",
        "offset": 16,
        "src": "shortname = FuncDecl.compute_shortname(decl[\"class_name\"], decl[\"name\"])",
        "target": "mypyc.ir.func_ir.FuncDecl.get_id_from_json"
      },
      {
        "code": "no-any-expr",
        "column": 67,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "shortname = FuncDecl.compute_shortname(decl[\"class_name\"], decl[\"name\"])",
        "target": "mypyc.ir.func_ir.FuncDecl.get_id_from_json"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "fullname = decl[\"module_name\"] + \".\" + shortname",
        "target": "mypyc.ir.func_ir.FuncDecl.get_id_from_json"
      },
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "fullname = decl[\"module_name\"] + \".\" + shortname",
        "target": "mypyc.ir.func_ir.FuncDecl.get_id_from_json"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return get_id_from_name(decl[\"name\"], fullname, func_ir[\"line\"])",
        "target": "mypyc.ir.func_ir.FuncDecl.get_id_from_json"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return get_id_from_name(decl[\"name\"], fullname, func_ir[\"line\"])",
        "target": "mypyc.ir.func_ir.FuncDecl.get_id_from_json"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 85,
        "src": "return {",
        "target": "mypyc.ir.func_ir.FuncIR.serialize"
      }
    ],
    "mypyc/ir/module_ir.py": [
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 32,
        "src": "return {",
        "target": "mypyc.ir.module_ir.ModuleIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 3,
        "src": "\"functions\": [f.serialize() for f in self.functions],",
        "target": "mypyc.ir.module_ir.ModuleIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"functions\": [f.serialize() for f in self.functions],",
        "target": "mypyc.ir.module_ir.ModuleIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"classes\": [c.serialize() for c in self.classes],",
        "target": "mypyc.ir.module_ir.ModuleIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"classes\": [c.serialize() for c in self.classes],",
        "target": "mypyc.ir.module_ir.ModuleIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"(str, list[Any])\")",
        "offset": 1,
        "src": "\"final_names\": [(k, t.serialize()) for k, t in self.final_names],",
        "target": "mypyc.ir.module_ir.ModuleIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 28,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "\"final_names\": [(k, t.serialize()) for k, t in self.final_names],",
        "target": "mypyc.ir.module_ir.ModuleIR.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 8,
        "src": "[ctx.functions[FuncDecl.get_id_from_json(f)] for f in data[\"functions\"]],",
        "target": "mypyc.ir.module_ir.ModuleIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[ctx.functions[FuncDecl.get_id_from_json(f)] for f in data[\"functions\"]],",
        "target": "mypyc.ir.module_ir.ModuleIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "[ClassIR.deserialize(c, ctx) for c in data[\"classes\"]],",
        "target": "mypyc.ir.module_ir.ModuleIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[ClassIR.deserialize(c, ctx) for c in data[\"classes\"]],",
        "target": "mypyc.ir.module_ir.ModuleIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "[(k, deserialize_type(t, ctx)) for k, t in data[\"final_names\"]],",
        "target": "mypyc.ir.module_ir.ModuleIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[(k, deserialize_type(t, ctx)) for k, t in data[\"final_names\"]],",
        "target": "mypyc.ir.module_ir.ModuleIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 14,
        "message": "Expression type contains \"Any\" (has type \"(Any, RType)\")",
        "offset": 0,
        "src": "[(k, deserialize_type(t, ctx)) for k, t in data[\"final_names\"]],",
        "target": "mypyc.ir.module_ir.ModuleIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "[(k, deserialize_type(t, ctx)) for k, t in data[\"final_names\"]],",
        "target": "mypyc.ir.module_ir.ModuleIR.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 21,
        "src": "for cls in mod[\"classes\"]:",
        "target": "mypyc.ir.module_ir.deserialize_modules"
      },
      {
        "code": "no-any-expr",
        "column": 25,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "ir = ClassIR(cls[\"name\"], cls[\"module_name\"])",
        "target": "mypyc.ir.module_ir.deserialize_modules"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "ir = ClassIR(cls[\"name\"], cls[\"module_name\"])",
        "target": "mypyc.ir.module_ir.deserialize_modules"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 7,
        "src": "for method in mod[\"functions\"]:",
        "target": "mypyc.ir.module_ir.deserialize_modules"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "func = FuncIR.deserialize(method, ctx)",
        "target": "mypyc.ir.module_ir.deserialize_modules"
      }
    ],
    "mypyc/ir/pprint.py": [
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 277,
        "src": "def format(self, fmt: str, *args: Any) -> str:",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.format"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 14,
        "src": "arglist = list(args)",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.format"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "arglist = list(args)",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.format"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 8,
        "src": "arg = arglist.pop(0)",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.format"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "arg = arglist.pop(0)",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.format"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "assert isinstance(arg, Value)",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.format"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 9,
        "src": "result.append(\"%d\" % arg)",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.format"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "result.append(\"%f\" % arg)",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.format"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 3,
        "src": "assert isinstance(arg, BasicBlock)",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.format"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "assert isinstance(arg, RType)",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.format"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "result.append(str(arg))",
        "target": "mypyc.ir.pprint.IRPrettyPrintVisitor.format"
      }
    ],
    "mypyc/ir/rtypes.py": [
      {
        "code": "no-any-expr",
        "column": 9,
        "message": "Expression has type \"Any\"",
        "offset": 101,
        "src": "elif data[\".class\"] == \"RTuple\":",
        "target": "mypyc.ir.rtypes.deserialize_type"
      },
      {
        "code": "no-any-expr",
        "column": 9,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "elif data[\".class\"] == \"RUnion\":",
        "target": "mypyc.ir.rtypes.deserialize_type"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 502,
        "src": "return {\".class\": \"RTuple\", \"types\": types}",
        "target": "mypyc.ir.rtypes.RTuple.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "types = [deserialize_type(t, ctx) for t in data[\"types\"]]",
        "target": "mypyc.ir.rtypes.RTuple.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "types = [deserialize_type(t, ctx) for t in data[\"types\"]]",
        "target": "mypyc.ir.rtypes.RTuple.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 244,
        "src": "return {\".class\": \"RUnion\", \"types\": types}",
        "target": "mypyc.ir.rtypes.RUnion.serialize"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "types = [deserialize_type(t, ctx) for t in data[\"types\"]]",
        "target": "mypyc.ir.rtypes.RUnion.deserialize"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "types = [deserialize_type(t, ctx) for t in data[\"types\"]]",
        "target": "mypyc.ir.rtypes.RUnion.deserialize"
      }
    ],
    "mypyc/irbuild/builder.py": [
      {
        "code": "no-any-expr",
        "column": 13,
        "message": "Expression has type \"Any\"",
        "offset": 246,
        "src": "with self.catch_errors(node.line):",
        "target": "mypyc.irbuild.builder.IRBuilder.accept"
      },
      {
        "code": "possibly-undefined",
        "column": 19,
        "message": "Name \"fullname\" may be undefined",
        "offset": 769,
        "src": "return fullname, final_var, native",
        "target": "mypyc.irbuild.builder"
      },
      {
        "code": "possibly-undefined",
        "column": 40,
        "message": "Name \"native\" may be undefined",
        "offset": 0,
        "src": "return fullname, final_var, native",
        "target": "mypyc.irbuild.builder"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 299,
        "src": "def catch_errors(self, line: int) -> Any:",
        "target": "mypyc.irbuild.builder.IRBuilder.catch_errors"
      }
    ],
    "mypyc/irbuild/classdef.py": [
      {
        "code": "no-any-expr",
        "column": 21,
        "message": "Expression has type \"Any\"",
        "offset": 129,
        "src": "with builder.catch_errors(stmt.line):",
        "target": "mypyc.irbuild.classdef.transform_class_def"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any\"",
        "offset": 8,
        "src": "with builder.catch_errors(stmt.line):",
        "target": "mypyc.irbuild.classdef.transform_class_def"
      }
    ],
    "mypyc/irbuild/expression.py": [
      {
        "code": "no-any-expr",
        "column": 45,
        "message": "Expression has type \"Any\"",
        "offset": 207,
        "src": "index = builder.builder.load_int(fields.index(expr.name))",
        "target": "mypyc.irbuild.expression.transform_member_expr"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression has type \"Any\"",
        "offset": 402,
        "src": "end = builder.load_int(MAX_SHORT_INT)",
        "target": "mypyc.irbuild.expression.try_gen_slice_op"
      }
    ],
    "mypyc/irbuild/for_helpers.py": [
      {
        "code": "truthy-bool",
        "column": 15,
        "message": "\"value_box\" has type \"Value\" which does not implement __bool__ or __len__ so it could always be true in boolean context",
        "offset": 725,
        "src": "assert value_box",
        "target": "mypyc.irbuild.for_helpers.ForSequence.begin_body"
      }
    ],
    "mypyc/irbuild/function.py": [
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 148,
        "src": "assert isinstance(typ, CallableType)",
        "target": "mypyc.irbuild.function.transform_lambda_expr"
      },
      {
        "code": "no-any-expr",
        "column": 77,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> Any\")",
        "offset": 149,
        "src": "for var in sorted(builder.free_variables[builder.fn_info.fitem], key=lambda x: x.name):",
        "target": "mypyc.irbuild.function.gen_func_item"
      },
      {
        "code": "no-any-expr",
        "column": 87,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for var in sorted(builder.free_variables[builder.fn_info.fitem], key=lambda x: x.name):",
        "target": "mypyc.irbuild.function.gen_func_item"
      },
      {
        "code": "possibly-undefined",
        "column": 33,
        "message": "Name \"func_ir\" may be undefined",
        "offset": 42,
        "src": "builder.functions.append(func_ir)",
        "target": "mypyc.irbuild.function"
      },
      {
        "code": "possibly-undefined",
        "column": 11,
        "message": "Name \"func_ir\" may be undefined",
        "offset": 5,
        "src": "return func_ir, func_reg",
        "target": "mypyc.irbuild.function"
      }
    ],
    "mypyc/irbuild/ll_builder.py": [
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression has type \"Any\"",
        "offset": 491,
        "src": "c1 = self.add(ComparisonOp(src, Integer(MAX_SHORT_INT, src_type), ComparisonOp.SLE))",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder.coerce_fixed_width_to_int"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression has type \"Any\"",
        "offset": 4,
        "src": "c2 = self.add(ComparisonOp(src, Integer(MIN_SHORT_INT, src_type), ComparisonOp.SGE))",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder.coerce_fixed_width_to_int"
      },
      {
        "code": "possibly-undefined",
        "column": 27,
        "message": "Name \"skip\" may be undefined",
        "offset": 309,
        "src": "assert skip is not out",
        "target": "mypyc.irbuild.ll_builder"
      },
      {
        "code": "possibly-undefined",
        "column": 35,
        "message": "Name \"coerced_args\" may be undefined",
        "offset": 92,
        "src": "self.add(KeepAlive(coerced_args))",
        "target": "mypyc.irbuild.ll_builder"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Any\"",
        "offset": 305,
        "src": "if value > MAX_LITERAL_SHORT_INT or value < MIN_LITERAL_SHORT_INT:",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder.load_int"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if value > MAX_LITERAL_SHORT_INT or value < MIN_LITERAL_SHORT_INT:",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder.load_int"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if value > MAX_LITERAL_SHORT_INT or value < MIN_LITERAL_SHORT_INT:",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder.load_int"
      },
      {
        "code": "no-any-expr",
        "column": 52,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "if value > MAX_LITERAL_SHORT_INT or value < MIN_LITERAL_SHORT_INT:",
        "target": "mypyc.irbuild.ll_builder.LowLevelIRBuilder.load_int"
      },
      {
        "code": "possibly-undefined",
        "column": 36,
        "message": "Name \"false_block\" may be undefined",
        "offset": 1026,
        "src": "self.activate_block(false_block)",
        "target": "mypyc.irbuild.ll_builder"
      }
    ],
    "mypyc/irbuild/main.py": [
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 47,
        "src": "F = TypeVar(\"F\", bound=Callable[..., Any])",
        "target": "mypyc.irbuild.main"
      },
      {
        "code": "no-any-explicit",
        "column": 22,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 1,
        "src": "strict_optional_dec = cast(Callable[[F], F], state.strict_optional_set(True))",
        "target": "mypyc.irbuild.main"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"[F: (...) -> Any] (F) -> F\")",
        "offset": 0,
        "src": "strict_optional_dec = cast(Callable[[F], F], state.strict_optional_set(True))",
        "target": "mypyc.irbuild.main"
      },
      {
        "code": "no-any-expr",
        "column": 1,
        "message": "Expression type contains \"Any\" (has type \"[F: (...) -> Any] (F) -> F\")",
        "offset": 3,
        "src": "@strict_optional_dec  # Turn on strict optional for any type manipulations we do",
        "target": "mypyc.irbuild.main"
      }
    ],
    "mypyc/irbuild/mapper.py": [
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 115,
        "src": "elif isinstance(typ, CallableType):",
        "target": "mypyc.irbuild.mapper.Mapper.type_to_rtype"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"type[CallableType]\")",
        "offset": 42,
        "src": "if isinstance(fdef.type, CallableType):",
        "target": "mypyc.irbuild.mapper.Mapper.fdef_to_sig"
      }
    ],
    "mypyc/irbuild/prepare.py": [
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 251,
        "src": "attrs = get_mypyc_attrs(cdef)",
        "target": "mypyc.irbuild.prepare.prepare_class_def"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "if attrs.get(\"allow_interpreted_subclasses\") is True:",
        "target": "mypyc.irbuild.prepare.prepare_class_def"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "if attrs.get(\"allow_interpreted_subclasses\") is True:",
        "target": "mypyc.irbuild.prepare.prepare_class_def"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "if attrs.get(\"serializable\") is True:",
        "target": "mypyc.irbuild.prepare.prepare_class_def"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"Any | None\")",
        "offset": 0,
        "src": "if attrs.get(\"serializable\") is True:",
        "target": "mypyc.irbuild.prepare.prepare_class_def"
      }
    ],
    "mypyc/irbuild/statement.py": [
      {
        "code": "possibly-undefined",
        "column": 7,
        "message": "Name \"next_block\" may be undefined",
        "offset": 421,
        "src": "if next_block:",
        "target": "mypyc.irbuild.statement"
      }
    ],
    "mypyc/irbuild/util.py": [
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 78,
        "src": "def get_mypyc_attr_literal(e: Expression) -> Any:",
        "target": "mypyc.irbuild.util.get_mypyc_attr_literal"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 26,
        "src": "def get_mypyc_attrs(stmt: ClassDef | Decorator) -> dict[str, Any]:",
        "target": "mypyc.irbuild.util.get_mypyc_attrs"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 2,
        "src": "attrs: dict[str, Any] = {}",
        "target": "mypyc.irbuild.util.get_mypyc_attrs"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 7,
        "src": "attrs[arg.value] = True",
        "target": "mypyc.irbuild.util.get_mypyc_attrs"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "attrs[name] = get_mypyc_attr_literal(arg)",
        "target": "mypyc.irbuild.util.get_mypyc_attrs"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "attrs[name] = get_mypyc_attr_literal(arg)",
        "target": "mypyc.irbuild.util.get_mypyc_attrs"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "return attrs",
        "target": "mypyc.irbuild.util.get_mypyc_attrs"
      }
    ],
    "mypyc/test/test_analysis.py": [
      {
        "code": "no-any-expr",
        "column": 59,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> (Any, Any)\")",
        "offset": 70,
        "src": "analysis_result.before.keys(), key=lambda x: (x[0].label, x[1])",
        "target": "mypyc.test.test_analysis.TestAnalysis.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 70,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "analysis_result.before.keys(), key=lambda x: (x[0].label, x[1])",
        "target": "mypyc.test.test_analysis.TestAnalysis.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 70,
        "message": "Expression type contains \"Any\" (has type \"(Any, Any)\")",
        "offset": 0,
        "src": "analysis_result.before.keys(), key=lambda x: (x[0].label, x[1])",
        "target": "mypyc.test.test_analysis.TestAnalysis.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 82,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "analysis_result.before.keys(), key=lambda x: (x[0].label, x[1])",
        "target": "mypyc.test.test_analysis.TestAnalysis.run_case"
      }
    ],
    "mypyc/test/test_cheader.py": [
      {
        "code": "unreachable",
        "column": 20,
        "message": "Statement is unreachable",
        "offset": 36,
        "src": "ops = [ops]",
        "target": "mypyc.test.test_cheader.TestHeaderInclusion.test_primitives_included_in_header"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 8,
        "src": "for name in re.findall(r'c_function_name=[\"\\'](CPy[A-Z_a-z0-9]+)', content):",
        "target": "mypyc.test.test_cheader.TestHeaderInclusion.test_primitives_included_in_header"
      },
      {
        "code": "no-any-expr",
        "column": 24,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 0,
        "src": "for name in re.findall(r'c_function_name=[\"\\'](CPy[A-Z_a-z0-9]+)', content):",
        "target": "mypyc.test.test_cheader.TestHeaderInclusion.test_primitives_included_in_header"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "check_name(name)",
        "target": "mypyc.test.test_cheader.TestHeaderInclusion.test_primitives_included_in_header"
      }
    ],
    "mypyc/test/test_commandline.py": [
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 38,
        "src": "args = m.group(1).split()",
        "target": "mypyc.test.test_commandline.TestCommandLine.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"list[str] | Any\")",
        "offset": 0,
        "src": "args = m.group(1).split()",
        "target": "mypyc.test.test_commandline.TestCommandLine.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 61,
        "message": "Expression type contains \"Any\" (has type \"list[str] | Any\")",
        "offset": 16,
        "src": "[sys.executable, \"-m\", \"mypyc\", \"--legacy\", *args],",
        "target": "mypyc.test.test_commandline.TestCommandLine.run_case"
      }
    ],
    "mypyc/test/test_emitclass.py": [
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> str\")",
        "offset": 13,
        "src": "s = sorted(attrs, key=lambda x: slot_key(x))",
        "target": "mypyc.test.test_emitclass.TestEmitClass.test_slot_key"
      }
    ],
    "mypyc/test/test_exceptions.py": [
      {
        "code": "no-any-expr",
        "column": 57,
        "message": "Expression type contains \"Any\" (has type \"list[Any]\")",
        "offset": 54,
        "src": "actual.append(\"hot blocks: %s\" % sorted(b.label for b in common))",
        "target": "mypyc.test.test_exceptions.TestExceptionTransform.run_case"
      },
      {
        "code": "no-any-expr",
        "column": 64,
        "message": "Expression type contains \"Any\" (has type \"Generator[Any, None, None]\")",
        "offset": 0,
        "src": "actual.append(\"hot blocks: %s\" % sorted(b.label for b in common))",
        "target": "mypyc.test.test_exceptions.TestExceptionTransform.run_case"
      }
    ],
    "mypyc/test/test_external.py": [
      {
        "code": "no-any-expr",
        "column": 5,
        "message": "Expression type contains \"Any\" (has type \"[_FT: (...) -> Any] (_FT) -> _FT\")",
        "offset": 16,
        "src": "@unittest.skipIf(sys.platform.startswith(\"win\"), \"rt tests don't work on windows\")",
        "target": "mypyc.test.test_external"
      }
    ],
    "mypyc/test/test_run.py": [
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Untyped\"",
        "offset": 188,
        "src": "bench = testcase.config.getoption(\"--bench\", False) and \"Benchmark\" in testcase.name",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression type contains \"Any\" (has type \"Any (unannotated) | bool\")",
        "offset": 0,
        "src": "bench = testcase.config.getoption(\"--bench\", False) and \"Benchmark\" in testcase.name",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression has type \"Any\"",
        "offset": 44,
        "src": "self.get_separate(\"\\n\".join(testcase.input), incremental_step)",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 0,
        "src": "self.get_separate(\"\\n\".join(testcase.input), incremental_step)",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 43,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 5,
        "src": "groups = construct_groups(sources, separate, len(module_names) > 1)",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"Any | bool\")",
        "offset": 36,
        "src": "module_paths, separate, cfiles, self.multi_file, opt_level, debug_level",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Untyped\"",
        "offset": 5,
        "src": "if testcase.config.getoption(\"--mypyc-showc\"):",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"Any (unannotated) | bool\")",
        "offset": 18,
        "src": "env[\"MYPYC_RUN_BENCH\"] = \"1\" if bench else \"0\"",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-untyped-usage",
        "column": 8,
        "message": "Usage of untyped name \"debugger\" in typed context",
        "offset": 2,
        "src": "debugger = testcase.config.getoption(\"debugger\")",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Untyped\"",
        "offset": 0,
        "src": "debugger = testcase.config.getoption(\"debugger\")",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Untyped\"",
        "offset": 1,
        "src": "if debugger:",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Untyped\"",
        "offset": 1,
        "src": "if debugger == \"lldb\":",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any (unannotated)\"",
        "offset": 0,
        "src": "if debugger == \"lldb\":",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Untyped\"",
        "offset": 2,
        "src": "elif debugger == \"gdb\":",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 17,
        "message": "Expression has type \"Any (unannotated)\"",
        "offset": 0,
        "src": "elif debugger == \"gdb\":",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression has type \"Untyped\"",
        "offset": 22,
        "src": "if testcase.config.getoption(\"--mypyc-showc\"):",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 2,
        "src": "if proc.returncode != 0:",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "if proc.returncode != 0:",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": -1,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "print(\"*** Exit status: %d\" % proc.returncode)",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 0,
        "src": "print(\"*** Exit status: %d\" % proc.returncode)",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"Any (unannotated) | bool\")",
        "offset": 3,
        "src": "if bench:",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"int | Any\")",
        "offset": 32,
        "src": "assert proc.returncode == 0",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"bool | Any\")",
        "offset": 0,
        "src": "assert proc.returncode == 0",
        "target": "mypyc.test.test_run.TestRun.run_case_step"
      },
      {
        "code": "no-any-explicit",
        "column": 4,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 2,
        "src": "def get_separate(self, program_text: str, incremental_step: int) -> Any:",
        "target": "mypyc.test.test_run.TestRun.get_separate"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 6,
        "src": "return ast.literal_eval(m.group(1))",
        "target": "mypyc.test.test_run.TestRun.get_separate"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "return ast.literal_eval(m.group(1))",
        "target": "mypyc.test.test_run.TestRun.get_separate"
      },
      {
        "code": "no-any-expr",
        "column": 33,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> str\")",
        "offset": 55,
        "src": "r\"native\\.py:([0-9]+):\", lambda m: \"%s:%d:\" % (fnam, int(m.group(1)) + delta), message",
        "target": "mypyc.test.test_run.fix_native_line_number"
      },
      {
        "code": "no-any-expr",
        "column": 65,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "r\"native\\.py:([0-9]+):\", lambda m: \"%s:%d:\" % (fnam, int(m.group(1)) + delta), message",
        "target": "mypyc.test.test_run.fix_native_line_number"
      },
      {
        "code": "no-any-expr",
        "column": 65,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "r\"native\\.py:([0-9]+):\", lambda m: \"%s:%d:\" % (fnam, int(m.group(1)) + delta), message",
        "target": "mypyc.test.test_run.fix_native_line_number"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> str\")",
        "offset": 4,
        "src": "lambda m: '\"%s\", line %d,' % (fnam, int(m.group(1)) + delta),",
        "target": "mypyc.test.test_run.fix_native_line_number"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "lambda m: '\"%s\", line %d,' % (fnam, int(m.group(1)) + delta),",
        "target": "mypyc.test.test_run.fix_native_line_number"
      },
      {
        "code": "no-any-expr",
        "column": 48,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "lambda m: '\"%s\", line %d,' % (fnam, int(m.group(1)) + delta),",
        "target": "mypyc.test.test_run.fix_native_line_number"
      }
    ],
    "mypyc/test/test_serialization.py": [
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 19,
        "src": "def get_dict(x: Any) -> dict[str, Any]:",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if hasattr(x, \"__mypyc_attrs__\"):",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "return {k: getattr(x, k) for k in x.__mypyc_attrs__ if hasattr(x, k)}",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "return {k: getattr(x, k) for k in x.__mypyc_attrs__ if hasattr(x, k)}",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return {k: getattr(x, k) for k in x.__mypyc_attrs__ if hasattr(x, k)}",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 19,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return {k: getattr(x, k) for k in x.__mypyc_attrs__ if hasattr(x, k)}",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return {k: getattr(x, k) for k in x.__mypyc_attrs__ if hasattr(x, k)}",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 30,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return {k: getattr(x, k) for k in x.__mypyc_attrs__ if hasattr(x, k)}",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return {k: getattr(x, k) for k in x.__mypyc_attrs__ if hasattr(x, k)}",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 71,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return {k: getattr(x, k) for k in x.__mypyc_attrs__ if hasattr(x, k)}",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 74,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return {k: getattr(x, k) for k in x.__mypyc_attrs__ if hasattr(x, k)}",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "return dict(x.__dict__)",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "return dict(x.__dict__)",
        "target": "mypyc.test.test_serialization.get_dict"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def get_function_dict(x: FuncIR) -> dict[str, Any]:",
        "target": "mypyc.test.test_serialization.get_function_dict"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "d = get_dict(x)",
        "target": "mypyc.test.test_serialization.get_function_dict"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "d.pop(\"blocks\", None)",
        "target": "mypyc.test.test_serialization.get_function_dict"
      },
      {
        "code": "no-any-expr",
        "column": 4,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "d.pop(\"env\", None)",
        "target": "mypyc.test.test_serialization.get_function_dict"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 1,
        "src": "return d",
        "target": "mypyc.test.test_serialization.get_function_dict"
      },
      {
        "code": "no-any-explicit",
        "column": 0,
        "message": "Explicit \"Any\" is not allowed",
        "offset": 3,
        "src": "def assert_blobs_same(x: Any, y: Any, trail: tuple[Any, ...]) -> None:",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 16,
        "src": "assert type(x) is type(y), (f\"Type mismatch at {trail}\", type(x), type(y))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 16,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "assert type(x) is type(y), (f\"Type mismatch at {trail}\", type(x), type(y))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 22,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 0,
        "src": "assert type(x) is type(y), (f\"Type mismatch at {trail}\", type(x), type(y))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "assert type(x) is type(y), (f\"Type mismatch at {trail}\", type(x), type(y))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "assert type(x) is type(y), (f\"Type mismatch at {trail}\", type(x), type(y))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 32,
        "message": "Expression type contains \"Any\" (has type \"(str, type[Any], type[Any])\")",
        "offset": 0,
        "src": "assert type(x) is type(y), (f\"Type mismatch at {trail}\", type(x), type(y))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 61,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 0,
        "src": "assert type(x) is type(y), (f\"Type mismatch at {trail}\", type(x), type(y))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 66,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "assert type(x) is type(y), (f\"Type mismatch at {trail}\", type(x), type(y))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 70,
        "message": "Expression type contains \"Any\" (has type \"type[Any]\")",
        "offset": 0,
        "src": "assert type(x) is type(y), (f\"Type mismatch at {trail}\", type(x), type(y))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 75,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "assert type(x) is type(y), (f\"Type mismatch at {trail}\", type(x), type(y))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 18,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "if isinstance(x, (FuncDecl, FuncIR, ClassIR)):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert x.fullname == y.fullname, f\"Name mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 29,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "assert x.fullname == y.fullname, f\"Name mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 41,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "assert x.fullname == y.fullname, f\"Name mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "elif isinstance(x, dict):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert len(x.keys()) == len(y.keys()), f\"Keys mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 47,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "assert len(x.keys()) == len(y.keys()), f\"Keys mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"((Any, Any), Any)\")",
        "offset": 1,
        "src": "for (xk, xv), (yk, yv) in zip(x.items(), y.items()):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for (xk, xv), (yk, yv) in zip(x.items(), y.items()):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression type contains \"Any\" (has type \"zip[((Any, Any), Any)]\")",
        "offset": 0,
        "src": "for (xk, xv), (yk, yv) in zip(x.items(), y.items()):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 49,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for (xk, xv), (yk, yv) in zip(x.items(), y.items()):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert_blobs_same(xk, yk, trail + (\"keys\",))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "assert_blobs_same(xk, yk, trail + (\"keys\",))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert_blobs_same(xv, yv, trail + (xk,))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "assert_blobs_same(xv, yv, trail + (xk,))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "elif isinstance(x, dict):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert x.keys() == y.keys(), f\"Keys mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "assert x.keys() == y.keys(), f\"Keys mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "assert x.keys() == y.keys(), f\"Keys mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 2,
        "src": "assert_blobs_same(x[k], y[k], trail + (k,))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "assert_blobs_same(x[k], y[k], trail + (k,))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "elif isinstance(x, Iterable) and not isinstance(x, (str, set)):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(int, (Any, Any))\")",
        "offset": 4,
        "src": "for i, (xv, yv) in enumerate(zip(x, y)):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression type contains \"Any\" (has type \"(Any, Any)\")",
        "offset": 0,
        "src": "for i, (xv, yv) in enumerate(zip(x, y)):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 8,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for i, (xv, yv) in enumerate(zip(x, y)):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 27,
        "message": "Expression type contains \"Any\" (has type \"enumerate[(Any, Any)]\")",
        "offset": 0,
        "src": "for i, (xv, yv) in enumerate(zip(x, y)):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression type contains \"Any\" (has type \"zip[(Any, Any)]\")",
        "offset": 0,
        "src": "for i, (xv, yv) in enumerate(zip(x, y)):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 44,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "for i, (xv, yv) in enumerate(zip(x, y)):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 34,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert_blobs_same(xv, yv, trail + (i,))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 38,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "assert_blobs_same(xv, yv, trail + (i,))",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"Any | str | set[Any]\")",
        "offset": 1,
        "src": "elif isinstance(x, RType):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 31,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert is_same_type(x, y), f\"RType mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 35,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "assert is_same_type(x, y), f\"RType mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression type contains \"Any\" (has type \"Any | str | set[Any]\")",
        "offset": 1,
        "src": "elif isinstance(x, FuncSignature):",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression has type \"Any\"",
        "offset": 1,
        "src": "assert is_same_signature(x, y), f\"Signature mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 40,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "assert is_same_signature(x, y), f\"Signature mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression type contains \"Any\" (has type \"Any | str | set[Any]\")",
        "offset": 2,
        "src": "assert x == y, f\"Value mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 15,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "assert x == y, f\"Value mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 20,
        "message": "Expression has type \"Any\"",
        "offset": 0,
        "src": "assert x == y, f\"Value mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"tuple[Any, ...]\")",
        "offset": 0,
        "src": "assert x == y, f\"Value mismatch at {trail}\"",
        "target": "mypyc.test.test_serialization.assert_blobs_same"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 15,
        "src": "assert_blobs_same(get_dict(cls1), get_dict(cls2), (ir1.fullname, cls1.fullname))",
        "target": "mypyc.test.test_serialization.assert_modules_same"
      },
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "assert_blobs_same(get_dict(cls1), get_dict(cls2), (ir1.fullname, cls1.fullname))",
        "target": "mypyc.test.test_serialization.assert_modules_same"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 4,
        "src": "get_function_dict(fn1), get_function_dict(fn2), (ir1.fullname, fn1.fullname)",
        "target": "mypyc.test.test_serialization.assert_modules_same"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "get_function_dict(fn1), get_function_dict(fn2), (ir1.fullname, fn1.fullname)",
        "target": "mypyc.test.test_serialization.assert_modules_same"
      },
      {
        "code": "no-any-expr",
        "column": 26,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 2,
        "src": "assert_blobs_same(get_dict(fn1.decl), get_dict(fn2.decl), (ir1.fullname, fn1.fullname))",
        "target": "mypyc.test.test_serialization.assert_modules_same"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression type contains \"Any\" (has type \"dict[str, Any]\")",
        "offset": 0,
        "src": "assert_blobs_same(get_dict(fn1.decl), get_dict(fn2.decl), (ir1.fullname, fn1.fullname))",
        "target": "mypyc.test.test_serialization.assert_modules_same"
      }
    ],
    "mypyc/test/testutil.py": [
      {
        "code": "possibly-undefined",
        "column": 11,
        "message": "Name \"default_builtins\" may be undefined",
        "offset": 66,
        "src": "if default_builtins:",
        "target": "mypyc.test.testutil"
      },
      {
        "code": "possibly-undefined",
        "column": 22,
        "message": "Name \"builtins\" may be undefined",
        "offset": 2,
        "src": "os.remove(builtins)",
        "target": "mypyc.test.testutil"
      },
      {
        "code": "possibly-undefined",
        "column": 7,
        "message": "Name \"default_builtins\" may be undefined",
        "offset": 19,
        "src": "if default_builtins:",
        "target": "mypyc.test.testutil"
      },
      {
        "code": "possibly-undefined",
        "column": 18,
        "message": "Name \"builtins\" may be undefined",
        "offset": 2,
        "src": "os.remove(builtins)",
        "target": "mypyc.test.testutil"
      },
      {
        "code": "no-any-expr",
        "column": 7,
        "message": "Expression type contains \"Any\" (has type \"False | Untyped\")",
        "offset": 95,
        "src": "if expected_output != actual and testcase.config.getoption(\"--update-data\", False):",
        "target": "mypyc.test.testutil.assert_test_output"
      },
      {
        "code": "no-any-expr",
        "column": 37,
        "message": "Expression has type \"Untyped\"",
        "offset": 0,
        "src": "if expected_output != actual and testcase.config.getoption(\"--update-data\", False):",
        "target": "mypyc.test.testutil.assert_test_output"
      },
      {
        "code": "no-any-expr",
        "column": 12,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 13,
        "src": "res.append(m.group(1))",
        "target": "mypyc.test.testutil.get_func_names"
      },
      {
        "code": "no-any-expr",
        "column": 23,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "res.append(m.group(1))",
        "target": "mypyc.test.testutil.get_func_names"
      },
      {
        "code": "no-any-expr",
        "column": 11,
        "message": "Expression type contains \"Any\" (has type \"list[str | Any]\")",
        "offset": 1,
        "src": "return res",
        "target": "mypyc.test.testutil.get_func_names"
      },
      {
        "code": "no-any-expr",
        "column": 36,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 85,
        "src": "options.capi_version = (int(m.group(1)), int(m.group(2)))",
        "target": "mypyc.test.testutil.infer_ir_build_options_from_test_name"
      },
      {
        "code": "no-any-expr",
        "column": 53,
        "message": "Expression type contains \"Any\" (has type \"str | Any\")",
        "offset": 0,
        "src": "options.capi_version = (int(m.group(1)), int(m.group(2)))",
        "target": "mypyc.test.testutil.infer_ir_build_options_from_test_name"
      }
    ],
    "mypyc/transform/refcount.py": [
      {
        "code": "no-any-expr",
        "column": 42,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> int\")",
        "offset": 221,
        "src": "for reg in sorted(decref, key=lambda r: ordering[r])",
        "target": "mypyc.transform.refcount.after_branch_decrefs"
      },
      {
        "code": "no-any-expr",
        "column": 46,
        "message": "Expression type contains \"Any\" (has type \"(Untyped) -> int\")",
        "offset": 18,
        "src": "reg for reg in sorted(incref, key=lambda r: ordering[r]) if reg.type.is_refcounted",
        "target": "mypyc.transform.refcount.after_branch_increfs"
      }
    ]
  },
  "format": "1.7",
  "targets": [
    "package:mypy",
    "package:mypyc"
  ]
}
