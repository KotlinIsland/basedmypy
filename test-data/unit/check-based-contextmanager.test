[case testContextManagerWorkProperly]
from __future__ import annotations

class Base:
    def __enter__(self): ...
class Swallow(Base):
    def __exit__(self, x: object, y: object, z: object) -> True: return True
class Pass(Base):
    def __exit__(self, x: object, y: object, z: object) -> False | None: return None
class Normal(Base):
    def __exit__(self, x: object, y: object, z: object) -> bool | None: return True

def f1():    
    with Swallow():  # E: Call to untyped function "Swallow" in typed context  [no-untyped-call]
        raise Exception
    1

def f2():
    with Pass(): # E: Call to untyped function "Pass" in typed context  [no-untyped-call]
        raise Exception
    1  # E: Statement is unreachable  [unreachable]

def f3():    
    with Normal(): # E: Call to untyped function "Normal" in typed context  [no-untyped-call]
        raise Exception
    1
    with Normal(): # E: Call to untyped function "Normal" in typed context  [no-untyped-call]
        return
    1  # E: Statement is unreachable  [unreachable]
[builtins fixtures/exception.pyi]
